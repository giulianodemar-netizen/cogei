<?php

/**
 * Plugin Snippet WordPress - Backoffice Gestione Cantiere ESTESO
 * Gestione richieste accesso cantiere + GESTIONE CANTIERI + ASSEGNAZIONI
 * AGGIORNATO: Fix filtro aziende abilitate + supporto assegnazioni operai per cantiere + VISUALIZZAZIONE ASSEGNAZIONI + AJAX REALE
 * NUOVE FUNZIONALITÀ: Modifica/Cancella cantieri + Gestione assegnazioni migliorata
 */

// Verifica che sia WordPress
if (!defined('ABSPATH')) {
    exit;
}

global $wpdb;
date_default_timezone_set('Europe/Rome');

// ================== CONFIGURAZIONE ==================
$inviamail = false; // Cambia a true per attivare l'invio email

// ================== CREAZIONE NUOVE TABELLE CANTIERI ==================

function createCantieriTablesIfNotExists() {
    global $wpdb;
    
    // 🏗️ TABELLA CANTIERI
    $table_cantieri = $wpdb->prefix . 'cantieri';
    $sql_cantieri = "CREATE TABLE IF NOT EXISTS $table_cantieri (
        id int(11) NOT NULL AUTO_INCREMENT,
        nome varchar(255) NOT NULL,
        descrizione text,
        data_inizio date,
        data_fine date,
        stato enum('attivo','sospeso','completato') DEFAULT 'attivo',
        data_creazione datetime DEFAULT CURRENT_TIMESTAMP,
        data_aggiornamento datetime DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
        PRIMARY KEY (id),
        UNIQUE KEY nome (nome)
    ) ENGINE=InnoDB DEFAULT CHARSET=utf8;";
    $wpdb->query($sql_cantieri);
    
    // 🔗 TABELLA PIVOT CANTIERI-AZIENDE (many-to-many)
    $table_cantieri_aziende = $wpdb->prefix . 'cantieri_aziende';
    $sql_cantieri_aziende = "CREATE TABLE IF NOT EXISTS $table_cantieri_aziende (
        id int(11) NOT NULL AUTO_INCREMENT,
        cantiere_id int(11) NOT NULL,
        user_id int(11) NOT NULL,
        data_assegnazione datetime DEFAULT CURRENT_TIMESTAMP,
        assegnato_da int(11),
        note text,
        PRIMARY KEY (id),
        UNIQUE KEY cantiere_user (cantiere_id, user_id),
        KEY cantiere_id (cantiere_id),
        KEY user_id (user_id)
    ) ENGINE=InnoDB DEFAULT CHARSET=utf8;";
    $wpdb->query($sql_cantieri_aziende);
    
    // 🚀 NUOVA TABELLA: OPERAI ASSEGNATI AI CANTIERI
    $table_cantiere_operai = $wpdb->prefix . 'cantiere_operai_assegnazioni';
    $sql_cantiere_operai = "CREATE TABLE IF NOT EXISTS $table_cantiere_operai (
        id int(11) NOT NULL AUTO_INCREMENT,
        cantiere_id int(11) NOT NULL,
        user_id int(11) NOT NULL,
        operaio_id int(11) NOT NULL,
        data_assegnazione datetime DEFAULT CURRENT_TIMESTAMP,
        PRIMARY KEY (id),
        UNIQUE KEY cantiere_user_operaio (cantiere_id, user_id, operaio_id),
        KEY cantiere_id (cantiere_id),
        KEY user_id (user_id),
        KEY operaio_id (operaio_id)
    ) ENGINE=InnoDB DEFAULT CHARSET=utf8;";
    $wpdb->query($sql_cantiere_operai);
    
    // 🚀 NUOVA TABELLA: POS PER CANTIERE
    $table_cantiere_pos = $wpdb->prefix . 'cantiere_pos_files';
    $sql_cantiere_pos = "CREATE TABLE IF NOT EXISTS $table_cantiere_pos (
        id int(11) NOT NULL AUTO_INCREMENT,
        cantiere_id int(11) NOT NULL,
        user_id int(11) NOT NULL,
        pos_file varchar(255) NOT NULL,
        mezzi_file varchar(255),
        data_caricamento datetime DEFAULT CURRENT_TIMESTAMP,
        PRIMARY KEY (id),
        UNIQUE KEY cantiere_user (cantiere_id, user_id),
        KEY cantiere_id (cantiere_id),
        KEY user_id (user_id)
    ) ENGINE=InnoDB DEFAULT CHARSET=utf8;";
    $wpdb->query($sql_cantiere_pos);
    
    // 🚛 NUOVA TABELLA: AUTOMEZZI
    $table_cantiere_automezzi = $wpdb->prefix . 'cantiere_automezzi';
    $sql_cantiere_automezzi = "CREATE TABLE IF NOT EXISTS $table_cantiere_automezzi (
        id int(11) NOT NULL AUTO_INCREMENT,
        richiesta_id int(11) NOT NULL,
        descrizione_automezzo varchar(255) NOT NULL,
        targa varchar(8) NOT NULL,
        user_id int(11) NOT NULL,
        data_creazione datetime DEFAULT CURRENT_TIMESTAMP,
        data_aggiornamento datetime DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
        PRIMARY KEY (id),
        KEY richiesta_id (richiesta_id),
        KEY user_id (user_id),
        KEY targa (targa)
    ) ENGINE=InnoDB DEFAULT CHARSET=utf8;";
    $wpdb->query($sql_cantiere_automezzi);
    
    // 🔧 NUOVA TABELLA: ATTREZZI
    $table_cantiere_attrezzi = $wpdb->prefix . 'cantiere_attrezzi';
    $sql_cantiere_attrezzi = "CREATE TABLE IF NOT EXISTS $table_cantiere_attrezzi (
        id int(11) NOT NULL AUTO_INCREMENT,
        richiesta_id int(11) NOT NULL,
        descrizione_attrezzo varchar(255) NOT NULL,
        data_revisione date,
        user_id int(11) NOT NULL,
        data_creazione datetime DEFAULT CURRENT_TIMESTAMP,
        data_aggiornamento datetime DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
        PRIMARY KEY (id),
        KEY richiesta_id (richiesta_id),
        KEY user_id (user_id),
        KEY data_revisione (data_revisione)
    ) ENGINE=InnoDB DEFAULT CHARSET=utf8;";
    $wpdb->query($sql_cantiere_attrezzi);
    
    // 🚛 NUOVA TABELLA: ASSEGNAZIONI AUTOMEZZI AI CANTIERI
    $table_cantiere_automezzi_assegnazioni = $wpdb->prefix . 'cantiere_automezzi_assegnazioni';
    $sql_cantiere_automezzi_assegnazioni = "CREATE TABLE IF NOT EXISTS $table_cantiere_automezzi_assegnazioni (
        id int(11) NOT NULL AUTO_INCREMENT,
        cantiere_id int(11) NOT NULL,
        user_id int(11) NOT NULL,
        automezzo_id int(11) NOT NULL,
        data_assegnazione datetime DEFAULT CURRENT_TIMESTAMP,
        PRIMARY KEY (id),
        UNIQUE KEY cantiere_user_automezzo (cantiere_id, user_id, automezzo_id),
        KEY cantiere_id (cantiere_id),
        KEY user_id (user_id),
        KEY automezzo_id (automezzo_id)
    ) ENGINE=InnoDB DEFAULT CHARSET=utf8;";
    $wpdb->query($sql_cantiere_automezzi_assegnazioni);
    
    // 🔧 NUOVA TABELLA: ASSEGNAZIONI ATTREZZI AI CANTIERI
    $table_cantiere_attrezzi_assegnazioni = $wpdb->prefix . 'cantiere_attrezzi_assegnazioni';
    $sql_cantiere_attrezzi_assegnazioni = "CREATE TABLE IF NOT EXISTS $table_cantiere_attrezzi_assegnazioni (
        id int(11) NOT NULL AUTO_INCREMENT,
        cantiere_id int(11) NOT NULL,
        user_id int(11) NOT NULL,
        attrezzo_id int(11) NOT NULL,
        data_assegnazione datetime DEFAULT CURRENT_TIMESTAMP,
        PRIMARY KEY (id),
        UNIQUE KEY cantiere_user_attrezzo (cantiere_id, user_id, attrezzo_id),
        KEY cantiere_id (cantiere_id),
        KEY user_id (user_id),
        KEY attrezzo_id (attrezzo_id)
    ) ENGINE=InnoDB DEFAULT CHARSET=utf8;";
    $wpdb->query($sql_cantiere_attrezzi_assegnazioni);
    
    // 📄 NUOVA TABELLA: RICHIESTE DOCUMENTI
    $table_document_requests = $wpdb->prefix . 'document_requests';
    $sql_document_requests = "CREATE TABLE IF NOT EXISTS $table_document_requests (
        id int(11) NOT NULL AUTO_INCREMENT,
        user_id int(11) NOT NULL,
        richiesta_note text NOT NULL,
        data_richiesta datetime DEFAULT CURRENT_TIMESTAMP,
        richiesto_da int(11) NOT NULL,
        PRIMARY KEY (id),
        UNIQUE KEY unique_user_id (user_id),
        KEY richiesto_da (richiesto_da)
    ) ENGINE=InnoDB DEFAULT CHARSET=utf8;";
    $wpdb->query($sql_document_requests);
    
    error_log("Tabelle cantieri create/verificate: $table_cantieri, $table_cantieri_aziende, $table_cantiere_operai, $table_cantiere_pos, $table_cantiere_automezzi, $table_cantiere_attrezzi, $table_cantiere_automezzi_assegnazioni, $table_cantiere_attrezzi_assegnazioni, $table_document_requests");
}

// Esegui creazione tabelle
createCantieriTablesIfNotExists();

// ================== FUNZIONI HELPER PER AUTOMEZZI E ATTREZZI ==================

function hse_getAutomezziByRichiestaId($richiesta_id) {
    global $wpdb;
    
    return $wpdb->get_results($wpdb->prepare("
        SELECT * FROM {$wpdb->prefix}cantiere_automezzi 
        WHERE richiesta_id = %d 
        ORDER BY id ASC
    ", $richiesta_id), ARRAY_A);
}

function hse_getAttrezziByRichiestaId($richiesta_id) {
    global $wpdb;
    
    return $wpdb->get_results($wpdb->prepare("
        SELECT * FROM {$wpdb->prefix}cantiere_attrezzi 
        WHERE richiesta_id = %d 
        ORDER BY id ASC
    ", $richiesta_id), ARRAY_A);
}

function hse_getAutomezziAssegnatiCantiere($cantiere_id, $user_id) {
    global $wpdb;
    
    return $wpdb->get_results($wpdb->prepare("
        SELECT aa.*, 
               a.descrizione_automezzo, 
               a.targa, 
               a.tipologia,
               a.file_targa,
               a.scadenza_revisione,
               a.scadenza_assicurazione,
               a.file_assicurazione,
               a.scadenza_verifiche_periodiche,
               a.file_verifiche_periodiche
        FROM {$wpdb->prefix}cantiere_automezzi_assegnazioni aa
        JOIN {$wpdb->prefix}cantiere_automezzi a ON aa.automezzo_id = a.id
        WHERE aa.cantiere_id = %d AND aa.user_id = %d
        ORDER BY aa.data_assegnazione DESC
    ", $cantiere_id, $user_id), ARRAY_A);
}

function hse_getAttrezziAssegnatiCantiere($cantiere_id, $user_id) {
    global $wpdb;
    
    return $wpdb->get_results($wpdb->prepare("
        SELECT aa.*, a.descrizione_attrezzo, a.data_revisione
        FROM {$wpdb->prefix}cantiere_attrezzi_assegnazioni aa
        JOIN {$wpdb->prefix}cantiere_attrezzi a ON aa.attrezzo_id = a.id
        WHERE aa.cantiere_id = %d AND aa.user_id = %d
        ORDER BY aa.data_assegnazione DESC
    ", $cantiere_id, $user_id), ARRAY_A);
}

// ================== GESTIONE AZIONI CANTIERI (ESTESO) ==================

if (isset($_GET['cantiere_action']) && isset($_POST['cantiere_submit'])) {
    $action = sanitize_text_field($_GET['cantiere_action']);
    $success = false;
    $success_info = array();
    
    switch ($action) {
        case 'create':
            $nome_cantiere = sanitize_text_field($_POST['nome_cantiere']);
            $descrizione = sanitize_textarea_field($_POST['descrizione_cantiere']);
            $data_inizio = sanitize_text_field($_POST['data_inizio']);
            $data_fine = sanitize_text_field($_POST['data_fine']);
            
            if (!empty($nome_cantiere)) {
                $result = $wpdb->insert(
                    $wpdb->prefix . 'cantieri',
                    array(
                        'nome' => $nome_cantiere,
                        'descrizione' => $descrizione,
                        'data_inizio' => $data_inizio ?: null,
                        'data_fine' => $data_fine ?: null,
                        'stato' => 'attivo'
                    )
                );
                
                if ($result) {
                    $success = true;
                    $success_info = [
                        'action_type' => 'cantiere_creato',
                        'cantiere_nome' => $nome_cantiere,
                        'cantiere_id' => $wpdb->insert_id
                    ];
                }
            }
            break;
            
        // 🆕 NUOVA AZIONE: Modifica cantiere
        case 'edit':
            $cantiere_id = intval($_POST['cantiere_id']);
            $nome_cantiere = sanitize_text_field($_POST['nome_cantiere']);
            $descrizione = sanitize_textarea_field($_POST['descrizione_cantiere']);
            $data_inizio = sanitize_text_field($_POST['data_inizio']);
            $data_fine = sanitize_text_field($_POST['data_fine']);
            $stato = sanitize_text_field($_POST['stato_cantiere']);
            
            if ($cantiere_id && !empty($nome_cantiere)) {
                $result = $wpdb->update(
                    $wpdb->prefix . 'cantieri',
                    array(
                        'nome' => $nome_cantiere,
                        'descrizione' => $descrizione,
                        'data_inizio' => $data_inizio ?: null,
                        'data_fine' => $data_fine ?: null,
                        'stato' => $stato,
                        'data_aggiornamento' => current_time('mysql')
                    ),
                    array('id' => $cantiere_id)
                );
                
                if ($result !== false) {
                    $success = true;
                    $success_info = [
                        'action_type' => 'cantiere_modificato',
                        'cantiere_nome' => $nome_cantiere,
                        'cantiere_id' => $cantiere_id
                    ];
                }
            }
            break;
            
        // 🆕 NUOVA AZIONE: Cancella cantiere
        case 'delete':
            $cantiere_id = intval($_POST['cantiere_id']);
            $conferma = sanitize_text_field($_POST['conferma_cancellazione']);
            
            if ($cantiere_id && $conferma === 'CANCELLA') {
                // Recupera nome cantiere per il messaggio
                $cantiere_nome = $wpdb->get_var($wpdb->prepare(
                    "SELECT nome FROM {$wpdb->prefix}cantieri WHERE id = %d", $cantiere_id
                ));
                
                if ($cantiere_nome) {
                    // Conta elementi collegati
                    $aziende_count = $wpdb->get_var($wpdb->prepare(
                        "SELECT COUNT(*) FROM {$wpdb->prefix}cantieri_aziende WHERE cantiere_id = %d", $cantiere_id
                    ));
                    $operai_count = $wpdb->get_var($wpdb->prepare(
                        "SELECT COUNT(*) FROM {$wpdb->prefix}cantiere_operai_assegnazioni WHERE cantiere_id = %d", $cantiere_id
                    ));
                    $pos_count = $wpdb->get_var($wpdb->prepare(
                        "SELECT COUNT(*) FROM {$wpdb->prefix}cantiere_pos_files WHERE cantiere_id = %d", $cantiere_id
                    ));
                    
                    // Cancella tutti i dati collegati
                    $wpdb->delete($wpdb->prefix . 'cantiere_operai_assegnazioni', array('cantiere_id' => $cantiere_id));
                    $wpdb->delete($wpdb->prefix . 'cantiere_pos_files', array('cantiere_id' => $cantiere_id));
                    $wpdb->delete($wpdb->prefix . 'cantieri_aziende', array('cantiere_id' => $cantiere_id));
                    
                    // Cancella il cantiere
                    $result = $wpdb->delete($wpdb->prefix . 'cantieri', array('id' => $cantiere_id));
                    
                    if ($result) {
                        $success = true;
                        $success_info = [
                            'action_type' => 'cantiere_cancellato',
                            'cantiere_nome' => $cantiere_nome,
                            'cantiere_id' => $cantiere_id,
                            'aziende_rimosse' => $aziende_count,
                            'operai_rimossi' => $operai_count,
                            'pos_rimossi' => $pos_count
                        ];
                    }
                }
            }
            break;
            
        case 'assign':
            $cantiere_id = intval($_POST['cantiere_id']);
            $user_ids = array_map('intval', $_POST['user_ids']);
            $note = sanitize_textarea_field($_POST['note_assegnazione']);
            
            if ($cantiere_id && !empty($user_ids)) {
                $assigned_count = 0;
                foreach ($user_ids as $user_id) {
                    $existing = $wpdb->get_var($wpdb->prepare(
                        "SELECT id FROM {$wpdb->prefix}cantieri_aziende WHERE cantiere_id = %d AND user_id = %d",
                        $cantiere_id, $user_id
                    ));
                    
                    if (!$existing) {
                        $result = $wpdb->insert(
                            $wpdb->prefix . 'cantieri_aziende',
                            array(
                                'cantiere_id' => $cantiere_id,
                                'user_id' => $user_id,
                                'assegnato_da' => get_current_user_id(),
                                'note' => $note
                            )
                        );
                        
                        if ($result) {
                            $assigned_count++;
                        }
                    }
                }
                
                if ($assigned_count > 0) {
                    $success = true;
                    $cantiere_nome = $wpdb->get_var($wpdb->prepare(
                        "SELECT nome FROM {$wpdb->prefix}cantieri WHERE id = %d", $cantiere_id
                    ));
                    $success_info = [
                        'action_type' => 'assegnazioni_create',
                        'cantiere_nome' => $cantiere_nome,
                        'aziende_count' => $assigned_count
                    ];
                }
            }
            break;
            
        case 'unassign':
            $cantiere_id = intval($_POST['cantiere_id']);
            $user_id = intval($_POST['user_id']);
            
            if ($cantiere_id && $user_id) {
                // Rimuovi anche le assegnazioni operai per questa azienda-cantiere
                $wpdb->delete(
                    $wpdb->prefix . 'cantiere_operai_assegnazioni',
                    array('cantiere_id' => $cantiere_id, 'user_id' => $user_id)
                );
                
                // Rimuovi i POS per questa azienda-cantiere
                $wpdb->delete(
                    $wpdb->prefix . 'cantiere_pos_files',
                    array('cantiere_id' => $cantiere_id, 'user_id' => $user_id)
                );
                
                // Rimuovi l'assegnazione azienda-cantiere
                $result = $wpdb->delete(
                    $wpdb->prefix . 'cantieri_aziende',
                    array('cantiere_id' => $cantiere_id, 'user_id' => $user_id)
                );
                
                if ($result) {
                    $success = true;
                    $cantiere_nome = $wpdb->get_var($wpdb->prepare(
                        "SELECT nome FROM {$wpdb->prefix}cantieri WHERE id = %d", $cantiere_id
                    ));
                    $user = get_userdata($user_id);
                    $rag_soc = get_user_meta($user_id, 'user_registration_rag_soc', true);
                    $success_info = [
                        'action_type' => 'assegnazione_rimossa',
                        'cantiere_nome' => $cantiere_nome,
                        'azienda_nome' => $rag_soc ?: $user->display_name
                    ];
                }
            }
            break;
    }
    
    // Redirect dopo azione
    $current_url = $_SERVER['REQUEST_URI'];
    $redirect_url = remove_query_arg(['cantiere_action', 'msg', 'action_type', 'cantiere_nome', 'cantiere_id', 'aziende_count', 'azienda_nome', 'aziende_rimosse', 'operai_rimossi', 'pos_rimossi'], $current_url);
    
    if ($success && !empty($success_info)) {
        $redirect_params = array_merge(['msg' => 'success'], $success_info);
        $redirect_url = add_query_arg($redirect_params, $redirect_url);
    } elseif ($success) {
        $redirect_url = add_query_arg('msg', 'success', $redirect_url);
    } else {
        $redirect_url = add_query_arg('msg', 'error', $redirect_url);
    }
    
    $redirect_url = html_entity_decode($redirect_url, ENT_QUOTES, 'UTF-8');
    
    if (!headers_sent()) {
        header("Location: " . $redirect_url);
        exit;
    } else {
        echo '<script>window.location.href = "' . addslashes($redirect_url) . '";</script>';
        exit;
    }
}
// ================== GESTIONE EXPORT CSV (CON CANTIERI) ==================

if ((isset($_GET['csv_export']) && $_GET['csv_export'] === '1') || 
    (isset($_POST['csv_export']) && $_POST['csv_export'] === '1')) {
    
    // Export identico al precedente ma con aggiunta colonna cantieri
    if (ob_get_level()) {
        ob_end_clean();
    }
    
    header('Content-Type: application/force-download');
    header('Content-Type: application/octet-stream');
    header('Content-Type: application/download');
    header('Content-Disposition: attachment; filename="richieste_cantiere_' . date('Y-m-d_H-i-s') . '.csv"');
    header('Content-Transfer-Encoding: binary');
    header('Cache-Control: must-revalidate, post-check=0, pre-check=0');
    header('Pragma: public');
    header('Expires: 0');
    
    $csv_content = "\xEF\xBB\xBF"; // BOM UTF-8
    
    // Header CSV con cantieri
    $headers = [
        'ID Richiesta',
        'ID Utente', 
        'Ragione Sociale',
        'Email',
        'P.IVA',
        'Tipo',
        'DVR',
        'RCT',
        'POS',
        'Mezzi',
        'Numero Personale',
        'Parte B Completata',
        'Stato Richiesta HSE',
        'Accesso al Cantiere',
        'Cantieri Assegnati',
        'Data Creazione'
    ];
    
    function escapeCsvField($field) {
        if (strpos($field, ',') !== false || strpos($field, '"') !== false || strpos($field, "\n") !== false) {
            return '"' . str_replace('"', '""', $field) . '"';
        }
        return $field;
    }
    
    $csv_content .= implode(',', array_map('escapeCsvField', $headers)) . "\n";
    
    $richieste = getCantiereRequests();
    foreach ($richieste as $richiesta) {
        $user = get_userdata($richiesta['user_id']);
        if (!$user) continue;
        
        $rag_soc = get_user_meta($richiesta['user_id'], 'user_registration_rag_soc', true);
        $tipo = get_user_meta($richiesta['user_id'], 'user_registration_tip_ut_rad', true);
        $abilita_cantiere = get_user_meta($richiesta['user_id'], 'abilita_cantiere', true);
        
        $personale = getPersonaleByRichiestaId($richiesta['id']);
        $accesso_cantiere = determineAccessoCantiere($abilita_cantiere);
        $stato_hse = determineStatoHSE($richiesta, $personale);
        
        // 🏗️ NUOVO: Recupera cantieri assegnati
        $cantieri_assegnati = getCantieriAssegnatiUser($richiesta['user_id']);
        $cantieri_names = array_map(function($c) { return $c['nome']; }, $cantieri_assegnati);
        $cantieri_text = implode('; ', $cantieri_names);
        
        $row = [
            $richiesta['id'],
            $richiesta['user_id'],
            $rag_soc ?: '',
            !empty($richiesta['email_notifiche']) ? $richiesta['email_notifiche'] . ' (Notifiche HSE)' : $user->user_email . ' (Account)',
            $user->display_name,
            $tipo ?: '',
            !empty($richiesta['dvr_file']) ? 'Caricato' : 'Non caricato',
            !empty($richiesta['rct_file']) ? 'Caricato' : 'Non caricato',
            !empty($richiesta['pos_file']) ? 'Caricato' : 'Non caricato',
            !empty($richiesta['mezzi_file']) ? 'Caricato' : 'Non caricato',
            $richiesta['numero_personale'],
            $richiesta['parte_b_completata'] ? 'Si' : 'No',
            $stato_hse['label'],
            $accesso_cantiere['label'],
            $cantieri_text ?: 'Nessuno',
            $richiesta['data_creazione']
        ];
        
        $csv_content .= implode(',', array_map('escapeCsvField', $row)) . "\n";
    }
    
    header('Content-Length: ' . strlen($csv_content));
    echo $csv_content;
    flush();
    wp_die();
}

// ================== FUNZIONI HELPER ORIGINALI + NUOVE ==================

function getCantiereRequests() {
    global $wpdb;
    
    $results = $wpdb->get_results("
        SELECT r.*, COUNT(p.id) as personale_count 
        FROM {$wpdb->prefix}cantiere_richieste r
        LEFT JOIN {$wpdb->prefix}cantiere_personale p ON r.id = p.richiesta_id
        GROUP BY r.id
        ORDER BY r.data_creazione DESC
    ", ARRAY_A);
    
    return $results;
}

function getPersonaleByRichiestaId($richiesta_id) {
    global $wpdb;
    
    return $wpdb->get_results($wpdb->prepare("
        SELECT * FROM {$wpdb->prefix}cantiere_personale 
        WHERE richiesta_id = %d 
        ORDER BY id ASC
    ", $richiesta_id), ARRAY_A);
}

// 🏗️ NUOVE FUNZIONI CANTIERI

function getAllCantieri($filtro_stato = null) {
    global $wpdb;
    
    $where = "";
    if ($filtro_stato) {
        $where = $wpdb->prepare(" WHERE stato = %s", $filtro_stato);
    }
    
    return $wpdb->get_results("
        SELECT c.*, 
               COUNT(ca.user_id) as aziende_assegnate
        FROM {$wpdb->prefix}cantieri c
        LEFT JOIN {$wpdb->prefix}cantieri_aziende ca ON c.id = ca.cantiere_id
        $where
        GROUP BY c.id
        ORDER BY c.data_creazione DESC
    ", ARRAY_A);
}

// 🆕 NUOVA FUNZIONE: Ottieni cantiere singolo
function getCantiereById($cantiere_id) {
    global $wpdb;
    
    return $wpdb->get_row($wpdb->prepare("
        SELECT * FROM {$wpdb->prefix}cantieri WHERE id = %d
    ", $cantiere_id), ARRAY_A);
}

function getCantieriAssegnatiUser($user_id) {
    global $wpdb;
    
    return $wpdb->get_results($wpdb->prepare("
        SELECT c.*, ca.data_assegnazione, ca.note
        FROM {$wpdb->prefix}cantieri c
        JOIN {$wpdb->prefix}cantieri_aziende ca ON c.id = ca.cantiere_id
        WHERE ca.user_id = %d AND c.stato = 'attivo'
        ORDER BY ca.data_assegnazione DESC
    ", $user_id), ARRAY_A);
}

function getAziendeAssegnateCantiare($cantiere_id) {
    global $wpdb;
    
    return $wpdb->get_results($wpdb->prepare("
        SELECT u.ID, u.user_email, u.display_name,
               um.meta_value as rag_soc,
               um2.meta_value as tipo,
               ca.data_assegnazione, ca.note
        FROM {$wpdb->prefix}cantieri_aziende ca
        JOIN {$wpdb->users} u ON ca.user_id = u.ID
        LEFT JOIN {$wpdb->usermeta} um ON u.ID = um.user_id AND um.meta_key = 'user_registration_rag_soc'
        LEFT JOIN {$wpdb->usermeta} um2 ON u.ID = um2.user_id AND um2.meta_key = 'user_registration_tip_ut_rad'
        WHERE ca.cantiere_id = %d
        ORDER BY ca.data_assegnazione DESC
    ", $cantiere_id), ARRAY_A);
}

function getAziendeAlboFornitori($tipo_filter = null) {
    global $wpdb;
    
    $where = "WHERE um.meta_key = 'user_registration_tip_ut_rad'";
    if ($tipo_filter) {
        $where .= $wpdb->prepare(" AND um.meta_value = %s", $tipo_filter);
    }
    
    return $wpdb->get_results("
        SELECT u.ID, u.user_email, u.display_name,
               um.meta_value as tipo,
               um2.meta_value as rag_soc,
               COALESCE(um3.meta_value, '0') as abilita_cantiere
        FROM {$wpdb->users} u
        JOIN {$wpdb->usermeta} um ON u.ID = um.user_id
        LEFT JOIN {$wpdb->usermeta} um2 ON u.ID = um2.user_id AND um2.meta_key = 'user_registration_rag_soc'
        LEFT JOIN {$wpdb->usermeta} um3 ON u.ID = um3.user_id AND um3.meta_key = 'abilita_cantiere'
        $where
        ORDER BY 
            COALESCE(um3.meta_value, '0') DESC,
            um2.meta_value ASC
    ", ARRAY_A);
}

// 🆕 NUOVA FUNZIONE: Ottieni aziende assegnate a un cantiere specifico
function getAziendeAssegnateACantiereIds($cantiere_id) {
    global $wpdb;
    
    $results = $wpdb->get_results($wpdb->prepare("
        SELECT user_id FROM {$wpdb->prefix}cantieri_aziende WHERE cantiere_id = %d
    ", $cantiere_id), ARRAY_A);
    
    return array_column($results, 'user_id');
}

// 🚀 NUOVE FUNZIONI PER OPERAI E CANTIERI

function getOperaiAssegnatiCantiere($cantiere_id, $user_id = null) {
    global $wpdb;
    
    $where_user = $user_id ? $wpdb->prepare(" AND oa.user_id = %d", $user_id) : "";
    
    return $wpdb->get_results($wpdb->prepare("
        SELECT oa.*, p.nome, p.cognome, p.data_nascita,
               p.formazione_antincendio_file, p.formazione_antincendio_data_emissione, p.formazione_antincendio_data_scadenza,
               p.formazione_primo_soccorso_file, p.formazione_primo_soccorso_data_emissione, p.formazione_primo_soccorso_data_scadenza,
               p.formazione_preposti_file, p.formazione_preposti_data_nomina, p.formazione_preposti_data_scadenza,
               p.formazione_generale_specifica_file, p.formazione_generale_specifica_data_emissione, p.formazione_generale_specifica_data_scadenza,
               p.rspp_file, p.rspp_data_nomina, p.rspp_data_scadenza,
               p.rls_file, p.rls_data_nomina, p.rls_data_scadenza,
               p.aspp_file, p.aspp_data_nomina, p.aspp_data_scadenza,
               p.formazione_ple_file, p.formazione_ple_data_emissione, p.formazione_ple_data_scadenza,
               p.formazione_carrelli_file, p.formazione_carrelli_data_emissione, p.formazione_carrelli_data_scadenza,
               p.formazione_lavori_quota_file, p.formazione_dpi_terza_categoria_file, p.formazione_ambienti_confinati_file
        FROM {$wpdb->prefix}cantiere_operai_assegnazioni oa
        JOIN {$wpdb->prefix}cantiere_personale p ON oa.operaio_id = p.id
        WHERE oa.cantiere_id = %d $where_user
        ORDER BY oa.data_assegnazione DESC
    ", $cantiere_id), ARRAY_A);
}

// 🚛 NUOVE FUNZIONI PER AUTOMEZZI

function getAutomezziByRichiestaId($richiesta_id) {
    global $wpdb;
    
    return $wpdb->get_results($wpdb->prepare("
        SELECT * FROM {$wpdb->prefix}cantiere_automezzi 
        WHERE richiesta_id = %d 
        ORDER BY id ASC
    ", $richiesta_id), ARRAY_A);
}

function getAutomezziAssegnatiCantiere($cantiere_id, $user_id = null) {
    global $wpdb;
    
    $where_user = $user_id ? $wpdb->prepare(" AND aa.user_id = %d", $user_id) : "";
    
    return $wpdb->get_results($wpdb->prepare("
        SELECT aa.*, a.descrizione_automezzo, a.targa
        FROM {$wpdb->prefix}cantiere_automezzi_assegnazioni aa
        JOIN {$wpdb->prefix}cantiere_automezzi a ON aa.automezzo_id = a.id
        WHERE aa.cantiere_id = %d $where_user
        ORDER BY aa.data_assegnazione DESC
    ", $cantiere_id), ARRAY_A);
}

function getAutomezzoCantieriAssegnazioni($automezzo_id, $user_id) {
    global $wpdb;
    
    return $wpdb->get_results($wpdb->prepare("
        SELECT aa.*, c.nome as cantiere_nome, c.stato as cantiere_stato
        FROM {$wpdb->prefix}cantiere_automezzi_assegnazioni aa
        JOIN {$wpdb->prefix}cantieri c ON aa.cantiere_id = c.id
        WHERE aa.automezzo_id = %d AND aa.user_id = %d
        ORDER BY c.stato, c.nome
    ", $automezzo_id, $user_id), ARRAY_A);
}

function validateTargaItaliana($targa) {
    // Formato italiano: 2 lettere + 3 numeri + 2 lettere (AA123BB)
    $pattern = '/^[A-Z]{2}[0-9]{3}[A-Z]{2}$/';
    return preg_match($pattern, strtoupper($targa));
}

// 🔧 NUOVE FUNZIONI PER ATTREZZI

function getAttrezziByRichiestaId($richiesta_id) {
    global $wpdb;
    
    return $wpdb->get_results($wpdb->prepare("
        SELECT * FROM {$wpdb->prefix}cantiere_attrezzi 
        WHERE richiesta_id = %d 
        ORDER BY id ASC
    ", $richiesta_id), ARRAY_A);
}

function getAttrezziAssegnatiCantiere($cantiere_id, $user_id = null) {
    global $wpdb;
    
    $where_user = $user_id ? $wpdb->prepare(" AND at.user_id = %d", $user_id) : "";
    
    return $wpdb->get_results($wpdb->prepare("
        SELECT at.*, a.descrizione_attrezzo, a.data_revisione
        FROM {$wpdb->prefix}cantiere_attrezzi_assegnazioni at
        JOIN {$wpdb->prefix}cantiere_attrezzi a ON at.attrezzo_id = a.id
        WHERE at.cantiere_id = %d $where_user
        ORDER BY at.data_assegnazione DESC
    ", $cantiere_id), ARRAY_A);
}

function getAttrezzoCantieriAssegnazioni($attrezzo_id, $user_id) {
    global $wpdb;
    
    return $wpdb->get_results($wpdb->prepare("
        SELECT at.*, c.nome as cantiere_nome, c.stato as cantiere_stato
        FROM {$wpdb->prefix}cantiere_attrezzi_assegnazioni at
        JOIN {$wpdb->prefix}cantieri c ON at.cantiere_id = c.id
        WHERE at.attrezzo_id = %d AND at.user_id = %d
        ORDER BY c.stato, c.nome
    ", $attrezzo_id, $user_id), ARRAY_A);
}

function checkAttrezzoScadenze($attrezzo) {
    $warnings = array();
    $oggi = new DateTime();
    
    if (!empty($attrezzo['data_revisione'])) {
        $revisione_scadenza = new DateTime($attrezzo['data_revisione']);
        $diff_giorni = $oggi->diff($revisione_scadenza)->days;
        $is_scaduto = $oggi > $revisione_scadenza;
        
        if ($is_scaduto) {
            $warnings[] = "🚨 Revisione scaduta da $diff_giorni giorni";
        } elseif ($diff_giorni <= 30) {
            $warnings[] = "⚠️ Revisione scade tra $diff_giorni giorni";
        }
    }
    
    return $warnings;
}

// 🚀 FUNZIONI HELPER PER GESTIONE ASSEGNAZIONI AUTOMEZZI E ATTREZZI

function getAutomezziAssegnazioniByUser($user_id) {
    global $wpdb;
    
    return $wpdb->get_results($wpdb->prepare("
        SELECT aa.*, a.descrizione_automezzo, a.targa, c.nome as cantiere_nome, c.id as cantiere_id
        FROM {$wpdb->prefix}cantiere_automezzi_assegnazioni aa
        JOIN {$wpdb->prefix}cantiere_automezzi a ON aa.automezzo_id = a.id
        JOIN {$wpdb->prefix}cantieri c ON aa.cantiere_id = c.id
        WHERE aa.user_id = %d
        ORDER BY c.nome ASC, a.descrizione_automezzo ASC
    ", $user_id), ARRAY_A);
}

function getAttrezziAssegnazioniByUser($user_id) {
    global $wpdb;
    
    return $wpdb->get_results($wpdb->prepare("
        SELECT at.*, a.descrizione_attrezzo, a.data_revisione, c.nome as cantiere_nome, c.id as cantiere_id
        FROM {$wpdb->prefix}cantiere_attrezzi_assegnazioni at
        JOIN {$wpdb->prefix}cantiere_attrezzi a ON at.attrezzo_id = a.id
        JOIN {$wpdb->prefix}cantieri c ON at.cantiere_id = c.id
        WHERE at.user_id = %d
        ORDER BY c.nome ASC, a.descrizione_attrezzo ASC
    ", $user_id), ARRAY_A);
}

function groupAutomezziAssegnazioniByAutomezzo($assegnazioni) {
    $automezzi_grouped = array();
    
    foreach ($assegnazioni as $assegnazione) {
        $automezzo_key = $assegnazione['automezzo_id'];
        
        if (!isset($automezzi_grouped[$automezzo_key])) {
            $automezzi_grouped[$automezzo_key] = array(
                'automezzo_id' => $assegnazione['automezzo_id'],
                'descrizione_automezzo' => $assegnazione['descrizione_automezzo'],
                'targa' => $assegnazione['targa'],
                'cantieri' => array()
            );
        }
        
        $automezzi_grouped[$automezzo_key]['cantieri'][] = array(
            'cantiere_id' => $assegnazione['cantiere_id'],
            'cantiere_nome' => $assegnazione['cantiere_nome'],
            'data_assegnazione' => $assegnazione['data_assegnazione']
        );
    }
    
    return $automezzi_grouped;
}

function groupAttrezziAssegnazioniByAttrezzo($assegnazioni) {
    $attrezzi_grouped = array();
    
    foreach ($assegnazioni as $assegnazione) {
        $attrezzo_key = $assegnazione['attrezzo_id'];
        
        if (!isset($attrezzi_grouped[$attrezzo_key])) {
            $attrezzi_grouped[$attrezzo_key] = array(
                'attrezzo_id' => $assegnazione['attrezzo_id'],
                'descrizione_attrezzo' => $assegnazione['descrizione_attrezzo'],
                'data_revisione' => $assegnazione['data_revisione'],
                'cantieri' => array()
            );
        }
        
        $attrezzi_grouped[$attrezzo_key]['cantieri'][] = array(
            'cantiere_id' => $assegnazione['cantiere_id'],
            'cantiere_nome' => $assegnazione['cantiere_nome'],
            'data_assegnazione' => $assegnazione['data_assegnazione']
        );
    }
    
    return $attrezzi_grouped;
}

// 🚀 NUOVA FUNZIONE: Recupera tutte le assegnazioni operai per un utente
function getOperaiAssegnazioniByUser($user_id) {
    global $wpdb;
    
    return $wpdb->get_results($wpdb->prepare("
        SELECT oa.*, p.nome, p.cognome, p.data_nascita, c.nome as cantiere_nome, c.id as cantiere_id,
               p.formazione_antincendio_file, p.formazione_antincendio_data_emissione, p.formazione_antincendio_data_scadenza,
               p.formazione_primo_soccorso_file, p.formazione_primo_soccorso_data_emissione, p.formazione_primo_soccorso_data_scadenza,
               p.formazione_preposti_file, p.formazione_preposti_data_nomina, p.formazione_preposti_data_scadenza,
               p.formazione_generale_specifica_file, p.formazione_generale_specifica_data_emissione, p.formazione_generale_specifica_data_scadenza,
               p.rspp_file, p.rspp_data_nomina, p.rspp_data_scadenza,
               p.rls_file, p.rls_data_nomina, p.rls_data_scadenza,
               p.aspp_file, p.aspp_data_nomina, p.aspp_data_scadenza,
               p.formazione_ple_file, p.formazione_ple_data_emissione, p.formazione_ple_data_scadenza,
               p.formazione_carrelli_file, p.formazione_carrelli_data_emissione, p.formazione_carrelli_data_scadenza,
               p.formazione_lavori_quota_file, p.formazione_dpi_terza_categoria_file, p.formazione_ambienti_confinati_file
        FROM {$wpdb->prefix}cantiere_operai_assegnazioni oa
        JOIN {$wpdb->prefix}cantiere_personale p ON oa.operaio_id = p.id
        JOIN {$wpdb->prefix}cantieri c ON oa.cantiere_id = c.id
        WHERE oa.user_id = %d
        ORDER BY c.nome ASC, p.nome ASC, p.cognome ASC
    ", $user_id), ARRAY_A);
}

// 🚀 NUOVA FUNZIONE: Raggruppa assegnazioni per operaio
function groupAssegnazioniByOperaio($assegnazioni) {
    $operai_grouped = array();
    
    foreach ($assegnazioni as $assegnazione) {
        $operaio_key = $assegnazione['operaio_id'];
        
        if (!isset($operai_grouped[$operaio_key])) {
            $operai_grouped[$operaio_key] = array(
                'operaio_id' => $assegnazione['operaio_id'],
                'nome' => $assegnazione['nome'],
                'cognome' => $assegnazione['cognome'],
                'data_nascita' => $assegnazione['data_nascita'],
                'formazione_antincendio_file' => $assegnazione['formazione_antincendio_file'],
                'formazione_primo_soccorso_file' => $assegnazione['formazione_primo_soccorso_file'],
                'formazione_preposti_file' => $assegnazione['formazione_preposti_file'],
                'formazione_lavori_quota_file' => $assegnazione['formazione_lavori_quota_file'] ?? '',
                'formazione_dpi_terza_categoria_file' => $assegnazione['formazione_dpi_terza_categoria_file'] ?? '',
                'formazione_ambienti_confinati_file' => $assegnazione['formazione_ambienti_confinati_file'] ?? '',
                'cantieri' => array()
            );
        }
        
        $operai_grouped[$operaio_key]['cantieri'][] = array(
            'cantiere_id' => $assegnazione['cantiere_id'],
            'cantiere_nome' => $assegnazione['cantiere_nome'],
            'data_assegnazione' => $assegnazione['data_assegnazione']
        );
    }
    
    return $operai_grouped;
}

function getPosFileByCantiere($cantiere_id, $user_id) {
    global $wpdb;
    
    return $wpdb->get_row($wpdb->prepare("
        SELECT * FROM {$wpdb->prefix}cantiere_pos_files
        WHERE cantiere_id = %d AND user_id = %d
    ", $cantiere_id, $user_id), ARRAY_A);
}

// Funzioni originali mantenute
function determineAccessoCantiere($abilita_cantiere) {
    if ($abilita_cantiere == '1') {
        return [
            'key' => 'abilitato',
            'label' => 'Abilitato',
            'color' => '#28a745',
            'tooltip' => 'Accesso al cantiere abilitato dall\'amministrazione'
        ];
    } else {
        return [
            'key' => 'disabilitato',
            'label' => 'Disabilitato', 
            'color' => '#dc3545',
            'tooltip' => 'Accesso al cantiere disabilitato dall\'amministrazione'
        ];
    }
}

function determineStatoHSE($richiesta, $personale = null) {
    // Verifica se non ha mai iniziato la compilazione
    // Controlla RCT da user meta invece che da file caricato
    $user_id = $richiesta['user_id'];
    $rct_from_user_meta = get_user_meta($user_id, 'user_registration_file_1677080663513', true);
    
    $documenti_base_mancanti = (empty($richiesta['dvr_file']) && 
                               empty($rct_from_user_meta) && 
                               $richiesta['numero_personale'] == 0);
    
    if ($documenti_base_mancanti) {
        return [
            'key' => 'non_compilata',
            'label' => 'Non Compilata',
            'color' => '#dc3545',
            'tooltip' => 'La richiesta non è stata ancora iniziata'
        ];
    }
    
    // Verifica completamento Parte A (DVR, RCT da user meta, operai inseriti)
    $dvr_presente = !empty($richiesta['dvr_file']);
    $rct_presente = !empty($rct_from_user_meta);
    $operai_inseriti = $richiesta['numero_personale'] > 0;
    
    if ($personale === null) {
        $personale = getPersonaleByRichiestaId($richiesta['id']);
    }
    
    // Verifica se ci sono operai inseriti nel sistema
    $operai_nel_sistema = !empty($personale);
    
    $elementi_parte_a = [$dvr_presente, $rct_presente, $operai_inseriti, $operai_nel_sistema];
    $elementi_completati = array_filter($elementi_parte_a);
    
    if (count($elementi_completati) == 4) {
        return [
            'key' => 'completa',
            'label' => 'Parte A Completa',
            'color' => '#28a745',
            'tooltip' => 'Documenti DVR e RCT caricati, operai inseriti nel sistema',
            'details' => [
                'dvr' => $dvr_presente,
                'rct' => $rct_presente,
                'operai_numero' => $richiesta['numero_personale'],
                'operai_inseriti' => count($personale)
            ]
        ];
    } else {
        return [
            'key' => 'parziale',
            'label' => 'Parte A Parziale',
            'color' => '#ffc107',
            'tooltip' => 'Compilazione parziale: ' . count($elementi_completati) . '/4 elementi completati',
            'details' => [
                'dvr' => $dvr_presente,
                'rct' => $rct_presente,
                'operai_numero' => $richiesta['numero_personale'],
                'operai_inseriti' => count($personale)
            ]
        ];
    }
}
function calculateComplianceStatus($personale) {
    if (empty($personale)) {
        return [
            'conforme' => false,
            'label' => 'Nessun Personale',
            'color' => '#dc3545'
        ];
    }
    
    $personale_selezionato = array_filter($personale, function($persona) {
        return $persona['selezionato_parte_b'] == 1;
    });
    
    $totale_selezionato = count($personale_selezionato);
    
    if ($totale_selezionato == 0) {
        return [
            'conforme' => false,
            'label' => 'Nessuno Selezionato',
            'color' => '#ffc107'
        ];
    }
    
    // 🚀 NUOVA LOGICA: Ogni operaio conta per TUTTE le sue competenze
    $competenze_personale = array();
    $distribuzione = array('antincendio' => 0, 'primo_soccorso' => 0, 'preposti' => 0);
    
    foreach ($personale_selezionato as $persona) {
        $competenze = array();
        $nome_completo = $persona['nome'] . ' ' . $persona['cognome'];
        
        // Conta ogni competenza dell'operaio
        if (!empty($persona['formazione_antincendio_file'])) {
            $competenze[] = 'antincendio';
            $distribuzione['antincendio']++;
        }
        if (!empty($persona['formazione_primo_soccorso_file'])) {
            $competenze[] = 'primo_soccorso';
            $distribuzione['primo_soccorso']++;
        }
        if (!empty($persona['formazione_preposti_file'])) {
            $competenze[] = 'preposti';
            $distribuzione['preposti']++;
        }
        
        $competenze_personale[] = array(
            'nome' => $nome_completo,
            'competenze' => $competenze
        );
    }
    
    // Calcola percentuali: (operai con competenza / totale operai) * 100
    $perc_antincendio = round(($distribuzione['antincendio'] / $totale_selezionato) * 100, 1);
    $perc_primo_soccorso = round(($distribuzione['primo_soccorso'] / $totale_selezionato) * 100, 1);
    $perc_preposti = round(($distribuzione['preposti'] / $totale_selezionato) * 100, 1);
    
    $conforme = ($perc_antincendio >= 30 && $perc_primo_soccorso >= 30 && $perc_preposti >= 30);
    
    return [
        'conforme' => $conforme,
        'label' => $conforme ? 'Conforme (30%+)' : 'Non Conforme',
        'color' => $conforme ? '#28a745' : '#dc3545',
        'details' => [
            'totale_selezionato' => $totale_selezionato,
            'antincendio' => $perc_antincendio,
            'primo_soccorso' => $perc_primo_soccorso,
            'preposti' => $perc_preposti,
            'distribuzione' => $distribuzione,
            'competenze_personale' => $competenze_personale
        ]
    ];
}

function sendCantiereEmail($user_id, $action) {
    global $inviamail;
    
    $user = get_userdata($user_id);
    $rag_soc = get_user_meta($user_id, 'user_registration_rag_soc', true);
    $email = $user->user_email;
    
    $log_file = ABSPATH . 'abilita_disabilita_cantiere.txt';
    $timestamp = date('d/m/Y H:i:s');
    
    if ($action === 'abilita') {
        $subject = "Accesso Cantiere Abilitato - Cogei.net";
        $body_action = "abilitato";
        $color = "#28a745";
    } else {
        $subject = "Accesso Cantiere Disabilitato - Cogei.net";
        $body_action = "disabilitato";
        $color = "#dc3545";
    }
    
    if ($inviamail) {
        $body = "<html>
<head>
<title>Cantiere {$body_action}</title>
</head>
<body>
<div style='background: #03679e; text-align: center; padding: 10px; margin-bottom: 30px;'><img style='max-width: 150px;' src='https://cogei.provasiti.it/cogei/wp-content/uploads/2023/02/logo_bianco-1.png' /></div>
<div style='background: {$color}; color: white; padding: 15px; border-radius: 8px; margin-bottom: 20px; text-align: center;'>
<h2 style='margin: 0; color: white;'>Accesso Cantiere {$body_action}</h2>
</div>
Gentile {$rag_soc},<br><br>
ti informiamo che il tuo accesso al cantiere è stato <strong>{$body_action}</strong>.<br><br>";

    if ($action === 'abilita') {
        $body .= "Ora puoi accedere alla sezione cantiere per caricare i documenti richiesti e gestire il tuo personale.<br><br>";
    } else {
        $body .= "Per maggiori informazioni contatta <a href='mailto:ufficio_qualita@cogei.net'>ufficio_qualita@cogei.net</a><br><br>";
    }

    $body .= "Cordiali Saluti,<br>
Cogei S.r.l.
<div class='footer' style='background: #03679e; padding: 10px; margin-top: 20px;'>
<div class='rigainfofo primariga'><a style='color: white; text-decoration: none;' href='#' target='_blank' rel='noopener'>Via Francesco Lomonaco, 3 - 80121 Napoli</a></div>
<div class='rigainfofo'><a style='color: white; text-decoration: none;' href='tel:+390812303782'>TEL: +39 081.230.37.82</a></div>
<div class='rigainfofo primariga'><a style='color: white; text-decoration: none;' href='mailto:cogei@pec.cogei.net'>PEC: cogei@pec.cogei.net</a></div>
<div style='margin-top: 40px; text-align: center; color: white; font-size: 12px !important;'>COGEI SRL - P.IVA: IT06569020636 - Copyright © 2023 Cogei. All Rights Reserved.</div>
</div>
</body>
</html>";

        $headers = "MIME-Version: 1.0" . "\r\n";
        $headers .= "Content-type:text/html;charset=UTF-8" . "\r\n";
        $headers .= 'From: <no-reply@cogei.net>' . "\r\n";
        
        $email_sent = mail($email, $subject, $body, $headers);
        $log_entry = "[{$timestamp}] CANTIERE {$action} - ID: {$user_id} | Email: {$email} | Ragione Sociale: {$rag_soc} | Email INVIATA: " . ($email_sent ? 'SI' : 'FALLITA') . "\n";
    } else {
        $log_entry = "[{$timestamp}] CANTIERE {$action} - ID: {$user_id} | Email: {$email} | Ragione Sociale: {$rag_soc} | Email NON INVIATA (inviamail=false)\n";
    }
    
    if (!file_exists($log_file)) {
        $header = "LOG ABILITAZIONI/DISABILITAZIONI CANTIERE - " . date('Y') . "\n";
        $header .= str_repeat("=", 80) . "\n\n";
        file_put_contents($log_file, $header, FILE_APPEND | LOCK_EX);
    }
    
    file_put_contents($log_file, $log_entry, FILE_APPEND | LOCK_EX);
}

// ================== GESTIONE AZIONI ORIGINALI ==================

if (isset($_GET['action']) && isset($_GET['user_id'])) {
    $user_id = intval($_GET['user_id']);
    $action = sanitize_text_field($_GET['action']);
    $success = false;
    $success_info = array();
    
    switch ($action) {
        case 'abilita_cantiere':
            update_user_meta($user_id, 'abilita_cantiere', '1');
            sendCantiereEmail($user_id, 'abilita');
            
            $user = get_userdata($user_id);
            $rag_soc = get_user_meta($user_id, 'user_registration_rag_soc', true);
            
            $success = true;
            $success_info = [
                'action_type' => 'abilita_cantiere',
                'user_email' => $user->user_email,
                'user_name' => $rag_soc ?: $user->display_name
            ];
            break;
            
        case 'disabilita_cantiere':
            update_user_meta($user_id, 'abilita_cantiere', '0');
            sendCantiereEmail($user_id, 'disabilita');
            
            $user = get_userdata($user_id);
            $rag_soc = get_user_meta($user_id, 'user_registration_rag_soc', true);
            
            $success = true;
            $success_info = [
                'action_type' => 'disabilita_cantiere',
                'user_email' => $user->user_email,
                'user_name' => $rag_soc ?: $user->display_name
            ];
            break;
    }
    
    // Redirect
    $current_url = $_SERVER['REQUEST_URI'];
    $redirect_url = remove_query_arg(['action', 'user_id', 'msg', 'action_type', 'target_user_id', 'user_email', 'user_name'], $current_url);
    
    if ($success && !empty($success_info)) {
        $redirect_params = array(
            'msg' => 'success',
            'action_type' => $success_info['action_type'],
            'target_user_id' => $user_id,
            'user_email' => rawurlencode($success_info['user_email']),
            'user_name' => rawurlencode($success_info['user_name'])
        );
        
        $redirect_url = add_query_arg($redirect_params, $redirect_url);
    } elseif ($success) {
        $redirect_url = add_query_arg('msg', 'success', $redirect_url);
    } else {
        $redirect_url = add_query_arg('msg', 'error', $redirect_url);
    }
    
    $redirect_url = html_entity_decode($redirect_url, ENT_QUOTES, 'UTF-8');
    
    if (!headers_sent()) {
        header("Location: " . $redirect_url);
        exit;
    } else {
        echo '<script>window.location.href = "' . addslashes($redirect_url) . '";</script>';
        exit;
    }
}

// ================== GESTIONE RICHIESTE DOCUMENTI ==================

if (isset($_POST['document_action'])) {
    $action = sanitize_text_field($_POST['document_action']);
    $user_id = intval($_POST['user_id']);
    $current_user_id = get_current_user_id();
    
    // Debug logging per POST
    error_log("=== DOCUMENT ACTION RECEIVED ===");
    error_log("Action: " . $action);
    error_log("User ID: " . $user_id);
    error_log("Current User ID: " . $current_user_id);
    error_log("POST data: " . print_r($_POST, true));
    
    switch ($action) {
        case 'request_documents':
            $richiesta_note = sanitize_textarea_field($_POST['richiesta_note']);
            
            if (!empty($richiesta_note) && !empty($user_id)) {
                global $wpdb;
                
                // Debug logging
                error_log("=== DOCUMENT REQUEST DEBUG ===");
                error_log("User ID: " . $user_id);
                error_log("Current User ID: " . $current_user_id);
                error_log("Richiesta Note: " . $richiesta_note);
                error_log("Table name: " . $wpdb->prefix . 'document_requests');
                
                // Verifica se la tabella esiste
                $table_exists = $wpdb->get_var($wpdb->prepare(
                    "SHOW TABLES LIKE %s", 
                    $wpdb->prefix . 'document_requests'
                ));
                
                if (!$table_exists) {
                    error_log("ERRORE: Tabella document_requests non esiste!");
                    createCantieriTablesIfNotExists(); // Ricrea le tabelle
                }
                
                // Inserisci o aggiorna la richiesta documenti
                $result = $wpdb->replace(
                    $wpdb->prefix . 'document_requests',
                    array(
                        'user_id' => $user_id,
                        'richiesta_note' => $richiesta_note,
                        'richiesto_da' => $current_user_id
                    ),
                    array(
                        '%d',
                        '%s', 
                        '%d'
                    )
                );
                
                // Debug del risultato
                if ($result === false) {
                    error_log("ERRORE database replace: " . $wpdb->last_error);
                    error_log("Query: " . $wpdb->last_query);
                } else {
                    error_log("SUCCESS: Righe interessate: " . $result);
                    error_log("Query: " . $wpdb->last_query);
                }
                
                if ($result) {
                    // Invia email all'azienda
                    $user = get_userdata($user_id);
                    $rag_soc = get_user_meta($user_id, 'user_registration_rag_soc', true) ?: $user->display_name;
                    $admin_user = get_userdata($current_user_id);
                    
                    if ($inviamail) {
                        $subject = "Richiesta Documenti - Cogei.net";
                        $body = "<html>
<head>
<title>Richiesta Documenti</title>
</head>
<body>
<div style='background: #0066a2; padding: 20px; text-align: center; margin-bottom: 20px; border-radius: 8px;'>
<h2 style='margin: 0; color: white;'>Richiesta Documenti</h2>
</div>
Gentile {$rag_soc},<br><br>
hai ricevuto una richiesta di documenti dal pannello di amministrazione:<br><br>
<div style='background: #f8f9fa; padding: 15px; border-left: 4px solid #0066a2; margin: 20px 0;'>
<strong>Richiesta:</strong><br>
{$richiesta_note}
</div>
<strong>Richiesto da:</strong> {$admin_user->display_name}<br>
<strong>Data richiesta:</strong> " . date('d/m/Y H:i') . "<br><br>
Ti preghiamo di caricare i documenti richiesti nel tuo pannello cantieri.<br><br>
<a href='" . home_url() . "' style='background: #0066a2; color: white; padding: 10px 20px; text-decoration: none; border-radius: 5px;'>Accedi al Pannello</a>
</body>
</html>";
                        
                        wp_mail($user->user_email, $subject, $body, array('Content-Type: text/html; charset=UTF-8'));
                    }
                    
                    $success = true;
                    $success_info = [
                        'action_type' => 'document_request',
                        'user_name' => $rag_soc,
                        'message' => 'Richiesta documenti inviata'
                    ];
                } else {
                    // Operazione fallita - debug
                    error_log("FAILED: Database operation failed for user_id: " . $user_id);
                    error_log("wpdb error: " . $wpdb->last_error);
                    
                    // Aggiungi messaggio di errore visibile
                    $success = false;
                    $error_message = "Errore nel salvare la richiesta documenti.";
                }
            } else {
                error_log("VALIDATION FAILED: richiesta_note empty or user_id empty");
                error_log("richiesta_note: '" . $richiesta_note . "'");
                error_log("user_id: " . $user_id);
                $success = false;
                $error_message = "Dati mancanti per la richiesta documenti.";
            }
            break;
            
        case 'cancel_request':
            global $wpdb;
            
            // Debug logging per cancellazione
            error_log("=== DOCUMENT REQUEST CANCEL DEBUG ===");
            error_log("User ID to delete: " . $user_id);
            error_log("Table name: " . $wpdb->prefix . 'document_requests');
            
            $result = $wpdb->delete(
                $wpdb->prefix . 'document_requests',
                array('user_id' => $user_id),
                array('%d')
            );
            
            // Debug del risultato cancellazione
            if ($result === false) {
                error_log("ERRORE database delete: " . $wpdb->last_error);
                error_log("Query: " . $wpdb->last_query);
            } else {
                error_log("DELETE SUCCESS: Righe cancellate: " . $result);
                error_log("Query: " . $wpdb->last_query);
            }
            
            if ($result) {
                $user = get_userdata($user_id);
                $rag_soc = get_user_meta($user_id, 'user_registration_rag_soc', true) ?: $user->display_name;
                
                $success = true;
                $success_info = [
                    'action_type' => 'cancel_request',
                    'user_name' => $rag_soc,
                    'message' => 'Richiesta documenti cancellata'
                ];
            }
            break;
    }
    
    if ($success) {
        $redirect_url = remove_query_arg(['document_action', 'user_id', 'richiesta_note', 'msg', 'action_type', 'message', 'user_name'], $_SERVER['REQUEST_URI']);
        $redirect_url = add_query_arg([
            'msg' => 'success',
            'action_type' => $success_info['action_type'],
            'user_name' => rawurlencode($success_info['user_name']),
            'message' => rawurlencode($success_info['message'])
        ], $redirect_url);
        
        error_log("SUCCESS REDIRECT: " . $redirect_url);
        
        // Flush any output buffer before redirect
        if (ob_get_level()) {
            ob_end_clean();
        }
        
        // Use header redirect instead of wp_redirect to avoid WordPress processing
        if (!headers_sent()) {
            header("Location: " . $redirect_url, true, 302);
            exit();
        } else {
            echo '<script>window.location.href = "' . addslashes($redirect_url) . '";</script>';
            exit();
        }
    } else {
        // Gestione errore - redirect con messaggio di errore
        if (isset($error_message)) {
            $redirect_url = remove_query_arg(['document_action', 'user_id', 'richiesta_note', 'msg', 'action_type', 'message', 'user_name'], $_SERVER['REQUEST_URI']);
            $redirect_url = add_query_arg([
                'msg' => 'error',
                'error_message' => rawurlencode($error_message)
            ], $redirect_url);
            
            error_log("ERROR REDIRECT: " . $redirect_url);
            
            // Flush any output buffer before redirect
            if (ob_get_level()) {
                ob_end_clean();
            }
            
            // Use header redirect instead of wp_redirect to avoid WordPress processing
            if (!headers_sent()) {
                header("Location: " . $redirect_url, true, 302);
                exit();
            } else {
                echo '<script>window.location.href = "' . addslashes($redirect_url) . '";</script>';
                exit();
            }
        }
    }
}

// ================== OUTPUT HTML ESTESO ==================

echo '<div style="margin: 20px; font-family: Arial, sans-serif;">';
echo '<h2 style="color: #0066a2; margin-bottom: 30px; border-bottom: 3px solid #0066a2; padding-bottom: 10px;">🏗️ Gestione Accesso Cantiere + Cantieri</h2>';

// STATO EMAIL
echo '<div style="margin-bottom: 15px; padding: 10px; background: ' . ($inviamail ? '#d4edda' : '#fff3cd') . '; border-radius: 5px; border-left: 4px solid ' . ($inviamail ? '#28a745' : '#ffc107') . ';">';
echo '<strong>Stato Email:</strong> ' . ($inviamail ? '<span style="color: #28a745;">ATTIVE - Le email vengono inviate</span>' : '<span style="color: #856404;">DISATTIVATE - Solo log (cambia $inviamail = true per attivare)</span>');
echo '</div>';

// TAB NAVIGATION
echo '<div style="margin-bottom: 20px; border-bottom: 2px solid #e9ecef;">';
echo '<button onclick="showTab(\'richieste\')" id="tab-richieste" class="tab-button active" style="background: #0066a2; color: white; border: none; padding: 12px 20px; margin-right: 5px; cursor: pointer; border-radius: 8px 8px 0 0;">📋 Richieste Cantiere</button>';
echo '<button onclick="showTab(\'cantieri\')" id="tab-cantieri" class="tab-button" style="background: #6c757d; color: white; border: none; padding: 12px 20px; margin-right: 5px; cursor: pointer; border-radius: 8px 8px 0 0;">🏗️ Gestione Cantieri</button>';
echo '<button onclick="showTab(\'assegnazioni\')" id="tab-assegnazioni" class="tab-button" style="background: #6c757d; color: white; border: none; padding: 12px 20px; cursor: pointer; border-radius: 8px 8px 0 0;">🔗 Assegnazioni</button>';
echo '</div>';

// MESSAGGI DI FEEDBACK GLOBALI
if (isset($_GET['msg'])) {
    $msg_type = $_GET['msg'] === 'success' ? 'success' : 'error';
    $msg_color = $msg_type === 'success' ? '#d4edda' : '#f8d7da';
    $msg_text_color = $msg_type === 'success' ? '#155724' : '#721c24';
    $msg_icon = $msg_type === 'success' ? '✅' : '❌';
    
    $msg_text = $msg_icon . ' Operazione completata con successo!';
    
    if ($msg_type === 'success' && isset($_GET['action_type'])) {
        $action_type = sanitize_text_field($_GET['action_type']);
        
        switch ($action_type) {
            case 'abilita_cantiere':
                $user_name = isset($_GET['user_name']) ? rawurldecode(sanitize_text_field($_GET['user_name'])) : '';
                $user_email = isset($_GET['user_email']) ? rawurldecode(sanitize_email($_GET['user_email'])) : '';
                $target_user_id = isset($_GET['target_user_id']) ? intval($_GET['target_user_id']) : 0;
                $msg_text = "🟢 <strong>CANTIERE ABILITATO</strong><br>";
                $msg_text .= "• <strong>ID:</strong> {$target_user_id}<br>";
                $msg_text .= "• <strong>Nome:</strong> {$user_name}<br>";
                $msg_text .= "• <strong>Email:</strong> {$user_email}";
                break;
                
            case 'disabilita_cantiere':
                $user_name = isset($_GET['user_name']) ? rawurldecode(sanitize_text_field($_GET['user_name'])) : '';
                $user_email = isset($_GET['user_email']) ? rawurldecode(sanitize_email($_GET['user_email'])) : '';
                $target_user_id = isset($_GET['target_user_id']) ? intval($_GET['target_user_id']) : 0;
                $msg_text = "🔴 <strong>CANTIERE DISABILITATO</strong><br>";
                $msg_text .= "• <strong>ID:</strong> {$target_user_id}<br>";
                $msg_text .= "• <strong>Nome:</strong> {$user_name}<br>";
                $msg_text .= "• <strong>Email:</strong> {$user_email}";
                break;
                
            case 'cantiere_creato':
                $cantiere_nome = isset($_GET['cantiere_nome']) ? rawurldecode(sanitize_text_field($_GET['cantiere_nome'])) : '';
                $cantiere_id = isset($_GET['cantiere_id']) ? intval($_GET['cantiere_id']) : 0;
                $msg_text = "🏗️ <strong>CANTIERE CREATO</strong><br>";
                $msg_text .= "• <strong>Nome:</strong> {$cantiere_nome}<br>";
                $msg_text .= "• <strong>ID:</strong> {$cantiere_id}";
                break;
                
            // 🆕 NUOVI MESSAGGI
            case 'cantiere_modificato':
                $cantiere_nome = isset($_GET['cantiere_nome']) ? rawurldecode(sanitize_text_field($_GET['cantiere_nome'])) : '';
                $cantiere_id = isset($_GET['cantiere_id']) ? intval($_GET['cantiere_id']) : 0;
                $msg_text = "✏️ <strong>CANTIERE MODIFICATO</strong><br>";
                $msg_text .= "• <strong>Nome:</strong> {$cantiere_nome}<br>";
                $msg_text .= "• <strong>ID:</strong> {$cantiere_id}";
                break;
                
            case 'cantiere_cancellato':
                $cantiere_nome = isset($_GET['cantiere_nome']) ? rawurldecode(sanitize_text_field($_GET['cantiere_nome'])) : '';
                $aziende_rimosse = isset($_GET['aziende_rimosse']) ? intval($_GET['aziende_rimosse']) : 0;
                $operai_rimossi = isset($_GET['operai_rimossi']) ? intval($_GET['operai_rimossi']) : 0;
                $pos_rimossi = isset($_GET['pos_rimossi']) ? intval($_GET['pos_rimossi']) : 0;
                $msg_text = "🗑️ <strong>CANTIERE CANCELLATO</strong><br>";
                $msg_text .= "• <strong>Nome:</strong> {$cantiere_nome}<br>";
                $msg_text .= "• <strong>Dati rimossi:</strong> {$aziende_rimosse} aziende, {$operai_rimossi} operai, {$pos_rimossi} POS";
                break;
                
            case 'assegnazioni_create':
                $cantiere_nome = isset($_GET['cantiere_nome']) ? rawurldecode(sanitize_text_field($_GET['cantiere_nome'])) : '';
                $aziende_count = isset($_GET['aziende_count']) ? intval($_GET['aziende_count']) : 0;
                $msg_text = "🔗 <strong>ASSEGNAZIONI COMPLETATE</strong><br>";
                $msg_text .= "• <strong>Cantiere:</strong> {$cantiere_nome}<br>";
                $msg_text .= "• <strong>Aziende assegnate:</strong> {$aziende_count}";
                break;
                
            case 'assegnazione_rimossa':
                $cantiere_nome = isset($_GET['cantiere_nome']) ? rawurldecode(sanitize_text_field($_GET['cantiere_nome'])) : '';
                $azienda_nome = isset($_GET['azienda_nome']) ? rawurldecode(sanitize_text_field($_GET['azienda_nome'])) : '';
                $msg_text = "🗑️ <strong>ASSEGNAZIONE RIMOSSA</strong><br>";
                $msg_text .= "• <strong>Cantiere:</strong> {$cantiere_nome}<br>";
                $msg_text .= "• <strong>Azienda:</strong> {$azienda_nome}";
                break;
                
            // 📄 NUOVI MESSAGGI: Richieste documenti
            case 'document_request':
                $user_name = isset($_GET['user_name']) ? rawurldecode(sanitize_text_field($_GET['user_name'])) : '';
                $message = isset($_GET['message']) ? rawurldecode(sanitize_text_field($_GET['message'])) : '';
                $msg_text = "📄 <strong>RICHIESTA DOCUMENTI INVIATA</strong><br>";
                $msg_text .= "• <strong>Azienda:</strong> {$user_name}<br>";
                $msg_text .= "• <strong>Stato:</strong> {$message}<br>";
                $msg_text .= "• <strong>Email:</strong> Inviata automaticamente all'azienda";
                break;
                
            case 'cancel_request':
                $user_name = isset($_GET['user_name']) ? rawurldecode(sanitize_text_field($_GET['user_name'])) : '';
                $message = isset($_GET['message']) ? rawurldecode(sanitize_text_field($_GET['message'])) : '';
                $msg_text = "🗑️ <strong>RICHIESTA DOCUMENTI CANCELLATA</strong><br>";
                $msg_text .= "• <strong>Azienda:</strong> {$user_name}<br>";
                $msg_text .= "• <strong>Stato:</strong> {$message}";
                break;
        }
    }
    
    echo '<div id="feedback-message" style="margin-bottom: 15px; padding: 15px; background: ' . $msg_color . '; color: ' . $msg_text_color . '; border-radius: 8px; border-left: 5px solid ' . ($msg_type === 'success' ? '#28a745' : '#dc3545') . '; box-shadow: 0 2px 4px rgba(0,0,0,0.1);">';
    echo '<div style="font-size: 14px; line-height: 1.5;">' . $msg_text . '</div>';
    if ($msg_type === 'success') {
        echo '<div id="countdown-text" style="font-size: 11px; color: #6c757d; margin-top: 8px; font-style: italic;">Questo messaggio scomparirà automaticamente tra <span id="countdown-seconds">10</span> secondi...</div>';
    }
    echo '</div>';
}
// ================== TAB 1: RICHIESTE CANTIERE (MODIFICATO) ==================
echo '<div id="content-richieste" class="tab-content">';

// CONTROLLI
echo '<div style="margin-bottom: 15px;">';
echo '<button onclick="exportTableToCSV()" style="background: #28a745; color: white; border: none; padding: 8px 16px; border-radius: 4px; cursor: pointer; font-weight: bold;">📊 Esporta CSV</button>';
echo '<span style="margin-left: 10px; font-size: 12px; color: #666;">Esporta la tabella come visualizzata (con filtri applicati)</span>';
echo '</div>';

// CAMPO DI RICERCA
echo '<div style="margin-bottom: 15px; padding: 10px; background: #f8f9fa; border-radius: 5px;">';
echo '<strong>🔍 Cerca in tutti i campi:</strong><br>';
echo '<input type="text" id="searchInput" placeholder="Scrivi per cercare..." style="width: 100%; max-width: 400px; padding: 8px; border: 1px solid #ddd; border-radius: 4px; margin-top: 5px;" onkeyup="performSearch()">';
echo '<small style="display: block; margin-top: 5px; color: #666;">Cerca per ragione sociale, email, P.IVA, stato cantiere o qualsiasi altro campo</small>';
echo '</div>';

// FILTRI STATI HSE
echo '<div style="margin-bottom: 15px; padding: 10px; background: #f0f0f0; border-radius: 5px;">';
echo '<strong>🏗️ Filtra per Stati HSE:</strong><br>';
echo '<button onclick="clearAllFilters()" style="background: #6c757d; color: white; padding: 4px 8px; border: none; border-radius: 8px; font-size: 11px; margin: 2px; cursor: pointer;">Pulisci Tutti</button><br><br>';

$hse_statuses = [
    'completa' => ['label' => 'Parte A Completa', 'color' => '#28a745'],
    'parziale' => ['label' => 'Parte A Parziale', 'color' => '#ffc107'],
    'non_compilata' => ['label' => 'Non Compilata', 'color' => '#dc3545']
];

foreach ($hse_statuses as $key => $config) {
    echo '<label style="display: inline-block; margin: 2px; cursor: pointer;">';
    echo '<input type="checkbox" id="hse_' . $key . '" onchange="updateFilters()" style="margin-right: 5px;">';
    echo '<span style="background: ' . $config['color'] . '; color: white; padding: 4px 8px; border-radius: 8px; font-size: 11px;">' . $config['label'] . '</span>';
    echo '</label> ';
}
echo '</div>';

// FILTRI ACCESSO CANTIERE
echo '<div style="margin-bottom: 15px; padding: 10px; background: #e3f2fd; border-radius: 5px;">';
echo '<strong>🔐 Filtra per Accesso Cantiere:</strong><br>';
echo '<label style="display: inline-block; margin: 2px; cursor: pointer;">';
echo '<input type="checkbox" id="filter_abilitato" onchange="updateFilters()" style="margin-right: 5px;">';
echo '<span style="background: #28a745; color: white; padding: 4px 8px; border-radius: 8px; font-size: 11px;">Abilitato</span>';
echo '</label> ';
echo '<label style="display: inline-block; margin: 2px; cursor: pointer;">';
echo '<input type="checkbox" id="filter_disabilitato" onchange="updateFilters()" style="margin-right: 5px;">';
echo '<span style="background: #dc3545; color: white; padding: 4px 8px; border-radius: 8px; font-size: 11px;">Disabilitato</span>';
echo '</label> ';
echo '</div>';

// FILTRI ATTIVI
echo '<div id="active-filters" style="margin-bottom: 15px; padding: 10px; background: #fff3cd; border-radius: 5px; border-left: 4px solid #ffc107; display: none;">';
echo '<strong>Filtri Attivi:</strong> <span id="filter-list"></span>';
echo '<button onclick="clearAllFilters()" style="background: #dc3545; color: white; border: none; padding: 2px 6px; border-radius: 3px; font-size: 10px; margin-left: 10px; cursor: pointer;">Rimuovi Tutti</button>';
echo '</div>';

// TABELLA RICHIESTE (CON COLONNA CANTIERI + NUOVA COLONNA ASSEGNAZIONI OPERAI + AUTOMEZZI + ATTREZZI)
echo '<table style="width: 100%; border-collapse: collapse; border: 1px solid #ddd;">';
echo '<tr style="background: #0066a2 !important; color: white !important;">';
echo '<th style="padding: 10px; border: 1px solid #ddd; background: #0066a2 !important; color: white !important;">ID</th>';
echo '<th style="padding: 10px; border: 1px solid #ddd; background: #0066a2 !important; color: white !important;">Ragione Sociale</th>';
echo '<th style="padding: 10px; border: 1px solid #ddd; background: #0066a2 !important; color: white !important;">Email</th>';
echo '<th style="padding: 10px; border: 1px solid #ddd; background: #0066a2 !important; color: white !important;">P.IVA</th>';
echo '<th style="padding: 10px; border: 1px solid #ddd; background: #0066a2 !important; color: white !important;">DVR</th>';
echo '<th style="padding: 10px; border: 1px solid #ddd; background: #0066a2 !important; color: white !important;">RCT</th>';
echo '<th style="padding: 10px; border: 1px solid #ddd; background: #0066a2 !important; color: white !important;">Personale</th>';
echo '<th style="padding: 10px; border: 1px solid #ddd; background: #0066a2 !important; color: white !important;">🚛 Mezzi Meccanici</th>';
echo '<th style="padding: 10px; border: 1px solid #ddd; background: #0066a2 !important; color: white !important;">🔧 Attrezzi</th>';
echo '<th style="padding: 10px; border: 1px solid #ddd; background: #0066a2 !important; color: white !important;">Stato Richiesta HSE</th>';
echo '<th style="padding: 10px; border: 1px solid #ddd; background: #0066a2 !important; color: white !important;">Accesso al Cantiere</th>';
echo '<th style="padding: 10px; border: 1px solid #ddd; background: #0066a2 !important; color: white !important;">🏗️ Cantieri Assegnati</th>';
echo '<th style="padding: 10px; border: 1px solid #ddd; background: #0066a2 !important; color: white !important;">👷 Assegnazioni Operai</th>';
echo '<th style="padding: 10px; border: 1px solid #ddd; background: #0066a2 !important; color: white !important;">📄 Nota richiesta documenti</th>';
echo '<th style="padding: 10px; border: 1px solid #ddd; background: #0066a2 !important; color: white !important;">Azioni</th>';
echo '</tr>';

$richieste = getCantiereRequests();

foreach ($richieste as $richiesta) {
    $user_id = $richiesta['user_id'];
    $user = get_userdata($user_id);
    $rag_soc = get_user_meta($user_id, 'user_registration_rag_soc', true);
    $tipo = get_user_meta($user_id, 'user_registration_tip_ut_rad', true);
    $abilita_cantiere = get_user_meta($user_id, 'abilita_cantiere', true);
    
    $personale = getPersonaleByRichiestaId($richiesta['id']);
    
    $accesso_cantiere = determineAccessoCantiere($abilita_cantiere);
    $stato_hse = determineStatoHSE($richiesta, $personale);
    $compliance = calculateComplianceStatus($personale);
    
    // 🏗️ NUOVO: Cantieri assegnati
    $cantieri_assegnati = getCantieriAssegnatiUser($user_id);
    
    // 🚀 NUOVISSIMO: Assegnazioni operai
    $operai_assegnazioni = getOperaiAssegnazioniByUser($user_id);
    $operai_grouped = groupAssegnazioniByOperaio($operai_assegnazioni);
    
    // 🚛 NUOVO: Assegnazioni automezzi
    // 🚛 NUOVO: Recupera TUTTI gli automezzi dell'utente (assegnati e non assegnati)
    $all_automezzi = array();
    if ($richiesta) {
        $all_automezzi = getAutomezziByRichiestaId($richiesta['id']);
    }
    
    $automezzi_assegnazioni = getAutomezziAssegnazioniByUser($user_id);
    $automezzi_grouped = groupAutomezziAssegnazioniByAutomezzo($automezzi_assegnazioni);
    
    // 🔧 NUOVO: Recupera TUTTI gli attrezzi dell'utente (assegnati e non assegnati)
    $all_attrezzi = array();
    if ($richiesta) {
        $all_attrezzi = getAttrezziByRichiestaId($richiesta['id']);
    }
    
    $attrezzi_assegnazioni = getAttrezziAssegnazioniByUser($user_id);
    $attrezzi_grouped = groupAttrezziAssegnazioniByAttrezzo($attrezzi_assegnazioni);
    
    // 📄 NUOVO: Richiesta documenti
    global $wpdb;
    $document_request = $wpdb->get_row($wpdb->prepare(
        "SELECT * FROM {$wpdb->prefix}document_requests WHERE user_id = %d",
        $user_id
    ), ARRAY_A);
    
    echo '<tr style="border-bottom: 1px solid #ddd;" class="cantiere-row" data-hse-status="' . $stato_hse['key'] . '" data-accesso="' . $accesso_cantiere['key'] . '">';
    echo '<td style="padding: 8px; border: 1px solid #ddd;">' . $richiesta['id'] . '</td>';
    echo '<td style="padding: 8px; border: 1px solid #ddd;">' . ($rag_soc ?: 'N/A') . '</td>';
    
    // 📧 NUOVO: Mostra email notifiche se configurata, altrimenti email account
    echo '<td style="padding: 8px; border: 1px solid #ddd;">';
    if (!empty($richiesta['email_notifiche'])) {
        echo '<span style="color: #28a745; font-weight: bold;">📧 ' . esc_html($richiesta['email_notifiche']) . '</span>';
        echo '<div style="font-size: 10px; color: #6c757d; margin-top: 2px;">(Email Notifiche HSE)</div>';
    } else {
        echo '<span>👤 ' . esc_html($user->user_email) . '</span>';
        echo '<div style="font-size: 10px; color: #6c757d; margin-top: 2px;">(Email Account)</div>';
    }
    echo '</td>';
    
    echo '<td style="padding: 8px; border: 1px solid #ddd;">' . $user->display_name . '</td>';
    
    // File DVR
    echo '<td style="padding: 8px; border: 1px solid #ddd; text-align: center;">';
    
    // TEMPORARY DEBUG - will remove after testing
    $debug_dvr = "ID: " . $richiesta['id'] . " | ";
    $debug_dvr .= "isset: " . (isset($richiesta['dvr_file']) ? 'Y' : 'N') . " | ";
    $debug_dvr .= "empty: " . (empty($richiesta['dvr_file']) ? 'Y' : 'N') . " | ";
    $debug_dvr .= "value: '" . substr($richiesta['dvr_file'] ?? 'NULL', 0, 30) . "'";
    echo '<div title="' . htmlspecialchars($debug_dvr) . '" style="cursor: help;">';
    
    if (!empty($richiesta['dvr_file'])) {
        echo '<div style="display: flex; flex-direction: column; align-items: center; gap: 2px;">';
        echo '<a href="' . esc_url($richiesta['dvr_file']) . '" target="_blank" style="color: #28a745; font-weight: bold;" title="Visualizza DVR">📄 ✓</a>';
        
        if (!empty($richiesta['dvr_data_emissione'])) {
            $dvr_date = DateTime::createFromFormat('Y-m-d', $richiesta['dvr_data_emissione']);
            if ($dvr_date !== false) {
                $dvr_formatted = $dvr_date->format('d/m/Y');
                echo '<span style="color: #666; font-size: 10px; font-weight: bold;">' . $dvr_formatted . '</span>';
            }
        }
        echo '</div>';
    } else {
        echo '<span style="color: #dc3545;">✗</span>';
    }
    
    echo '</div>'; // Close debug wrapper
    echo '</td>';
    
    // File RCT (da user meta)
    echo '<td style="padding: 8px; border: 1px solid #ddd; text-align: center;">';
    $rct_file_id = get_user_meta($user_id, 'user_registration_file_1677080663513', true);
    $rct_scadenza = get_user_meta($user_id, 'user_registration_scad_rct_rco', true);
    
    if (!empty($rct_file_id)) {
        $rct_file_url = wp_get_attachment_url($rct_file_id);
        if ($rct_file_url) {
            echo '<div style="display: flex; flex-direction: column; align-items: center; gap: 2px;">';
            echo '<a href="' . esc_url($rct_file_url) . '" target="_blank" style="color: #28a745; font-weight: bold;" title="Visualizza RCT da iscrizione">🛡️ ✓</a>';
            
            if (!empty($rct_scadenza)) {
                // Parse date from user meta format (dd/mm/yyyy)
                $scadenza_datetime = DateTime::createFromFormat('d/m/Y', $rct_scadenza);
                if ($scadenza_datetime === false) {
                    $scadenza_datetime = DateTime::createFromFormat('Y-m-d', $rct_scadenza);
                }
                
                if ($scadenza_datetime !== false) {
                    $scadenza_formatted = $scadenza_datetime->format('d/m/Y');
                    $oggi = new DateTime();
                    $giorni_alla_scadenza = $oggi->diff($scadenza_datetime)->days;
                    $is_scaduto = $oggi > $scadenza_datetime;
                    
                    if ($is_scaduto) {
                        $date_color = '#dc3545';
                        $date_text = $scadenza_formatted;
                    } elseif ($giorni_alla_scadenza <= 30) {
                        $date_color = '#ffc107';
                        $date_text = $scadenza_formatted;
                    } else {
                        $date_color = '#28a745';
                        $date_text = $scadenza_formatted;
                    }
                    
                    echo '<span style="color: ' . $date_color . '; font-size: 10px; font-weight: bold;">' . $date_text . '</span>';
                }
            }
            echo '</div>';
        } else {
            echo '<span style="color: #dc3545;">✗</span>';
        }
    } else {
        echo '<span style="color: #dc3545;">✗</span>';
    }
    echo '</td>';
    
    // Personale (clickable per dettagli)
    echo '<td style="padding: 8px; border: 1px solid #ddd; text-align: center;">';
    if (!empty($personale)) {
        $totale = count($personale);
        $assegnati_totali = count($operai_assegnazioni);
        
        echo '<button onclick="togglePersonaleDetails(' . $richiesta['id'] . ')" style="background: #17a2b8; color: white; border: none; padding: 4px 8px; border-radius: 4px; cursor: pointer; font-size: 11px;">';
        echo '👥 ' . $totale;
        if ($assegnati_totali > 0) {
            echo ' (' . $assegnati_totali . ' in cantieri)';
        }
        echo '</button>';
    } else {
        echo '<span style="color: #ffc107;">0</span>';
    }
    echo '</td>';
    
    // 🚛 NUOVO: Automezzi (assegnati e non assegnati con distinzione visiva)
    echo '<td style="padding: 8px; border: 1px solid #ddd; font-size: 10px;">';
    
    // Mostra mezzi meccanici assegnati
    if (!empty($automezzi_grouped)) {
        foreach ($automezzi_grouped as $automezzo) {
            $tipologia_icon = '🚗';
            if (!empty($automezzo['tipologia'])) {
                $tipologia_icons = ['AUTO' => '🚗', 'AUTOCARRO' => '🚚', 'AUTOCARRO_GRU' => '🏗️', 'PLE' => '⬆️', 'MEZZI_TERRA' => '🚜'];
                $tipologia_icon = $tipologia_icons[$automezzo['tipologia']] ?? '🚗';
            }
            
            echo '<div onclick="showMezzoDetails(' . $automezzo['automezzo_id'] . ', \'' . addslashes($automezzo['descrizione_automezzo']) . '\')" style="background: #fff3cd; color: #856404; padding: 4px 7px; margin: 2px 0; border-radius: 4px; border-left: 3px solid #ffc107; cursor: pointer; transition: all 0.2s;" onmouseover="this.style.background=\'#ffe9a3\'" onmouseout="this.style.background=\'#fff3cd\'">';
            echo '<span style="display: block; background: #28a745; color: white; padding: 1px 4px; border-radius: 3px; font-size: 8px; margin-bottom: 3px; width: fit-content;">✓ Assegnato</span>';
            echo '<strong>' . $tipologia_icon . ' ' . htmlspecialchars($automezzo['descrizione_automezzo']) . '</strong><br>';
            echo '<span style="font-size: 9px; color: #6c757d;">🏷️ ' . htmlspecialchars($automezzo['targa']) . '</span>';
            if (!empty($automezzo['tipologia']) && $automezzo['tipologia'] !== 'AUTO') {
                $tipologia_labels = ['AUTOCARRO' => 'Autocarro', 'AUTOCARRO_GRU' => 'Autocarro con Gru', 'PLE' => 'PLE', 'MEZZI_TERRA' => 'Mezzi Movimenti Terra'];
                echo ' <span style="font-size: 8px; background: #17a2b8; color: white; padding: 1px 4px; border-radius: 3px;">' . ($tipologia_labels[$automezzo['tipologia']] ?? $automezzo['tipologia']) . '</span>';
            }
            echo '<br>';
            foreach ($automezzo['cantieri'] as $cantiere_assegnazione) {
                echo '<span style="font-size: 9px; color: #6c757d;">├ ' . htmlspecialchars($cantiere_assegnazione['cantiere_nome']) . '</span><br>';
            }
            echo '</div>';
        }
    }
    
    // Mostra mezzi meccanici NON assegnati con stile diverso
    if (!empty($all_automezzi)) {
        $automezzi_assegnati_ids = array();
        foreach ($automezzi_grouped as $automezzo) {
            $automezzi_assegnati_ids[] = $automezzo['automezzo_id'];
        }
        
        foreach ($all_automezzi as $automezzo) {
            if (!in_array($automezzo['id'], $automezzi_assegnati_ids)) {
                $tipologia_icon = '🚗';
                if (!empty($automezzo['tipologia'])) {
                    $tipologia_icons = ['AUTO' => '🚗', 'AUTOCARRO' => '🚚', 'AUTOCARRO_GRU' => '🏗️', 'PLE' => '⬆️', 'MEZZI_TERRA' => '🚜'];
                    $tipologia_icon = $tipologia_icons[$automezzo['tipologia']] ?? '🚗';
                }
                
                echo '<div onclick="showMezzoDetails(' . $automezzo['id'] . ', \'' . addslashes($automezzo['descrizione_automezzo']) . '\')" style="background: #f8f9fa; color: #6c757d; padding: 4px 7px; margin: 2px 0; border-radius: 4px; border-left: 3px solid #dee2e6; opacity: 0.7; cursor: pointer; transition: all 0.2s;" onmouseover="this.style.opacity=\'1\'" onmouseout="this.style.opacity=\'0.7\'">';
                echo '<span style="display: block; background: #6c757d; color: white; padding: 1px 4px; border-radius: 3px; font-size: 8px; margin-bottom: 3px; width: fit-content;">⚪ Non assegnato</span>';
                echo '<strong>' . $tipologia_icon . ' ' . htmlspecialchars($automezzo['descrizione_automezzo']) . '</strong><br>';
                echo '<span style="font-size: 9px; color: #6c757d;">🏷️ ' . htmlspecialchars($automezzo['targa']) . '</span>';
                if (!empty($automezzo['tipologia']) && $automezzo['tipologia'] !== 'AUTO') {
                    $tipologia_labels = ['AUTOCARRO' => 'Autocarro', 'AUTOCARRO_GRU' => 'Autocarro con Gru', 'PLE' => 'PLE', 'MEZZI_TERRA' => 'Mezzi Movimenti Terra'];
                    echo ' <span style="font-size: 8px; background: #17a2b8; color: white; padding: 1px 4px; border-radius: 3px;">' . ($tipologia_labels[$automezzo['tipologia']] ?? $automezzo['tipologia']) . '</span>';
                }
                echo '</div>';
            }
        }
    }
    
    if (empty($automezzi_grouped) && empty($all_automezzi)) {
        echo '<span style="color: #6c757d; font-style: italic;">Nessun mezzo meccanico</span>';
    }
    echo '</td>';
    
    // 🔧 NUOVO: Attrezzi (assegnati e non assegnati con distinzione visiva)
    echo '<td style="padding: 8px; border: 1px solid #ddd; font-size: 10px;">';
    
    // Mostra attrezzi assegnati
    if (!empty($attrezzi_grouped)) {
        foreach ($attrezzi_grouped as $attrezzo) {
            echo '<div style="background: #e3f2fd; color: #1565c0; padding: 3px 6px; margin: 2px 0; border-radius: 4px; border-left: 3px solid #2196f3;">';
            echo '<span style="display: block; background: #28a745; color: white; padding: 1px 4px; border-radius: 3px; font-size: 8px; margin-bottom: 3px; width: fit-content;">✓ Assegnato</span>';
            echo '<strong>🔧 ' . htmlspecialchars($attrezzo['descrizione_attrezzo']) . '</strong><br>';
            if ($attrezzo['data_revisione']) {
                echo '<span style="font-size: 9px; color: #6c757d;">📅 Rev: ' . date('d/m/Y', strtotime($attrezzo['data_revisione'])) . '</span><br>';
            }
            foreach ($attrezzo['cantieri'] as $cantiere_assegnazione) {
                echo '<span style="font-size: 9px; color: #6c757d;">├ ' . htmlspecialchars($cantiere_assegnazione['cantiere_nome']) . '</span><br>';
            }
            echo '</div>';
        }
    }
    
    // Mostra attrezzi NON assegnati con stile diverso
    if (!empty($all_attrezzi)) {
        $attrezzi_assegnati_ids = array();
        foreach ($attrezzi_grouped as $attrezzo) {
            $attrezzi_assegnati_ids[] = $attrezzo['attrezzo_id'];
        }
        
        foreach ($all_attrezzi as $attrezzo) {
            if (!in_array($attrezzo['id'], $attrezzi_assegnati_ids)) {
                echo '<div style="background: #f8f9fa; color: #6c757d; padding: 3px 6px; margin: 2px 0; border-radius: 4px; border-left: 3px solid #dee2e6; opacity: 0.7;">';
                echo '<span style="display: block; background: #6c757d; color: white; padding: 1px 4px; border-radius: 3px; font-size: 8px; margin-bottom: 3px; width: fit-content;">⚪ Non assegnato</span>';
                echo '<strong>🔧 ' . htmlspecialchars($attrezzo['descrizione_attrezzo']) . '</strong><br>';
                if ($attrezzo['data_revisione']) {
                    echo '<span style="font-size: 9px; color: #6c757d;">📅 Rev: ' . date('d/m/Y', strtotime($attrezzo['data_revisione'])) . '</span>';
                }
                echo '</div>';
            }
        }
    }
    
    if (empty($attrezzi_grouped) && empty($all_attrezzi)) {
        echo '<span style="color: #6c757d; font-style: italic;">Nessun attrezzo</span>';
    }
    echo '</td>';
    
    // Stato Richiesta HSE (with click functionality)
    echo '<td style="padding: 8px; border: 1px solid #ddd; cursor: pointer;" onclick="showStatusDetails(' . $richiesta['id'] . ', \'' . addslashes($rag_soc ?: $user->display_name) . '\')">';
    echo '<span style="background: ' . $stato_hse['color'] . '; color: white; padding: 3px 8px; border-radius: 10px; font-size: 11px;" title="' . htmlspecialchars($stato_hse['tooltip']) . '">' . $stato_hse['label'] . '</span>';
    echo '</td>';
    
    // Accesso al Cantiere
    echo '<td style="padding: 8px; border: 1px solid #ddd;">';
    echo '<span style="background: ' . $accesso_cantiere['color'] . '; color: white; padding: 3px 8px; border-radius: 10px; font-size: 11px;" title="' . htmlspecialchars($accesso_cantiere['tooltip']) . '">' . $accesso_cantiere['label'] . '</span>';
    echo '</td>';
    
    // 🏗️ NUOVO: Cantieri Assegnati (with click functionality)
    echo '<td style="padding: 8px; border: 1px solid #ddd; font-size: 11px;">';
    if (!empty($cantieri_assegnati)) {
        foreach ($cantieri_assegnati as $cantiere) {
            echo '<div style="background: #e3f2fd; color: #1565c0; padding: 2px 6px; margin: 1px 0; border-radius: 4px; border-left: 3px solid #2196f3; cursor: pointer;" onclick="showCantiereWorkers(' . $cantiere['id'] . ', ' . $user_id . ', \'' . addslashes($cantiere['nome']) . '\', \'' . addslashes($rag_soc ?: $user->display_name) . '\')">';
            echo '🏗️ ' . htmlspecialchars($cantiere['nome']);
            echo '</div>';
        }
    } else {
        echo '<span style="color: #6c757d; font-style: italic;">Nessuno</span>';
    }
    echo '</td>';
    
    // 🚀 NUOVISSIMO: Assegnazioni Operai per Cantiere
    echo '<td style="padding: 8px; border: 1px solid #ddd; font-size: 10px;">';
    if (!empty($operai_grouped)) {
        foreach ($operai_grouped as $operaio) {
            $nome_operaio = $operaio['nome'] . ' ' . $operaio['cognome'];
            echo '<div style="background: #fff3cd; color: #856404; padding: 3px 6px; margin: 2px 0; border-radius: 4px; border-left: 3px solid #ffc107;">';
            echo '<strong>👷 ' . htmlspecialchars($nome_operaio) . '</strong><br>';
            foreach ($operaio['cantieri'] as $cantiere_assegnazione) {
                echo '<span style="font-size: 9px; color: #6c757d;">├ ' . htmlspecialchars($cantiere_assegnazione['cantiere_nome']) . '</span><br>';
            }
            echo '</div>';
        }
    } else {
        echo '<span style="color: #6c757d; font-style: italic;">Nessuna assegnazione</span>';
    }
    echo '</td>';
    
    // 📄 NUOVO: Nota richiesta documenti
    echo '<td style="padding: 8px; border: 1px solid #ddd;">';
    if ($document_request) {
        echo '<div style="background: #fff3cd; color: #856404; padding: 8px; border-radius: 4px; border-left: 3px solid #ffc107; font-size: 11px;">';
        echo '<strong>📄 Richiesta attiva</strong><br>';
        echo '<div style="margin-top: 4px; font-size: 10px;">';
        echo '<strong>Nota:</strong> ' . htmlspecialchars($document_request['richiesta_note']) . '<br>';
        echo '<strong>Data:</strong> ' . date('d/m/Y H:i', strtotime($document_request['data_richiesta']));
        echo '</div>';
        echo '</div>';
    } else {
        echo '<span style="color: #6c757d; font-style: italic; font-size: 11px;">Nessuna richiesta</span>';
    }
    echo '</td>';
    
    // Azioni
    echo '<td style="padding: 8px; border: 1px solid #ddd;">';
    
    if ($abilita_cantiere == '1') {
        $current_url = $_SERVER['REQUEST_URI'];
        $base_url = strtok($current_url, '?');
        $disabilita_url = $base_url . '?action=disabilita_cantiere&user_id=' . $user_id;
        echo '<a href="' . esc_url($disabilita_url) . '" onclick="return confirm(\'Confermi disabilitazione accesso cantiere?\')" style="background: #dc3545; color: white; border: none; padding: 3px 8px; border-radius: 3px; cursor: pointer; font-size: 10px; text-decoration: none; display: inline-block; margin-bottom: 2px;">🚫 DISABILITA ACCESSO CANTIERE</a>';
    } else {
        $current_url = $_SERVER['REQUEST_URI'];
        $base_url = strtok($current_url, '?');
        $abilita_url = $base_url . '?action=abilita_cantiere&user_id=' . $user_id;
        echo '<a href="' . esc_url($abilita_url) . '" onclick="return confirm(\'Confermi abilitazione accesso cantiere?\')" style="background: #28a745; color: white; border: none; padding: 3px 8px; border-radius: 3px; cursor: pointer; font-size: 10px; text-decoration: none; display: inline-block; margin-bottom: 2px;">✅ ABILITA ACCESSO CANTIERE</a>';
    }
    
    echo '<br>';
    
    // Pulsante richiesta documenti
    if ($document_request) {
        echo '<button onclick="cancelDocumentRequest(' . $user_id . ', \'' . htmlspecialchars($rag_soc ?: $user->display_name, ENT_QUOTES) . '\')" style="background: #6c757d; color: white; border: none; padding: 3px 8px; border-radius: 3px; cursor: pointer; font-size: 10px; display: inline-block;">🗑️ CANCELLA RICHIESTA DOCUMENTI</button>';
    } else {
        echo '<button onclick="openDocumentRequestModal(' . $user_id . ', \'' . htmlspecialchars($rag_soc ?: $user->display_name, ENT_QUOTES) . '\')" style="background: #17a2b8; color: white; border: none; padding: 3px 8px; border-radius: 3px; cursor: pointer; font-size: 10px; display: inline-block;">📄 RICHIEDI DOCUMENTI</button>';
    }
    
    echo '</td>';
    echo '</tr>';
    
    // 🚀 RIGA DETTAGLI PERSONALE MIGLIORATA (CON ASSEGNAZIONI CANTIERI)
    echo '<tr id="personale-details-' . $richiesta['id'] . '" style="display: none; background: #f8f9fa;">';
    echo '<td colspan="16" style="padding: 15px; border: 1px solid #ddd;">';
    echo '<h4 style="margin: 0 0 10px 0; color: #0066a2;">👥 Dettaglio Personale - Richiesta #' . $richiesta['id'] . '</h4>';
    
    if (!empty($personale)) {
        echo '<div style="display: grid; grid-template-columns: repeat(auto-fill, minmax(320px, 1fr)); gap: 15px; max-width: 100%;">';
        
        foreach ($personale as $index => $persona) {
            // Verifica se questa persona è assegnata a cantieri
            $persona_assegnazioni = array_filter($operai_assegnazioni, function($ass) use ($persona) {
                return $ass['operaio_id'] == $persona['id'];
            });
            
            $isAssigned = !empty($persona_assegnazioni);
            $borderColor = $isAssigned ? '#28a745' : '#ddd';
            $bgColor = $isAssigned ? '#f0f9f3' : '#fff';
            
            echo '<div class="summary-card" style="border: 2px solid ' . $borderColor . '; background: ' . $bgColor . '; min-width: 320px; max-width: 500px;">';
            echo '<div style="display: flex; justify-content: space-between; align-items: flex-start; margin-bottom: 12px; gap: 10px;">';
            echo '<h5 class="summary-card-title" style="margin: 0; color: #333; padding-right: 0;">👤 ' . htmlspecialchars($persona['nome']) . ' ' . htmlspecialchars($persona['cognome']) . '</h5>';
            if ($isAssigned) {
                echo '<span class="summary-badge" style="background: #28a745; color: white; padding: 4px 10px; font-size: 11px; white-space: nowrap;">🏗️ ASSEGNATO</span>';
            }
            echo '</div>';
            
            echo '<div class="summary-card-info" style="margin-bottom: 12px;">';
            echo '<div style="font-size: 14px;">📅 <strong>Nato il:</strong> ' . htmlspecialchars($persona['data_nascita']) . '</div>';
            echo '</div>';
            
            // Mostra formazioni con layout migliorato
            echo '<div class="summary-card-info" style="margin-top: 12px; padding-top: 12px; border-top: 2px solid #e0e0e0;">';
            echo '<p style="margin: 0 0 10px 0; font-size: 15px; font-weight: 700; color: #0066a2;">📚 Formazioni</p>';
            
            $formazioni = [];
            if (!empty($persona['formazione_antincendio_file'])) {
                $antincendio_text = '🔥 Antincendio';
                if (!empty($persona['formazione_antincendio_data_emissione']) || !empty($persona['formazione_antincendio_data_scadenza'])) {
                    $antincendio_text .= ' (';
                    if (!empty($persona['formazione_antincendio_data_emissione'])) {
                        $antincendio_text .= 'Em: ' . date('d/m/Y', strtotime($persona['formazione_antincendio_data_emissione']));
                    }
                    if (!empty($persona['formazione_antincendio_data_scadenza'])) {
                        $antincendio_text .= ' - Sc: ' . date('d/m/Y', strtotime($persona['formazione_antincendio_data_scadenza']));
                    }
                    $antincendio_text .= ')';
                }
                $formazioni[] = '<a href="' . esc_url($persona['formazione_antincendio_file']) . '" target="_blank" style="color: #0066a2; font-size: 14px; font-weight: 600;">' . $antincendio_text . '</a>';
            }
            if (!empty($persona['formazione_primo_soccorso_file'])) {
                $primo_soccorso_text = '🚑 Primo Soccorso';
                if (!empty($persona['formazione_primo_soccorso_data_emissione']) || !empty($persona['formazione_primo_soccorso_data_scadenza'])) {
                    $primo_soccorso_text .= ' (';
                    if (!empty($persona['formazione_primo_soccorso_data_emissione'])) {
                        $primo_soccorso_text .= 'Em: ' . date('d/m/Y', strtotime($persona['formazione_primo_soccorso_data_emissione']));
                    }
                    if (!empty($persona['formazione_primo_soccorso_data_scadenza'])) {
                        $primo_soccorso_text .= ' - Sc: ' . date('d/m/Y', strtotime($persona['formazione_primo_soccorso_data_scadenza']));
                    }
                    $primo_soccorso_text .= ')';
                }
                $formazioni[] = '<a href="' . esc_url($persona['formazione_primo_soccorso_file']) . '" target="_blank" style="color: #0066a2; font-size: 14px; font-weight: 600;">' . $primo_soccorso_text . '</a>';
            }
            if (!empty($persona['formazione_preposti_file'])) {
                $preposti_text = '👮 Preposti';
                if (!empty($persona['formazione_preposti_data_nomina']) || !empty($persona['formazione_preposti_data_scadenza'])) {
                    $preposti_text .= ' (';
                    if (!empty($persona['formazione_preposti_data_nomina'])) {
                        $preposti_text .= 'Nom: ' . date('d/m/Y', strtotime($persona['formazione_preposti_data_nomina']));
                    }
                    if (!empty($persona['formazione_preposti_data_scadenza'])) {
                        $preposti_text .= ' - Sc: ' . date('d/m/Y', strtotime($persona['formazione_preposti_data_scadenza']));
                    }
                    $preposti_text .= ')';
                }
                $formazioni[] = '<a href="' . esc_url($persona['formazione_preposti_file']) . '" target="_blank" style="color: #0066a2; font-size: 14px; font-weight: 600;">' . $preposti_text . '</a>';
            }
            
            // 📚 NUOVE FORMAZIONI: Generale e Specifica + Nomine
            $formazioni_nuove = [];
            if (!empty($persona['formazione_generale_specifica_file'])) {
                $gen_spec_text = '🎓 Form. Generale e Specifica';
                if (!empty($persona['formazione_generale_specifica_data_emissione']) || !empty($persona['formazione_generale_specifica_data_scadenza'])) {
                    $gen_spec_text .= ' (';
                    if (!empty($persona['formazione_generale_specifica_data_emissione'])) {
                        $gen_spec_text .= 'Em: ' . date('d/m/Y', strtotime($persona['formazione_generale_specifica_data_emissione']));
                    }
                    if (!empty($persona['formazione_generale_specifica_data_scadenza'])) {
                        $gen_spec_text .= ' - Sc: ' . date('d/m/Y', strtotime($persona['formazione_generale_specifica_data_scadenza']));
                    }
                    $gen_spec_text .= ')';
                }
                $formazioni_nuove[] = '<a href="' . esc_url($persona['formazione_generale_specifica_file']) . '" target="_blank" style="color: #0066a2; font-size: 14px; font-weight: 600;">' . $gen_spec_text . '</a>';
            }
            
            if (!empty($persona['rspp_file'])) {
                $rspp_text = '👷 RSPP';
                if (!empty($persona['rspp_data_nomina']) || !empty($persona['rspp_data_scadenza'])) {
                    $rspp_text .= ' (';
                    if (!empty($persona['rspp_data_nomina'])) {
                        $rspp_text .= 'Nom: ' . date('d/m/Y', strtotime($persona['rspp_data_nomina']));
                    }
                    if (!empty($persona['rspp_data_scadenza'])) {
                        $rspp_text .= ' - Sc: ' . date('d/m/Y', strtotime($persona['rspp_data_scadenza']));
                    }
                    $rspp_text .= ')';
                }
                $formazioni_nuove[] = '<a href="' . esc_url($persona['rspp_file']) . '" target="_blank" style="color: #0066a2; font-size: 14px; font-weight: 700;">' . $rspp_text . '</a>';
            }
            
            if (!empty($persona['rls_file'])) {
                $rls_text = '👷 RLS';
                if (!empty($persona['rls_data_nomina']) || !empty($persona['rls_data_scadenza'])) {
                    $rls_text .= ' (';
                    if (!empty($persona['rls_data_nomina'])) {
                        $rls_text .= 'Nom: ' . date('d/m/Y', strtotime($persona['rls_data_nomina']));
                    }
                    if (!empty($persona['rls_data_scadenza'])) {
                        $rls_text .= ' - Sc: ' . date('d/m/Y', strtotime($persona['rls_data_scadenza']));
                    }
                    $rls_text .= ')';
                }
                $formazioni_nuove[] = '<a href="' . esc_url($persona['rls_file']) . '" target="_blank" style="color: #0066a2; font-size: 14px; font-weight: 700;">' . $rls_text . '</a>';
            }
            
            if (!empty($persona['aspp_file'])) {
                $aspp_text = '👷 ASPP';
                if (!empty($persona['aspp_data_nomina']) || !empty($persona['aspp_data_scadenza'])) {
                    $aspp_text .= ' (';
                    if (!empty($persona['aspp_data_nomina'])) {
                        $aspp_text .= 'Nom: ' . date('d/m/Y', strtotime($persona['aspp_data_nomina']));
                    }
                    if (!empty($persona['aspp_data_scadenza'])) {
                        $aspp_text .= ' - Sc: ' . date('d/m/Y', strtotime($persona['aspp_data_scadenza']));
                    }
                    $aspp_text .= ')';
                }
                $formazioni_nuove[] = '<a href="' . esc_url($persona['aspp_file']) . '" target="_blank" style="color: #0066a2; font-size: 14px; font-weight: 600;">' . $aspp_text . '</a>';
            }
            
            if (!empty($persona['formazione_ple_file'])) {
                $ple_text = '🏗️ PLE';
                if (!empty($persona['formazione_ple_data_emissione']) || !empty($persona['formazione_ple_data_scadenza'])) {
                    $ple_text .= ' (';
                    if (!empty($persona['formazione_ple_data_emissione'])) {
                        $ple_text .= 'Em: ' . date('d/m/Y', strtotime($persona['formazione_ple_data_emissione']));
                    }
                    if (!empty($persona['formazione_ple_data_scadenza'])) {
                        $ple_text .= ' - Sc: ' . date('d/m/Y', strtotime($persona['formazione_ple_data_scadenza']));
                    }
                    $ple_text .= ')';
                }
                $formazioni_nuove[] = '<a href="' . esc_url($persona['formazione_ple_file']) . '" target="_blank" style="color: #0066a2; font-size: 14px; font-weight: 600;">' . $ple_text . '</a>';
            }
            
            if (!empty($persona['formazione_carrelli_file'])) {
                $carrelli_text = '🚜 Carrelli';
                if (!empty($persona['formazione_carrelli_data_emissione']) || !empty($persona['formazione_carrelli_data_scadenza'])) {
                    $carrelli_text .= ' (';
                    if (!empty($persona['formazione_carrelli_data_emissione'])) {
                        $carrelli_text .= 'Em: ' . date('d/m/Y', strtotime($persona['formazione_carrelli_data_emissione']));
                    }
                    if (!empty($persona['formazione_carrelli_data_scadenza'])) {
                        $carrelli_text .= ' - Sc: ' . date('d/m/Y', strtotime($persona['formazione_carrelli_data_scadenza']));
                    }
                    $carrelli_text .= ')';
                }
                $formazioni_nuove[] = '<a href="' . esc_url($persona['formazione_carrelli_file']) . '" target="_blank" style="color: #0066a2; font-size: 14px; font-weight: 600;">' . $carrelli_text . '</a>';
            }
            
            // 🎯 FORMAZIONI LEGACY AGGIUNTIVE
            $formazioni_aggiuntive = [];
            if (!empty($persona['formazione_lavori_quota_file'])) {
                $formazioni_aggiuntive[] = '<a href="' . esc_url($persona['formazione_lavori_quota_file']) . '" target="_blank" style="color: #0066a2; font-size: 14px; font-weight: 600;">🏗️ Lavori in Quota</a>';
            }
            if (!empty($persona['formazione_dpi_terza_categoria_file'])) {
                $formazioni_aggiuntive[] = '<a href="' . esc_url($persona['formazione_dpi_terza_categoria_file']) . '" target="_blank" style="color: #0066a2; font-size: 14px; font-weight: 600;">🦺 DPI 3° Categoria</a>';
            }
            if (!empty($persona['formazione_ambienti_confinati_file'])) {
                $formazioni_aggiuntive[] = '<a href="' . esc_url($persona['formazione_ambienti_confinati_file']) . '" target="_blank" style="color: #0066a2; font-size: 14px; font-weight: 600;">🕳️ Ambienti Confinati</a>';
            }
            
            if (!empty($formazioni)) {
                echo '<div style="font-size: 14px; margin-bottom: 10px; padding: 10px; background: rgba(23, 162, 184, 0.08); border-left: 3px solid #17a2b8; border-radius: 4px; line-height: 1.6;"><strong style="color: #17a2b8;">Base:</strong><br>' . implode('<br>', $formazioni) . '</div>';
            }
            
            if (!empty($formazioni_nuove)) {
                echo '<div style="font-size: 14px; margin-bottom: 10px; padding: 10px; background: rgba(33, 150, 243, 0.08); border-left: 3px solid #2196f3; border-radius: 4px; line-height: 1.6;"><strong style="color: #1976d2;">Specifiche:</strong><br>' . implode('<br>', $formazioni_nuove) . '</div>';
            }
            
            if (!empty($formazioni_aggiuntive)) {
                echo '<div style="font-size: 14px; padding: 10px; background: rgba(255, 193, 7, 0.08); border-left: 3px solid #ffc107; border-radius: 4px; line-height: 1.6;"><strong style="color: #f57c00;">Aggiuntive:</strong><br>' . implode('<br>', $formazioni_aggiuntive) . '</div>';
            }
            
            if (empty($formazioni) && empty($formazioni_nuove) && empty($formazioni_aggiuntive)) {
                echo '<div style="font-size: 14px; color: #dc3545; font-style: italic; padding: 10px; background: rgba(220, 53, 69, 0.1); border-radius: 4px;">⚠️ Nessuna formazione caricata</div>';
            }
            echo '</div>';
            
            // 🚀 SEZIONE: Mostra cantieri assegnati per questa persona
            if ($isAssigned) {
                echo '<div style="margin-top: 12px; padding: 10px 12px; background: rgba(40, 167, 69, 0.08); border-radius: 6px; border-left: 3px solid #28a745;">';
                echo '<div style="font-size: 14px; font-weight: 700; color: #155724; margin-bottom: 6px;">🏗️ Cantieri Assegnati:</div>';
                echo '<div style="font-size: 13px; color: #155724; line-height: 1.6;">';
                
                $cantieri_persona = array();
                foreach ($persona_assegnazioni as $assegnazione) {
                    $cantieri_persona[] = $assegnazione['cantiere_nome'];
                }
                
                $cantieri_unique = array_unique($cantieri_persona);
                echo implode(' • ', array_map('htmlspecialchars', $cantieri_unique));
                echo '</div>';
                echo '</div>';
            }
            
            echo '</div>';
        }
        
        echo '</div>';
        
        // Mostra statistiche conformità se c'è personale selezionato
        if ($compliance['details']['totale_selezionato'] > 0) {
            echo '<div style="margin-top: 15px; padding: 12px; background: #fff; border-radius: 8px; border-left: 4px solid #17a2b8;">';
            echo '<h5 style="margin: 0 0 8px 0; color: #17a2b8;">📊 Analisi Conformità (30% minimo per competenza)</h5>';
            echo '<div style="display: grid; grid-template-columns: repeat(auto-fit, minmax(120px, 1fr)); gap: 10px; font-size: 12px;">';
            
            $competenze = [
                'antincendio' => '🔥 Antincendio',
                'primo_soccorso' => '🚑 Primo Soccorso',
                'preposti' => '👮 Preposti'
            ];
            
            foreach ($competenze as $key => $label) {
                $perc = $compliance['details'][$key];
                $count = $compliance['details']['distribuzione'][$key];
                $color = $perc >= 30 ? '#28a745' : '#dc3545';
                echo '<div style="text-align: center;">';
                echo '<div style="background: ' . $color . '; color: white; padding: 8px; border-radius: 6px;">';
                echo '<div style="font-weight: bold;">' . $perc . '%</div>';
                echo '<div style="font-size: 10px;">' . $label . '</div>';
                echo '<div style="font-size: 9px;">(' . $count . '/' . $compliance['details']['totale_selezionato'] . ' operai)</div>';
                echo '</div>';
                echo '</div>';
            }
            echo '</div>';
            
            // 🚀 NUOVA SEZIONE: Dettaglio competenze per persona
            if (!empty($compliance['details']['competenze_personale'])) {
                echo '<div style="margin-top: 15px; padding: 10px; background: #f8f9fa; border-radius: 6px;">';
                echo '<h6 style="margin: 0 0 10px 0; color: #495057;">👥 Competenze per Operaio</h6>';
                echo '<div style="display: grid; grid-template-columns: repeat(auto-fit, minmax(200px, 1fr)); gap: 8px; font-size: 11px;">';
                
                foreach ($compliance['details']['competenze_personale'] as $persona) {
                    $num_competenze = count($persona['competenze']);
                    $border_color = $num_competenze >= 3 ? '#28a745' : ($num_competenze >= 2 ? '#ffc107' : '#dc3545');
                    
                    echo '<div style="padding: 8px; background: white; border-left: 3px solid ' . $border_color . '; border-radius: 4px;">';
                    echo '<div style="font-weight: bold; margin-bottom: 3px;">' . htmlspecialchars($persona['nome']) . '</div>';
                    
                    if (!empty($persona['competenze'])) {
                        $competenze_labels = [];
                        foreach ($persona['competenze'] as $comp) {
                            $competenze_labels[] = $competenze[$comp];
                        }
                        echo '<div style="color: #666;">' . implode(' • ', $competenze_labels) . '</div>';
                    } else {
                        echo '<div style="color: #dc3545; font-style: italic;">Nessuna competenza</div>';
                    }
                    echo '</div>';
                }
                echo '</div>';
                echo '<div style="margin-top: 8px; font-size: 10px; color: #6c757d;">💡 Ogni operaio contribuisce a tutte le competenze che possiede</div>';
                echo '</div>';
            }
            echo '</div>';
        }
        
        // 🚀 NUOVA SEZIONE: Riepilogo assegnazioni cantieri
        if (!empty($operai_grouped)) {
            echo '<div style="margin-top: 15px; padding: 12px; background: #e3f2fd; border-radius: 8px; border-left: 4px solid #2196f3;">';
            echo '<h5 style="margin: 0 0 12px 0; color: #1565c0;">🏗️ Riepilogo Assegnazioni Cantieri</h5>';
            
            $cantieri_stats = array();
            foreach ($operai_assegnazioni as $assegnazione) {
                $cantiere_nome = $assegnazione['cantiere_nome'];
                if (!isset($cantieri_stats[$cantiere_nome])) {
                    $cantieri_stats[$cantiere_nome] = 0;
                }
                $cantieri_stats[$cantiere_nome]++;
            }
            
            echo '<div style="display: grid; grid-template-columns: repeat(auto-fit, minmax(200px, 1fr)); gap: 10px; font-size: 12px;">';
            foreach ($cantieri_stats as $cantiere_nome => $operai_count) {
                echo '<div style="background: white; padding: 10px; border-radius: 6px; border-left: 4px solid #2196f3;">';
                echo '<div style="font-weight: bold; color: #1565c0; margin-bottom: 5px;">🏗️ ' . htmlspecialchars($cantiere_nome) . '</div>';
                echo '<div style="color: #666;">👷 ' . $operai_count . ' operai assegnati</div>';
                echo '</div>';
            }
            echo '</div>';
            echo '</div>';
        }
        
    } else {
        echo '<p style="color: #666; margin: 0;">Nessun personale inserito</p>';
    }
    
    echo '</td>';
    echo '</tr>';
}

echo '</table>';

// ================== JAVASCRIPT DATA STRUCTURES ==================
echo '<script>';
echo 'window.richiesteData = {';
foreach ($richieste as $richiesta) {
    $user_id = $richiesta['user_id'];
    $user = get_userdata($user_id);
    $rag_soc = get_user_meta($user_id, 'user_registration_rag_soc', true);
    $personale = getPersonaleByRichiestaId($richiesta['id']);
    $stato_hse = determineStatoHSE($richiesta, $personale);
    $cantieri_assegnati = getCantieriAssegnatiUser($user_id);
    $operai_assegnazioni = getOperaiAssegnazioniByUser($user_id);
    
    echo $richiesta['id'] . ': {';
    echo 'id: ' . $richiesta['id'] . ',';
    echo 'user_id: ' . $user_id . ',';
    echo 'azienda_nome: "' . addslashes($rag_soc ?: $user->display_name) . '",';
    echo 'dvr_file: "' . addslashes($richiesta['dvr_file']) . '",';
    echo 'dvr_data_emissione: "' . addslashes($richiesta['dvr_data_emissione']) . '",';
    
    // RCT da user meta
    $rct_file_id = get_user_meta($user_id, 'user_registration_file_1677080663513', true);
    $rct_scadenza = get_user_meta($user_id, 'user_registration_scad_rct_rco', true);
    $rct_file_url = '';
    if (!empty($rct_file_id)) {
        $rct_file_url = wp_get_attachment_url($rct_file_id);
    }
    echo 'rct_file: "' . addslashes($rct_file_url) . '",';
    echo 'rct_scadenza: "' . addslashes($rct_scadenza) . '",';
    
    echo 'numero_personale: ' . intval($richiesta['numero_personale']) . ',';
    echo 'personale_inserito: ' . count($personale) . ',';
    echo 'automezzi_count: ' . count(hse_getAutomezziByRichiestaId($richiesta['id'])) . ',';
    echo 'attrezzi_count: ' . count(hse_getAttrezziByRichiestaId($richiesta['id'])) . ',';
    echo 'stato: {';
    echo 'key: "' . $stato_hse['key'] . '",';
    echo 'label: "' . addslashes($stato_hse['label']) . '",';
    echo 'color: "' . $stato_hse['color'] . '"';
    echo '},';
    echo 'personale: [';
    foreach ($personale as $persona) {
        echo '{';
        echo 'id: ' . $persona['id'] . ',';
        echo 'nome: "' . addslashes($persona['nome']) . '",';
        echo 'cognome: "' . addslashes($persona['cognome']) . '",';
        echo 'data_nascita: "' . addslashes($persona['data_nascita']) . '",';
        echo 'formazione_antincendio: ' . (!empty($persona['formazione_antincendio_file']) ? 'true' : 'false') . ',';
        echo 'formazione_primo_soccorso: ' . (!empty($persona['formazione_primo_soccorso_file']) ? 'true' : 'false') . ',';
        echo 'formazione_preposti: ' . (!empty($persona['formazione_preposti_file']) ? 'true' : 'false') . ',';
        echo 'formazione_generale_specifica: ' . (!empty($persona['formazione_generale_specifica_file']) ? 'true' : 'false') . ',';
        echo 'rspp: ' . (!empty($persona['rspp_file']) ? 'true' : 'false') . ',';
        echo 'rls: ' . (!empty($persona['rls_file']) ? 'true' : 'false') . ',';
        echo 'aspp: ' . (!empty($persona['aspp_file']) ? 'true' : 'false') . ',';
        echo 'formazione_ple: ' . (!empty($persona['formazione_ple_file']) ? 'true' : 'false') . ',';
        echo 'formazione_carrelli: ' . (!empty($persona['formazione_carrelli_file']) ? 'true' : 'false') . ',';
        echo 'formazione_lavori_quota: ' . (!empty($persona['formazione_lavori_quota_file']) ? 'true' : 'false') . ',';
        echo 'formazione_dpi_terza: ' . (!empty($persona['formazione_dpi_terza_categoria_file']) ? 'true' : 'false') . ',';
        echo 'formazione_ambienti_confinati: ' . (!empty($persona['formazione_ambienti_confinati_file']) ? 'true' : 'false');
        echo '},';
    }
    echo '],';
    echo 'cantieri: [';
    foreach ($cantieri_assegnati as $cantiere) {
        // Trova operai assegnati a questo cantiere specifico
        $operai_cantiere = array_filter($operai_assegnazioni, function($assegnazione) use ($cantiere) {
            return $assegnazione['cantiere_id'] == $cantiere['id'];
        });
        
        echo '{';
        echo 'id: ' . $cantiere['id'] . ',';
        echo 'nome: "' . addslashes($cantiere['nome']) . '",';
        
        // Aggiungi dati POS per questo cantiere
        $pos_data = getPosFileByCantiere($cantiere['id'], $user_id);
        echo 'pos_file: "' . addslashes($pos_data['pos_file'] ?? '') . '",';
        echo 'pos_data_emissione: "' . addslashes($pos_data['pos_data_emissione'] ?? '') . '",';
        echo 'mezzi_file: "' . addslashes($pos_data['mezzi_file'] ?? '') . '",';
        
        // Aggiungi automezzi assegnati a questo cantiere (con nuovi campi mezzi meccanici)
        $automezzi_cantiere = hse_getAutomezziAssegnatiCantiere($cantiere['id'], $user_id);
        echo 'automezzi: [';
        foreach ($automezzi_cantiere as $automezzo) {
            echo '{';
            echo 'id: ' . $automezzo['automezzo_id'] . ',';
            echo 'tipologia: "' . addslashes($automezzo['tipologia'] ?? 'AUTO') . '",';
            echo 'descrizione: "' . addslashes($automezzo['descrizione_automezzo']) . '",';
            echo 'targa: "' . addslashes($automezzo['targa']) . '",';
            echo 'file_targa: "' . addslashes($automezzo['file_targa'] ?? '') . '",';
            echo 'scadenza_revisione: "' . addslashes($automezzo['scadenza_revisione'] ?? '') . '",';
            echo 'scadenza_assicurazione: "' . addslashes($automezzo['scadenza_assicurazione'] ?? '') . '",';
            echo 'file_assicurazione: "' . addslashes($automezzo['file_assicurazione'] ?? '') . '",';
            echo 'scadenza_verifiche_periodiche: "' . addslashes($automezzo['scadenza_verifiche_periodiche'] ?? '') . '",';
            echo 'file_verifiche_periodiche: "' . addslashes($automezzo['file_verifiche_periodiche'] ?? '') . '",';
            echo 'data_assegnazione: "' . addslashes($automezzo['data_assegnazione']) . '"';
            echo '},';
        }
        echo '],';
        
        // Aggiungi attrezzi assegnati a questo cantiere
        $attrezzi_cantiere = hse_getAttrezziAssegnatiCantiere($cantiere['id'], $user_id);
        echo 'attrezzi: [';
        foreach ($attrezzi_cantiere as $attrezzo) {
            echo '{';
            echo 'id: ' . $attrezzo['attrezzo_id'] . ',';
            echo 'descrizione: "' . addslashes($attrezzo['descrizione_attrezzo']) . '",';
            echo 'data_revisione: "' . addslashes($attrezzo['data_revisione'] ?? '') . '",';
            echo 'data_assegnazione: "' . addslashes($attrezzo['data_assegnazione']) . '"';
            echo '},';
        }
        echo '],';
        
        echo 'operai: [';
        foreach ($operai_cantiere as $operaio_assegnazione) {
            $operaio_details = array_filter($personale, function($p) use ($operaio_assegnazione) {
                return $p['id'] == $operaio_assegnazione['operaio_id'];
            });
            $operaio = reset($operaio_details);
            if ($operaio) {
                echo '{';
                echo 'id: ' . $operaio['id'] . ',';
                echo 'nome: "' . addslashes($operaio['nome']) . '",';
                echo 'cognome: "' . addslashes($operaio['cognome']) . '",';
                echo 'data_nascita: "' . addslashes($operaio['data_nascita']) . '",';
                echo 'data_assegnazione: "' . addslashes($operaio_assegnazione['data_assegnazione']) . '",';
                
                // 📚 Aggiungi nuovi campi formazione implementati
                echo 'formazione_generale_specifica: ' . (!empty($operaio['formazione_generale_specifica_file']) ? 'true' : 'false') . ',';
                echo 'rspp: ' . (!empty($operaio['rspp_file']) ? 'true' : 'false') . ',';
                echo 'rls: ' . (!empty($operaio['rls_file']) ? 'true' : 'false') . ',';
                echo 'aspp: ' . (!empty($operaio['aspp_file']) ? 'true' : 'false') . ',';
                echo 'formazione_ple: ' . (!empty($operaio['formazione_ple_file']) ? 'true' : 'false') . ',';
                echo 'formazione_carrelli: ' . (!empty($operaio['formazione_carrelli_file']) ? 'true' : 'false') . ',';
                
                $competenze = [];
                if (!empty($operaio['formazione_antincendio_file'])) $competenze[] = 'Antincendio';
                if (!empty($operaio['formazione_primo_soccorso_file'])) $competenze[] = 'Primo Soccorso';
                if (!empty($operaio['formazione_preposti_file'])) $competenze[] = 'Preposti';
                if (!empty($operaio['formazione_lavori_quota_file'])) $competenze[] = 'Lavori in Quota';
                if (!empty($operaio['formazione_dpi_terza_categoria_file'])) $competenze[] = 'DPI 3° Categoria';
                if (!empty($operaio['formazione_ambienti_confinati_file'])) $competenze[] = 'Ambienti Confinati';
                
                echo 'competenze: ["' . implode('", "', array_map('addslashes', $competenze)) . '"],';
                
                $icons = [];
                if (!empty($operaio['formazione_antincendio_file'])) $icons[] = '🔥';
                if (!empty($operaio['formazione_primo_soccorso_file'])) $icons[] = '🚑';
                if (!empty($operaio['formazione_preposti_file'])) $icons[] = '👮';
                if (!empty($operaio['formazione_lavori_quota_file'])) $icons[] = '🏗️';
                if (!empty($operaio['formazione_dpi_terza_categoria_file'])) $icons[] = '🦺';
                if (!empty($operaio['formazione_ambienti_confinati_file'])) $icons[] = '🕳️';
                
                echo 'icons: "' . implode('', $icons) . '"';
                echo '},';
            }
        }
        echo ']';
        echo '},';
    }
    echo ']';
    echo '},';
}
echo '};';

// 🚛 NUOVA STRUTTURA DATI: Mezzi Meccanici
echo 'window.mezziData = {';
$all_richieste_for_mezzi = $wpdb->get_results("SELECT * FROM {$wpdb->prefix}cantiere_richieste WHERE 1=1", ARRAY_A);
foreach ($all_richieste_for_mezzi as $richiesta) {
    $mezzi = hse_getAutomezziByRichiestaId($richiesta['id']);
    foreach ($mezzi as $mezzo) {
        echo $mezzo['id'] . ': {';
        echo 'id: ' . $mezzo['id'] . ',';
        echo 'tipologia: "' . addslashes($mezzo['tipologia'] ?? 'AUTO') . '",';
        echo 'descrizione: "' . addslashes($mezzo['descrizione_automezzo']) . '",';
        echo 'targa: "' . addslashes($mezzo['targa']) . '",';
        echo 'file_targa: "' . addslashes($mezzo['file_targa'] ?? '') . '",';
        echo 'scadenza_revisione: "' . addslashes($mezzo['scadenza_revisione'] ?? '') . '",';
        echo 'scadenza_assicurazione: "' . addslashes($mezzo['scadenza_assicurazione'] ?? '') . '",';
        echo 'file_assicurazione: "' . addslashes($mezzo['file_assicurazione'] ?? '') . '",';
        echo 'scadenza_verifiche_periodiche: "' . addslashes($mezzo['scadenza_verifiche_periodiche'] ?? '') . '",';
        echo 'file_verifiche_periodiche: "' . addslashes($mezzo['file_verifiche_periodiche'] ?? '') . '"';
        echo '},';
    }
}
echo '};';

echo '</script>';

echo '</div>'; // Fine tab richieste
// ================== TAB 2: GESTIONE CANTIERI (ESTESO) ==================
echo '<div id="content-cantieri" class="tab-content" style="display: none;">';

echo '<h3 style="color: #0066a2; margin-bottom: 20px;">🏗️ Gestione Cantieri</h3>';

// FORM CREAZIONE CANTIERE
echo '<div style="background: #f8f9fa; padding: 20px; border-radius: 8px; margin-bottom: 30px; border-left: 5px solid #28a745;">';
echo '<h4 style="color: #28a745; margin-top: 0;">➕ Crea Nuovo Cantiere</h4>';
echo '<form method="post" action="?cantiere_action=create">';
echo '<div style="display: grid; grid-template-columns: 1fr 1fr; gap: 15px; margin-bottom: 15px;">';
echo '<div>';
echo '<label style="display: block; font-weight: bold; margin-bottom: 5px;">Nome Cantiere: *</label>';
echo '<input type="text" name="nome_cantiere" required style="width: 100%; padding: 8px; border: 1px solid #ddd; border-radius: 4px;" placeholder="Es. Cantiere Via Roma 123">';
echo '</div>';
echo '<div>';
echo '<label style="display: block; font-weight: bold; margin-bottom: 5px;">Data Inizio:</label>';
echo '<input type="date" name="data_inizio" style="width: 100%; padding: 8px; border: 1px solid #ddd; border-radius: 4px;">';
echo '</div>';
echo '</div>';

echo '<div style="display: grid; grid-template-columns: 1fr 1fr; gap: 15px; margin-bottom: 15px;">';
echo '<div>';
echo '<label style="display: block; font-weight: bold; margin-bottom: 5px;">Data Fine:</label>';
echo '<input type="date" name="data_fine" style="width: 100%; padding: 8px; border: 1px solid #ddd; border-radius: 4px;">';
echo '</div>';
echo '<div>';
echo '<label style="display: block; font-weight: bold; margin-bottom: 5px;">Descrizione:</label>';
echo '<textarea name="descrizione_cantiere" style="width: 100%; padding: 8px; border: 1px solid #ddd; border-radius: 4px;" rows="2" placeholder="Descrizione opzionale del cantiere"></textarea>';
echo '</div>';
echo '</div>';
echo '<button type="submit" name="cantiere_submit" style="background: #28a745; color: white; border: none; padding: 12px 20px; border-radius: 6px; cursor: pointer; font-weight: bold;">🏗️ Crea Cantiere</button>';
echo '</form>';
echo '</div>';

// LISTA CANTIERI
echo '<h4 style="color: #0066a2; margin-bottom: 15px;">📋 Cantieri Esistenti</h4>';

$cantieri = getAllCantieri();

if (!empty($cantieri)) {
    echo '<div style="display: grid; grid-template-columns: repeat(auto-fit, minmax(350px, 1fr)); gap: 20px;">';
    
    foreach ($cantieri as $cantiere) {
        $stato_color = ($cantiere['stato'] === 'attivo') ? '#28a745' : (($cantiere['stato'] === 'sospeso') ? '#ffc107' : '#6c757d');
        
        echo '<div style="background: white; border: 1px solid #ddd; border-radius: 8px; padding: 20px; box-shadow: 0 2px 4px rgba(0,0,0,0.1);">';
        echo '<div style="display: flex; justify-content: space-between; align-items: center; margin-bottom: 15px;">';
        echo '<h5 style="margin: 0; color: #0066a2;">🏗️ ' . htmlspecialchars($cantiere['nome']) . '</h5>';
        echo '<span style="background: ' . $stato_color . '; color: white; padding: 2px 8px; border-radius: 12px; font-size: 11px; text-transform: uppercase;">' . $cantiere['stato'] . '</span>';
        echo '</div>';
        
        if ($cantiere['descrizione']) {
            echo '<p style="margin: 5px 0; color: #666; font-size: 14px;">' . htmlspecialchars($cantiere['descrizione']) . '</p>';
        }
        
        echo '<div style="margin: 10px 0; font-size: 12px; color: #666;">';
        if ($cantiere['data_inizio']) {
            echo '<div>📅 Inizio: ' . date('d/m/Y', strtotime($cantiere['data_inizio'])) . '</div>';
        }
        if ($cantiere['data_fine']) {
            echo '<div>🏁 Fine: ' . date('d/m/Y', strtotime($cantiere['data_fine'])) . '</div>';
        }
        echo '<div>🏢 Aziende assegnate: <strong>' . intval($cantiere['aziende_assegnate']) . '</strong></div>';
        echo '<div>📅 Creato: ' . date('d/m/Y H:i', strtotime($cantiere['data_creazione'])) . '</div>';
        echo '</div>';
        
        echo '<div style="margin-top: 15px; display: flex; gap: 8px; flex-wrap: wrap;">';
        echo '<button onclick="showAssignmentModal(' . $cantiere['id'] . ', \'' . esc_js($cantiere['nome']) . '\')" style="background: #2196f3; color: white; border: none; padding: 6px 12px; border-radius: 4px; cursor: pointer; font-size: 11px;">🔗 Gestisci Assegnazioni</button>';
        echo '<button onclick="viewCantiereDetails(' . $cantiere['id'] . ')" style="background: #17a2b8; color: white; border: none; padding: 6px 12px; border-radius: 4px; cursor: pointer; font-size: 11px;">👁️ Visualizza Dettagli</button>';
        
        // 🆕 NUOVI PULSANTI: Modifica e Cancella
        echo '<button onclick="showEditCantiereModal(' . $cantiere['id'] . ')" style="background: #fd7e14; color: white; border: none; padding: 6px 12px; border-radius: 4px; cursor: pointer; font-size: 11px;">✏️ Modifica</button>';
        echo '<button onclick="showDeleteCantiereModal(' . $cantiere['id'] . ', \'' . esc_js($cantiere['nome']) . '\')" style="background: #dc3545; color: white; border: none; padding: 6px 12px; border-radius: 4px; cursor: pointer; font-size: 11px;">🗑️ Cancella</button>';
        echo '</div>';
        
        echo '</div>';
    }
    
    echo '</div>';
} else {
    echo '<div style="background: #f8f9fa; padding: 20px; border-radius: 8px; text-align: center; color: #666;">';
    echo '<p style="margin: 0; font-size: 16px;">🏗️ Nessun cantiere creato</p>';
    echo '<p style="margin: 5px 0 0 0; font-size: 14px;">Utilizza il form sopra per creare il primo cantiere</p>';
    echo '</div>';
}

echo '</div>'; // Fine tab cantieri

// ================== TAB 3: ASSEGNAZIONI ==================
echo '<div id="content-assegnazioni" class="tab-content" style="display: none;">';

echo '<h3 style="color: #0066a2; margin: 0 0 20px 0; font-size: 22px; font-weight: 700; border-bottom: 3px solid #17a2b8; padding-bottom: 12px;">🔗 Gestione Assegnazioni Cantieri</h3>';

// FILTRO PER CANTIERE
echo '<div style="background: linear-gradient(135deg, #f8f9fa 0%, #e9ecef 100%); padding: 20px; border-radius: 10px; margin-bottom: 25px; box-shadow: 0 2px 10px rgba(0,0,0,0.08);">';
echo '<label style="display: block; font-weight: 700; margin-bottom: 10px; color: #495057; font-size: 15px;">🔍 Filtra per Cantiere:</label>';
echo '<select id="cantiere-filter" onchange="filterAssignments()" style="width: 100%; max-width: 350px; padding: 10px 12px; border: 2px solid #dee2e6; border-radius: 6px; font-size: 15px; background: white; color: #212529; transition: all 0.3s ease;">';
echo '<option value="">Tutti i cantieri</option>';
foreach ($cantieri as $cantiere) {
    echo '<option value="' . $cantiere['id'] . '">🏗️ ' . htmlspecialchars($cantiere['nome']) . ' (' . $cantiere['aziende_assegnate'] . ' aziende)</option>';
}
echo '</select>';
echo '</div>';

// RIEPILOGO ASSEGNAZIONI
if (!empty($cantieri)) {
    echo '<div id="assignments-summary">';
    
    foreach ($cantieri as $cantiere) {
        $aziende_assegnate = getAziendeAssegnateCantiare($cantiere['id']);
        
        echo '<div class="assignment-group" data-cantiere-id="' . $cantiere['id'] . '" style="background: white; border: 2px solid #dee2e6; border-radius: 10px; margin-bottom: 25px; overflow: hidden; box-shadow: 0 4px 15px rgba(0,0,0,0.1);">';
        
        // Header cantiere
        echo '<div style="background: linear-gradient(135deg, #2196f3, #1976d2); color: white; padding: 20px;">';
        echo '<div style="display: flex; justify-content: space-between; align-items: center; flex-wrap: wrap; gap: 10px;">';
        echo '<h4 style="margin: 0; font-size: 20px; font-weight: 700;">🏗️ ' . htmlspecialchars($cantiere['nome']) . '</h4>';
        echo '<span style="background: rgba(255,255,255,0.25); padding: 6px 14px; border-radius: 20px; font-size: 13px; font-weight: 600; box-shadow: 0 2px 6px rgba(0,0,0,0.15);">📊 ' . count($aziende_assegnate) . ' aziende</span>';
        echo '</div>';
        if ($cantiere['descrizione']) {
            echo '<p style="margin: 10px 0 0 0; font-size: 15px; opacity: 0.95; line-height: 1.5;">' . htmlspecialchars($cantiere['descrizione']) . '</p>';
        }
        echo '</div>';
        
        // Lista aziende assegnate
        echo '<div style="padding: 25px;">';
        
        if (!empty($aziende_assegnate)) {
            echo '<div style="display: grid; grid-template-columns: repeat(auto-fit, minmax(320px, 1fr)); gap: 18px;">';
            
            foreach ($aziende_assegnate as $azienda) {
                // 🚀 NUOVO: Recupera assegnazioni operai per questa azienda in questo cantiere
                $operai_assegnati_cantiere = getOperaiAssegnatiCantiere($cantiere['id'], $azienda['ID']);
                
                echo '<div style="background: linear-gradient(135deg, #f8f9fa 0%, #ffffff 100%); border: 2px solid #e9ecef; border-radius: 8px; padding: 18px; position: relative; box-shadow: 0 2px 8px rgba(0,0,0,0.08); transition: all 0.3s ease;">';
                
                // Pulsante rimozione
                echo '<form method="post" action="?cantiere_action=unassign" style="position: absolute; top: 12px; right: 12px;" onsubmit="return confirm(\'Confermi la rimozione di questa assegnazione? Verranno rimossi anche eventuali operai assegnati e file POS.\')">';
                echo '<input type="hidden" name="cantiere_id" value="' . $cantiere['id'] . '">';
                echo '<input type="hidden" name="user_id" value="' . $azienda['ID'] . '">';
                echo '<button type="submit" name="cantiere_submit" style="background: #dc3545; color: white; border: none; width: 24px; height: 24px; border-radius: 50%; cursor: pointer; font-size: 12px; font-weight: 700; box-shadow: 0 2px 6px rgba(220,53,69,0.3); transition: all 0.2s ease;">✕</button>';
                echo '</form>';
                
                echo '<h6 style="margin: 0 0 10px 0; color: #0066a2; padding-right: 30px; font-size: 17px; font-weight: 700;">' . ($azienda['rag_soc'] ?: $azienda['display_name']) . '</h6>';
                echo '<div style="font-size: 13px; color: #495057; line-height: 1.6;">';
                echo '<div style="margin-bottom: 4px;">📧 <span style="color: #212529;">' . $azienda['user_email'] . '</span></div>';
                echo '<div style="margin-bottom: 4px;">🏷️ <strong>Tipo:</strong> <span style="color: #212529;">' . ($azienda['tipo'] ?: 'N/A') . '</span></div>';
                echo '<div style="margin-bottom: 10px;">📅 <strong>Assegnato:</strong> <span style="color: #212529;">' . date('d/m/Y H:i', strtotime($azienda['data_assegnazione'])) . '</span></div>';
                
                // 🚀 NUOVA SEZIONE: Mostra operai assegnati a questo cantiere
                if (!empty($operai_assegnati_cantiere)) {
                    echo '<div style="margin-top: 12px; padding: 12px; background: linear-gradient(135deg, #e8f5e9 0%, #f1f8f4 100%); border-radius: 6px; border-left: 4px solid #66bb6a; box-shadow: 0 2px 6px rgba(102,187,106,0.15);">';
                    echo '<div style="font-weight: 700; color: #2e7d32; font-size: 13px; margin-bottom: 8px;">👷 Operai Assegnati (' . count($operai_assegnati_cantiere) . '):</div>';
                    foreach ($operai_assegnati_cantiere as $operaio) {
                        echo '<div style="font-size: 12px; color: #212529; margin-bottom: 5px; padding: 4px 0;">';
                        echo '<strong>• ' . htmlspecialchars($operaio['nome'] . ' ' . $operaio['cognome']) . '</strong>';
                        
                        // Mostra formazioni dell'operaio con icone
                        $formazioni_icons = [];
                        if (!empty($operaio['formazione_antincendio_file'])) $formazioni_icons[] = '🔥';
                        if (!empty($operaio['formazione_primo_soccorso_file'])) $formazioni_icons[] = '🚑';
                        if (!empty($operaio['formazione_preposti_file'])) $formazioni_icons[] = '👮';
                        
                        if (!empty($formazioni_icons)) {
                            echo ' <span style="color: #28a745; font-weight: 700;">[' . implode('', $formazioni_icons) . ']</span>';
                        } else {
                            echo ' <span style="color: #dc3545; font-weight: 700;">[⚠️]</span>';
                        }
                        echo '</div>';
                    }
                    echo '</div>';
                } else {
                    echo '<div style="margin-top: 12px; padding: 10px; background: linear-gradient(135deg, #fff3cd 0%, #fff8e1 100%); border-radius: 6px; font-size: 12px; color: #856404; border-left: 4px solid #ffc107;">⚠️ Nessun operaio assegnato a questo cantiere</div>';
                }
                
                if ($azienda['note']) {
                    echo '<div style="margin-top: 10px; padding: 10px; background: rgba(0,123,255,0.08); border-radius: 6px; font-size: 12px; color: #004085; border-left: 3px solid #007bff;">💬 <strong>Note:</strong> ' . htmlspecialchars($azienda['note']) . '</div>';
                }
                echo '</div>';
                
                echo '</div>';
            }
            
            echo '</div>';
        } else {
            echo '<div style="text-align: center; padding: 30px; color: #6c757d; background: rgba(248,249,250,0.5); border-radius: 8px;">';
            echo '<p style="margin: 0 0 15px 0; font-size: 16px; font-weight: 600;">🏢 Nessuna azienda assegnata a questo cantiere</p>';
            echo '<button onclick="showAssignmentModal(' . $cantiere['id'] . ', \'' . esc_js($cantiere['nome']) . '\')" style="background: linear-gradient(135deg, #2196f3, #1976d2); color: white; border: none; padding: 12px 24px; border-radius: 6px; cursor: pointer; font-size: 15px; font-weight: 600; box-shadow: 0 2px 8px rgba(33,150,243,0.3); transition: all 0.3s ease;">➕ Assegna Aziende</button>';
            echo '</div>';
        }
        
        echo '</div>';
        echo '</div>';
    }
    
    echo '</div>';
} else {
    echo '<div style="background: linear-gradient(135deg, #f8f9fa 0%, #e9ecef 100%); padding: 30px; border-radius: 10px; text-align: center; color: #6c757d; box-shadow: 0 2px 10px rgba(0,0,0,0.08);">';
    echo '<p style="margin: 0 0 10px 0; font-size: 18px; font-weight: 700; color: #495057;">🏗️ Nessun cantiere disponibile per le assegnazioni</p>';
    echo '<p style="margin: 0; font-size: 15px; color: #6c757d;">Crea prima un cantiere nella sezione "Gestione Cantieri"</p>';
    echo '</div>';
}

echo '</div>'; // Fine tab assegnazioni

echo '</div>'; // Fine container principale

// ================== MODAL ASSEGNAZIONE (MODIFICATO) ==================
echo '<div id="assignment-modal" style="display: none; position: fixed; top: 0; left: 0; width: 100%; height: 100%; background: rgba(0,0,0,0.5); z-index: 9999;">';
echo '<div style="position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%); background: white; border-radius: 8px; width: 90%; max-width: 700px; max-height: 80%; overflow-y: auto;">';

// Header modal
echo '<div style="background: #2196f3; color: white; padding: 20px; border-radius: 8px 8px 0 0;">';
echo '<div style="display: flex; justify-content: space-between; align-items: center;">';
echo '<h4 style="margin: 0;">🔗 Gestisci Assegnazioni Cantiere</h4>';
echo '<button onclick="closeAssignmentModal()" style="background: transparent; color: white; border: none; font-size: 20px; cursor: pointer;">✕</button>';
echo '</div>';
echo '<p id="modal-cantiere-name" style="margin: 8px 0 0 0; opacity: 0.9;"></p>';
echo '</div>';

// Body modal
echo '<form method="post" id="assignment-form">';
echo '<div style="padding: 20px;">';

echo '<input type="hidden" name="cantiere_id" id="modal-cantiere-id">';
echo '<input type="hidden" name="cantiere_submit" value="1">';

// 🆕 NUOVA SEZIONE: Aziende già assegnate
echo '<div id="already-assigned-section" style="margin-bottom: 20px; padding: 15px; background: #e8f5e8; border-radius: 6px; border-left: 4px solid #28a745; display: none;">';
echo '<h5 style="margin: 0 0 10px 0; color: #155724;">✅ Aziende già assegnate al cantiere</h5>';
echo '<div id="already-assigned-list" style="display: grid; grid-template-columns: repeat(auto-fit, minmax(250px, 1fr)); gap: 10px;"></div>';
echo '</div>';

echo '<div style="margin-bottom: 15px;">';
echo '<label style="display: block; font-weight: bold; margin-bottom: 8px;">🏢 Seleziona Nuove Aziende da Assegnare:</label>';

// 🎯 FILTRO AZIENDE ABILITATE (AGGIORNATO)
echo '<div style="margin-bottom: 12px; padding: 8px; background: #e3f2fd; border-radius: 6px; border-left: 3px solid #2196f3;">';
echo '<label style="display: flex; align-items: center; cursor: pointer; font-size: 13px;">';
echo '<input type="checkbox" id="filter-solo-attive" onchange="toggleFiltroAttive()" style="margin-right: 8px;" checked>';
echo '<strong>🏗️ Mostra solo aziende abilitate al cantiere</strong>';
echo '</label>';
echo '<div style="font-size: 11px; color: #1565c0; margin-top: 3px; margin-left: 20px;">Le aziende attive sono sempre visualizzate per prime</div>';
echo '</div>';

// ================== NUOVA SEZIONE: FILTRI PER TIPOLOGIA AZIENDA ==================
echo '<div style="margin-bottom: 15px; padding: 12px; background: #fff3cd; border-radius: 6px; border-left: 3px solid #ffc107;">';
echo '<label style="display: block; font-weight: bold; margin-bottom: 8px; color: #856404;">🏢 Filtra per Tipologia Azienda</label>';
echo '<div style="display: grid; grid-template-columns: repeat(auto-fit, minmax(140px, 1fr)); gap: 8px;">';

$company_types = ['Lavoro', 'Subappalto', 'Nolo', 'Servizi', 'Forniture'];
foreach ($company_types as $tipo) {
    $tipo_id = 'filter-tipo-' . strtolower($tipo);
    echo '<label style="display: flex; align-items: center; cursor: pointer; font-size: 12px; padding: 4px 8px; background: rgba(255, 255, 255, 0.7); border-radius: 4px; transition: all 0.2s ease;">';
    echo '<input type="checkbox" id="' . $tipo_id . '" onchange="toggleFiltroTipologie()" style="margin-right: 6px;" checked>';
    echo '<span style="font-weight: 500;">📋 ' . $tipo . '</span>';
    echo '</label>';
}
echo '</div>';
echo '<div style="font-size: 11px; color: #856404; margin-top: 8px;">Deseleziona le tipologie che non vuoi visualizzare nella lista</div>';
echo '</div>';

// ================== NUOVA SEZIONE: RICERCA AZIENDE ==================
echo '<div style="margin-bottom: 15px; padding: 12px; background: #e8f5e8; border-radius: 6px; border-left: 3px solid #28a745;">';
echo '<label style="display: block; font-weight: bold; margin-bottom: 8px; color: #155724;">🔍 Cerca Aziende</label>';
echo '<div style="position: relative;">';
echo '<input type="text" id="search-assignments-input" placeholder="Cerca per Partita IVA, Email, Nome società o Tipologia..." style="width: 100%; padding: 10px 40px 10px 12px; border: 2px solid #c3e6cb; border-radius: 6px; font-size: 14px; background: white;" onkeyup="searchAssignments()" oninput="searchAssignments()">';
echo '<button type="button" onclick="clearAssignmentSearch()" id="clear-search-btn" style="position: absolute; right: 8px; top: 50%; transform: translateY(-50%); background: #dc3545; color: white; border: none; border-radius: 50%; width: 24px; height: 24px; cursor: pointer; font-size: 12px; display: none;">✕</button>';
echo '</div>';
echo '<div id="search-results-info" style="font-size: 12px; color: #666; margin-top: 5px; display: none;"></div>';
echo '</div>';

echo '<div style="background: #f8f9fa; padding: 10px; border-radius: 6px; max-height: 350px; overflow-y: auto;" id="aziende-selection-container">';

$aziende_albo = getAziendeAlboFornitori();

if (!empty($aziende_albo)) {
    foreach ($aziende_albo as $azienda) {
        $rag_soc = $azienda['rag_soc'] ?: $azienda['display_name'];
        $is_attiva = $azienda['abilita_cantiere'] == '1';
        $abilita_cantiere = $is_attiva ? 'Abilitato' : 'Non Abilitato';
        
        // Stili differenziati per attive/non attive
        $container_style = $is_attiva ? 
            'background: linear-gradient(135deg, #e8f5e8 0%, #f0fff0 100%); border: 1px solid #c3e6cb;' : 
            'background: #f8f9fa; border: 1px solid #e9ecef; opacity: 0.7;';
        
        $data_attributes = 'data-attiva="' . ($is_attiva ? '1' : '0') . '" data-user-id="' . $azienda['ID'] . '" data-tipo="' . ($azienda['tipo'] ?: 'N/A') . '"';
        
        echo '<label class="azienda-option" ' . $data_attributes . ' style="display: block; margin-bottom: 8px; cursor: pointer; padding: 10px; border-radius: 4px; ' . $container_style . ' transition: all 0.2s ease;">';
        echo '<div style="display: flex; align-items: center; justify-content: space-between;">';
        
        // Checkbox e nome
        echo '<div style="display: flex; align-items: center; flex: 1;">';
        echo '<input type="checkbox" name="user_ids[]" value="' . $azienda['ID'] . '" style="margin-right: 10px;">';
        echo '<div>';
        echo '<strong style="color: ' . ($is_attiva ? '#155724' : '#6c757d') . ';">' . htmlspecialchars($rag_soc) . '</strong>';
        echo '<div style="font-size: 11px; color: #666; margin-top: 2px;">';
        echo '📧 ' . $azienda['user_email'] . ' | 🏷️ ' . ($azienda['display_name'] ?: 'N/A') . ' | 📋 ' . ($azienda['tipo'] ?: 'N/A');
        echo '</div>';
        echo '</div>';
        echo '</div>';
        
        // Badge stato
        $badge_color = $is_attiva ? '#28a745' : '#6c757d';
        $badge_icon = $is_attiva ? '🏗️' : '🚫';
        echo '<span style="background: ' . $badge_color . '; color: white; padding: 3px 8px; border-radius: 12px; font-size: 10px; font-weight: bold; white-space: nowrap;">' . $badge_icon . ' ' . $abilita_cantiere . '</span>';
        
        echo '</div>';
        echo '</label>';
    }
} else {
    echo '<p style="color: #666; margin: 0; text-align: center; padding: 20px;">Nessuna azienda nell\'albo fornitori</p>';
}

echo '</div>';
echo '</div>';

echo '<div style="margin-bottom: 15px;">';
echo '<label style="display: block; font-weight: bold; margin-bottom: 5px;">📝 Note (opzionale):</label>';
echo '<textarea name="note_assegnazione" style="width: 100%; padding: 8px; border: 1px solid #ddd; border-radius: 4px;" rows="3" placeholder="Note per questa assegnazione..."></textarea>';
echo '</div>';

echo '<div style="text-align: right;">';
echo '<button type="button" onclick="closeAssignmentModal()" style="background: #6c757d; color: white; border: none; padding: 10px 16px; border-radius: 4px; cursor: pointer; margin-right: 10px;">Annulla</button>';
echo '<button type="submit" id="submit-assignments-btn" style="background: #28a745; color: white; border: none; padding: 10px 16px; border-radius: 4px; cursor: pointer;">🔗 Assegna Selezionate</button>';
echo '</div>';

echo '</div>';
echo '</form>';

echo '</div>';
echo '</div>';

// ================== MODAL DETTAGLI CANTIERE ==================
echo '<div id="cantiere-details-modal" style="display: none; position: fixed; top: 0; left: 0; width: 100%; height: 100%; background: rgba(0,0,0,0.5); z-index: 10000;">';
echo '<div style="position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%); background: white; border-radius: 8px; width: 95%; max-width: 900px; max-height: 90%; overflow-y: auto;">';

// Header modal dettagli
echo '<div id="cantiere-details-header" style="background: linear-gradient(135deg, #17a2b8, #138496); color: white; padding: 20px; border-radius: 8px 8px 0 0;">';
echo '<div style="display: flex; justify-content: space-between; align-items: center;">';
echo '<h4 style="margin: 0;">🏗️ Dettagli Cantiere</h4>';
echo '<button onclick="closeCantiereDetailsModal()" style="background: transparent; color: white; border: none; font-size: 20px; cursor: pointer;">✕</button>';
echo '</div>';
echo '<div id="cantiere-details-info" style="margin-top: 10px; opacity: 0.9;">Caricamento...</div>';
echo '</div>';

// Body modal dettagli
echo '<div id="cantiere-details-body" style="padding: 20px;">';
echo '<div id="cantiere-details-loading" style="text-align: center; padding: 40px; color: #666;">';
echo '<div style="font-size: 24px; margin-bottom: 10px;">⏳</div>';
echo '<div>Caricamento dettagli cantiere...</div>';
echo '</div>';
echo '<div id="cantiere-details-content" style="display: none;"></div>';
echo '</div>';

echo '</div>';
echo '</div>';

// ================== 🆕 MODAL MODIFICA CANTIERE ==================
echo '<div id="edit-cantiere-modal" style="display: none; position: fixed; top: 0; left: 0; width: 100%; height: 100%; background: rgba(0,0,0,0.5); z-index: 9998;">';
echo '<div style="position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%); background: white; border-radius: 8px; width: 90%; max-width: 600px; max-height: 80%; overflow-y: auto;">';

// Header modal modifica
echo '<div style="background: #fd7e14; color: white; padding: 20px; border-radius: 8px 8px 0 0;">';
echo '<div style="display: flex; justify-content: space-between; align-items: center;">';
echo '<h4 style="margin: 0;">✏️ Modifica Cantiere</h4>';
echo '<button onclick="closeEditCantiereModal()" style="background: transparent; color: white; border: none; font-size: 20px; cursor: pointer;">✕</button>';
echo '</div>';
echo '</div>';

// Body modal modifica
echo '<form method="post" action="?cantiere_action=edit" id="edit-cantiere-form">';
echo '<div style="padding: 20px;">';

echo '<input type="hidden" name="cantiere_id" id="edit-cantiere-id">';
echo '<input type="hidden" name="cantiere_submit" value="1">';

echo '<div style="margin-bottom: 15px;">';
echo '<label style="display: block; font-weight: bold; margin-bottom: 5px;">Nome Cantiere: *</label>';
echo '<input type="text" name="nome_cantiere" id="edit-nome-cantiere" required style="width: 100%; padding: 8px; border: 1px solid #ddd; border-radius: 4px;">';
echo '</div>';

echo '<div style="display: grid; grid-template-columns: 1fr 1fr; gap: 15px; margin-bottom: 15px;">';
echo '<div>';
echo '<label style="display: block; font-weight: bold; margin-bottom: 5px;">Data Inizio:</label>';
echo '<input type="date" name="data_inizio" id="edit-data-inizio" style="width: 100%; padding: 8px; border: 1px solid #ddd; border-radius: 4px;">';
echo '</div>';
echo '<div>';
echo '<label style="display: block; font-weight: bold; margin-bottom: 5px;">Data Fine:</label>';
echo '<input type="date" name="data_fine" id="edit-data-fine" style="width: 100%; padding: 8px; border: 1px solid #ddd; border-radius: 4px;">';
echo '</div>';
echo '</div>';

echo '<div style="margin-bottom: 15px;">';
echo '<label style="display: block; font-weight: bold; margin-bottom: 5px;">Stato:</label>';
echo '<select name="stato_cantiere" id="edit-stato-cantiere" style="width: 100%; padding: 8px; border: 1px solid #ddd; border-radius: 4px;">';
echo '<option value="attivo">🟢 Attivo</option>';
echo '<option value="sospeso">🟡 Sospeso</option>';
echo '<option value="completato">⚫ Completato</option>';
echo '</select>';
echo '</div>';

echo '<div style="margin-bottom: 15px;">';
echo '<label style="display: block; font-weight: bold; margin-bottom: 5px;">Descrizione:</label>';
echo '<textarea name="descrizione_cantiere" id="edit-descrizione-cantiere" style="width: 100%; padding: 8px; border: 1px solid #ddd; border-radius: 4px;" rows="3"></textarea>';
echo '</div>';

echo '<div style="text-align: right;">';
echo '<button type="button" onclick="closeEditCantiereModal()" style="background: #6c757d; color: white; border: none; padding: 10px 16px; border-radius: 4px; cursor: pointer; margin-right: 10px;">Annulla</button>';
echo '<button type="submit" style="background: #fd7e14; color: white; border: none; padding: 10px 16px; border-radius: 4px; cursor: pointer;">✏️ Salva Modifiche</button>';
echo '</div>';

echo '</div>';
echo '</form>';

echo '</div>';
echo '</div>';

// ================== 🆕 MODAL CANCELLAZIONE CANTIERE ==================
echo '<div id="delete-cantiere-modal" style="display: none; position: fixed; top: 0; left: 0; width: 100%; height: 100%; background: rgba(0,0,0,0.5); z-index: 9997;">';
echo '<div style="position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%); background: white; border-radius: 8px; width: 90%; max-width: 500px;">';

// Header modal cancellazione
echo '<div style="background: #dc3545; color: white; padding: 20px; border-radius: 8px 8px 0 0;">';
echo '<div style="display: flex; justify-content: space-between; align-items: center;">';
echo '<h4 style="margin: 0;">🗑️ Cancella Cantiere</h4>';
echo '<button onclick="closeDeleteCantiereModal()" style="background: transparent; color: white; border: none; font-size: 20px; cursor: pointer;">✕</button>';
echo '</div>';
echo '</div>';

// Body modal cancellazione
echo '<form method="post" action="?cantiere_action=delete" id="delete-cantiere-form">';
echo '<div style="padding: 20px;">';

echo '<input type="hidden" name="cantiere_id" id="delete-cantiere-id">';
echo '<input type="hidden" name="cantiere_submit" value="1">';

echo '<div style="background: #fff3cd; color: #856404; padding: 15px; border-radius: 6px; margin-bottom: 20px; border-left: 4px solid #ffc107;">';
echo '<h5 style="margin: 0 0 10px 0;">⚠️ Attenzione!</h5>';
echo '<p style="margin: 0; font-size: 14px;">Stai per cancellare definitivamente il cantiere <strong id="delete-cantiere-nome"></strong>.</p>';
echo '<p style="margin: 10px 0 0 0; font-size: 13px;">Questa azione cancellerà anche:</p>';
echo '<ul style="margin: 5px 0 0 20px; font-size: 13px;">';
echo '<li>Tutte le assegnazioni aziende</li>';
echo '<li>Tutte le assegnazioni operai</li>';
echo '<li>Tutti i file POS caricati</li>';
echo '</ul>';
echo '</div>';

echo '<div style="margin-bottom: 20px;">';
echo '<label style="display: block; font-weight: bold; margin-bottom: 5px; color: #dc3545;">Per confermare, scrivi: <code>CANCELLA</code></label>';
echo '<input type="text" name="conferma_cancellazione" placeholder="Scrivi CANCELLA per confermare" style="width: 100%; padding: 8px; border: 2px solid #dc3545; border-radius: 4px; font-family: monospace;" required>';
echo '<small style="color: #666; margin-top: 5px; display: block;">La parola deve essere scritta esattamente come mostrato (tutto maiuscolo)</small>';
echo '</div>';

echo '<div style="text-align: right;">';
echo '<button type="button" onclick="closeDeleteCantiereModal()" style="background: #6c757d; color: white; border: none; padding: 10px 16px; border-radius: 4px; cursor: pointer; margin-right: 10px;">Annulla</button>';
echo '<button type="submit" style="background: #dc3545; color: white; border: none; padding: 10px 16px; border-radius: 4px; cursor: pointer;">🗑️ Cancella Definitivamente</button>';
echo '</div>';

echo '</div>';
echo '</form>';

echo '</div>';
echo '</div>';

// ================== MODAL RICHIESTE DOCUMENTI ==================

echo '<div id="document-request-modal" style="display: none; position: fixed; top: 0; left: 0; width: 100%; height: 100%; background: rgba(0,0,0,0.5); z-index: 10001;">';
echo '<div style="position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%); background: white; border-radius: 8px; width: 90%; max-width: 500px;">';

// Header modal richieste
echo '<div style="background: linear-gradient(135deg, #17a2b8, #138496); color: white; padding: 20px; border-radius: 8px 8px 0 0;">';
echo '<div style="display: flex; justify-content: space-between; align-items: center;">';
echo '<h4 style="margin: 0;">📄 Richiesta Documenti</h4>';
echo '<button onclick="closeDocumentRequestModal()" style="background: transparent; color: white; border: none; font-size: 20px; cursor: pointer;">✕</button>';
echo '</div>';
echo '<p style="margin: 8px 0 0 0; opacity: 0.9;">Azienda: <span id="document-azienda-name"></span></p>';
echo '</div>';

// Body modal richieste
echo '<form id="document-request-form" method="POST" style="padding: 20px;">';
echo '<input type="hidden" id="document-user-id" name="user_id" value="">';
echo '<input type="hidden" name="document_action" value="request_documents">';

echo '<div style="margin-bottom: 15px;">';
echo '<label style="display: block; font-weight: bold; margin-bottom: 8px;">📝 Descrizione richiesta:</label>';
echo '<textarea id="document-richiesta-note" name="richiesta_note" rows="4" style="width: 100%; padding: 10px; border: 1px solid #ddd; border-radius: 4px; font-family: inherit; resize: vertical;" placeholder="Inserisci i dettagli della richiesta documenti..."></textarea>';
echo '</div>';

echo '<div style="background: #f8f9fa; padding: 15px; border-radius: 4px; margin-bottom: 20px; border-left: 4px solid #17a2b8;">';
echo '<div style="font-size: 12px; color: #6c757d;">';
echo '<strong>📧 Nota:</strong> La richiesta verrà inviata via email all\'azienda insieme alle informazioni di accesso al pannello.<br>';
echo '<strong>📋 Esempio:</strong> "Si richiede l\'aggiornamento del DVR e dei certificati di formazione antincendio per tutto il personale."';
echo '</div>';
echo '</div>';

echo '<div style="display: flex; gap: 10px; justify-content: flex-end;">';
echo '<button type="button" onclick="closeDocumentRequestModal()" style="background: #6c757d; color: white; border: none; padding: 10px 20px; border-radius: 4px; cursor: pointer;">Annulla</button>';
echo '<button type="button" onclick="submitDocumentRequest()" style="background: #17a2b8; color: white; border: none; padding: 10px 20px; border-radius: 4px; cursor: pointer;">📤 Invia Richiesta</button>';
echo '</div>';

echo '</form>';
echo '</div>';
echo '</div>';

// ================== JAVASCRIPT ESTESO ==================
?>
<!-- PDF Export Libraries -->
<script src="https://cdnjs.cloudflare.com/ajax/libs/jspdf/2.5.1/jspdf.umd.min.js" integrity="sha512-qZvrmS2ekKPF2mSznTQsxqPgnpkI4DNTlrdUmTzrDgektczlKNRRhy5X5AAOnx5S09ydFYWWNSfcEqDTTHgtNA==" crossorigin="anonymous" referrerpolicy="no-referrer"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/html2canvas/1.4.1/html2canvas.min.js" integrity="sha512-BNaRQnYJYiPSqHHDb58B0yaPfCu+Wgds8Gp/gU33kqBtgNS4tSPHuGibyoeqMV/TJlSKda6FXzoEyYGjTe+vXA==" crossorigin="anonymous" referrerpolicy="no-referrer"></script>
<script>
// TAB MANAGEMENT
function showTab(tabName) {
    // Nascondi tutti i contenuti
    const contents = document.querySelectorAll('.tab-content');
    contents.forEach(content => content.style.display = 'none');
    
    // Rimuovi classe active da tutti i tab
    const buttons = document.querySelectorAll('.tab-button');
    buttons.forEach(button => {
        button.style.background = '#6c757d';
        button.classList.remove('active');
    });
    
    // Mostra contenuto selezionato
    document.getElementById('content-' + tabName).style.display = 'block';
    
    // Attiva tab button
    const activeButton = document.getElementById('tab-' + tabName);
    activeButton.style.background = '#0066a2';
    activeButton.classList.add('active');
}

// ================== 🆕 MODAL GESTIONE CANTIERI ==================

function showEditCantiereModal(cantiereId) {
    // Cerca i dati del cantiere nei dati PHP già disponibili
    const cantieri = <?php echo json_encode(getAllCantieri()); ?>;
    const cantiere = cantieri.find(c => c.id == cantiereId);
    
    if (!cantiere) {
        alert('Errore: Cantiere non trovato');
        return;
    }
    
    // Popola il form di modifica
    document.getElementById('edit-cantiere-id').value = cantiere.id;
    document.getElementById('edit-nome-cantiere').value = cantiere.nome;
    document.getElementById('edit-data-inizio').value = cantiere.data_inizio || '';
    document.getElementById('edit-data-fine').value = cantiere.data_fine || '';
    document.getElementById('edit-stato-cantiere').value = cantiere.stato;
    document.getElementById('edit-descrizione-cantiere').value = cantiere.descrizione || '';
    
    // Mostra il modal
    document.getElementById('edit-cantiere-modal').style.display = 'block';
    
    console.log('📝 Apertura modal modifica cantiere:', cantiere.nome);
}

function closeEditCantiereModal() {
    document.getElementById('edit-cantiere-modal').style.display = 'none';
}

function showDeleteCantiereModal(cantiereId, cantiereNome) {
    // Popola il modal di cancellazione
    document.getElementById('delete-cantiere-id').value = cantiereId;
    document.getElementById('delete-cantiere-nome').textContent = cantiereNome;
    
    // Reset campo conferma
    document.querySelector('input[name="conferma_cancellazione"]').value = '';
    
    // Mostra il modal
    document.getElementById('delete-cantiere-modal').style.display = 'block';
    
    console.log('🗑️ Apertura modal cancellazione cantiere:', cantiereNome);
}

function closeDeleteCantiereModal() {
    document.getElementById('delete-cantiere-modal').style.display = 'none';
}

// Event listeners per chiudere modal con click esterno
document.getElementById('edit-cantiere-modal').addEventListener('click', function(e) {
    if (e.target === this) {
        closeEditCantiereModal();
    }
});

document.getElementById('delete-cantiere-modal').addEventListener('click', function(e) {
    if (e.target === this) {
        closeDeleteCantiereModal();
    }
});

// ================== MODAL ASSIGNMENT MIGLIORATO ==================

function showAssignmentModal(cantiereId, cantiereNome) {
    document.getElementById('modal-cantiere-id').value = cantiereId;
    document.getElementById('modal-cantiere-name').textContent = '🏗️ ' + cantiereNome;
    document.getElementById('assignment-form').action = '?cantiere_action=assign';
    
    // Reset checkboxes
    const checkboxes = document.querySelectorAll('input[name="user_ids[]"]');
    checkboxes.forEach(cb => cb.checked = false);
    
    // 🆕 NUOVO: Carica e mostra aziende già assegnate
    loadAssignedCompanies(cantiereId);
    
    // Reset filtro aziende attive
    document.getElementById('filter-solo-attive').checked = true;
    toggleFiltroAttive();
    
    document.getElementById('assignment-modal').style.display = 'block';
    
    console.log('🔗 Apertura modal assegnazioni per cantiere:', cantiereNome);
}

// 🆕 NUOVA FUNZIONE: Carica aziende già assegnate
function loadAssignedCompanies(cantiereId) {
    // Ottieni le aziende assegnate dai dati PHP
    const allCantieri = <?php 
        $cantieri_with_assignments = [];
        foreach (getAllCantieri() as $c) {
            $aziende = getAziendeAssegnateCantiare($c['id']);
            $cantieri_with_assignments[$c['id']] = $aziende;
        }
        echo json_encode($cantieri_with_assignments);
    ?>;
    
    const aziendeAssegnate = allCantieri[cantiereId] || [];
    const assignedSection = document.getElementById('already-assigned-section');
    const assignedList = document.getElementById('already-assigned-list');
    
    if (aziendeAssegnate.length > 0) {
        // Mostra la sezione
        assignedSection.style.display = 'block';
        
        // Popola la lista
        assignedList.innerHTML = '';
        aziendeAssegnate.forEach(azienda => {
            const aziendaCard = document.createElement('div');
            aziendaCard.style.cssText = 'background: white; border: 1px solid #c3e6cb; border-radius: 4px; padding: 10px; position: relative;';
            
            aziendaCard.innerHTML = `
                <div style="display: flex; justify-content: space-between; align-items: center;">
                    <div>
                        <strong style="color: #155724; font-size: 12px;">${azienda.rag_soc || azienda.display_name}</strong>
                        <div style="font-size: 10px; color: #666; margin-top: 2px;">
                            📧 ${azienda.user_email}<br>
                            📅 ${new Date(azienda.data_assegnazione).toLocaleDateString('it-IT')}
                        </div>
                    </div>
                    <button onclick="removeAssignment(${cantiereId}, ${azienda.ID}, '${azienda.rag_soc || azienda.display_name}')" 
                            style="background: #dc3545; color: white; border: none; width: 20px; height: 20px; border-radius: 50%; cursor: pointer; font-size: 10px;" 
                            title="Rimuovi assegnazione">✕</button>
                </div>
            `;
            
            assignedList.appendChild(aziendaCard);
        });
        
        // Nascondi le aziende già assegnate dalla lista di selezione
        hideAlreadyAssignedCompanies(aziendeAssegnate);
        
    } else {
        // Nascondi la sezione se non ci sono aziende assegnate
        assignedSection.style.display = 'none';
    }
}

// 🆕 NUOVA FUNZIONE: Nascondi aziende già assegnate
function hideAlreadyAssignedCompanies(aziendeAssegnate) {
    const assignedUserIds = aziendeAssegnate.map(a => a.ID.toString());
    
    document.querySelectorAll('.azienda-option').forEach(option => {
        const userId = option.getAttribute('data-user-id');
        const checkbox = option.querySelector('input[type="checkbox"]');
        
        if (assignedUserIds.includes(userId)) {
            option.style.display = 'none';
            if (checkbox) checkbox.checked = false;
        } else {
            // Mantieni la logica del filtro attive/non attive
            const isAttiva = option.getAttribute('data-attiva') === '1';
            const soloAttive = document.getElementById('filter-solo-attive').checked;
            
            if (soloAttive && !isAttiva) {
                option.style.display = 'none';
            } else {
                option.style.display = 'block';
            }
        }
    });
}

// 🆕 CORREZIONE: Funzione removeAssignment() fixed
function removeAssignment(cantiereId, userId, aziendaNome) {
    if (!confirm(`Confermi la rimozione dell'assegnazione per "${aziendaNome}"?\n\nVerranno rimossi anche eventuali operai assegnati e file POS.`)) {
        return;
    }
    
    console.log('🗑️ Rimozione assegnazione:', { cantiereId, userId, aziendaNome });
    
    // Ottieni l'URL corrente e costruisci l'action corretto
    const currentUrl = window.location.href.split('?')[0]; // Base URL senza parametri
    const actionUrl = currentUrl + '?cantiere_action=unassign';
    
    console.log('📡 Action URL:', actionUrl);
    
    // Crea un form temporaneo per la rimozione
    const form = document.createElement('form');
    form.method = 'POST';
    form.action = actionUrl;
    form.style.display = 'none';
    
    // Crea i campi hidden
    const cantiereInput = document.createElement('input');
    cantiereInput.type = 'hidden';
    cantiereInput.name = 'cantiere_id';
    cantiereInput.value = cantiereId;
    
    const userInput = document.createElement('input');
    userInput.type = 'hidden';
    userInput.name = 'user_id';
    userInput.value = userId;
    
    const submitInput = document.createElement('input');
    submitInput.type = 'hidden';
    submitInput.name = 'cantiere_submit';
    submitInput.value = '1';
    
    // Aggiungi i campi al form
    form.appendChild(cantiereInput);
    form.appendChild(userInput);
    form.appendChild(submitInput);
    
    // Debug: verifica il form creato
    console.log('🔧 Form creato:', {
        action: form.action,
        method: form.method,
        cantiere_id: cantiereInput.value,
        user_id: userInput.value,
        cantiere_submit: submitInput.value
    });
    
    // Aggiungi al DOM e invia
    document.body.appendChild(form);
    
    // Piccolo delay per assicurarsi che tutto sia pronto
    setTimeout(() => {
        console.log('📤 Invio form rimozione...');
        form.submit();
    }, 100);
}

// 🚀 FUNZIONE MIGLIORATA: Toggle filtro aziende abilitate
function toggleFiltroAttive() {
    const checkbox = document.getElementById('filter-solo-attive');
    const soloAttive = checkbox.checked;
    const aziendeOptions = document.querySelectorAll('.azienda-option');
    
    console.log('🔍 Filtro attive:', soloAttive ? 'ATTIVO' : 'DISATTIVO');
    
    let visibili = 0;
    let nascoste = 0;
    
    // Prima verifica quali aziende sono già assegnate (sempre nascoste)
    const cantiereId = document.getElementById('modal-cantiere-id').value;
    const allCantieri = <?php 
        $cantieri_with_assignments = [];
        foreach (getAllCantieri() as $c) {
            $aziende = getAziendeAssegnateCantiare($c['id']);
            $cantieri_with_assignments[$c['id']] = $aziende;
        }
        echo json_encode($cantieri_with_assignments);
    ?>;
    
    const aziendeAssegnate = allCantieri[cantiereId] || [];
    const assignedUserIds = aziendeAssegnate.map(a => a.ID.toString());
    
    aziendeOptions.forEach(function(option) {
        const isAttiva = option.getAttribute('data-attiva') === '1';
        const userId = option.getAttribute('data-user-id');
        const checkbox = option.querySelector('input[type="checkbox"]');
        
        // Se è già assegnata, sempre nascosta
        if (assignedUserIds.includes(userId)) {
            option.style.display = 'none';
            if (checkbox) checkbox.checked = false;
            nascoste++;
            return;
        }
        
        if (soloAttive) {
            // Mostra solo le aziende abilitate
            if (isAttiva) {
                option.style.display = 'block';
                visibili++;
            } else {
                option.style.display = 'none';
                nascoste++;
                // Deseleziona se era selezionata
                if (checkbox) checkbox.checked = false;
            }
        } else {
            // Mostra tutte le aziende (tranne quelle già assegnate)
            option.style.display = 'block';
            visibili++;
        }
    });
    
    console.log('📊 Risultato filtro - Visibili:', visibili, 'Nascoste:', nascoste);
    
    // Aggiorna il testo informativo
    const container = document.getElementById('aziende-selection-container');
    let infoDiv = container.querySelector('.filtro-info');
    
    if (!infoDiv) {
        infoDiv = document.createElement('div');
        infoDiv.className = 'filtro-info';
        infoDiv.style.cssText = 'background: #e7f3ff; padding: 8px; margin-bottom: 10px; border-radius: 4px; font-size: 11px; color: #0c5460; border-left: 3px solid #bee5eb;';
        container.insertBefore(infoDiv, container.firstChild);
    }
    
    const aziendeGiaAssegnate = assignedUserIds.length;
    const nascostePerFiltro = nascoste - aziendeGiaAssegnate;
    
    if (aziendeGiaAssegnate > 0) {
        infoDiv.innerHTML = `🔍 <strong>Filtro attivo:</strong> ${aziendeGiaAssegnate} aziende già assegnate (nascoste), ${visibili} disponibili`;
        if (soloAttive && nascostePerFiltro > 0) {
            infoDiv.innerHTML += `, ${nascostePerFiltro} non abilitate nascoste`;
        }
        infoDiv.style.display = 'block';
    } else if (soloAttive && nascoste > 0) {
        infoDiv.innerHTML = `🔍 <strong>Filtro attivo:</strong> Visualizzate ${visibili} aziende abilitate (${nascoste} non abilitate nascoste)`;
        infoDiv.style.display = 'block';
    } else if (!soloAttive) {
        infoDiv.innerHTML = `👁️ <strong>Mostra tutte:</strong> Visualizzate ${visibili} aziende disponibili`;
        infoDiv.style.display = 'block';
    } else {
        infoDiv.style.display = 'none';
    }
    
    // Aggiorna il contatore del pulsante submit
    updateSubmitButtonCounter();
}

// ================== NUOVA FUNZIONE: FILTRO PER TIPOLOGIA AZIENDA ==================

// Funzione per il filtro tipologie azienda
function toggleFiltroTipologie() {
    // Applica tutti i filtri insieme
    applyAllFilters();
}

// Funzione unificata per applicare tutti i filtri
function applyAllFilters() {
    const soloAttive = document.getElementById('filter-solo-attive').checked;
    const aziendeOptions = document.querySelectorAll('.azienda-option');
    
    // Get selected company types
    const selectedTypes = [];
    const typeCheckboxes = document.querySelectorAll('[id^="filter-tipo-"]');
    typeCheckboxes.forEach(checkbox => {
        if (checkbox.checked) {
            const tipo = checkbox.id.replace('filter-tipo-', '');
            selectedTypes.push(tipo.charAt(0).toUpperCase() + tipo.slice(1)); // Capitalize first letter
        }
    });
    
    console.log('🏢 Filtro tipologie attive:', selectedTypes);
    console.log('🔍 Filtro abilitate:', soloAttive ? 'ATTIVO' : 'DISATTIVO');
    
    let visibili = 0;
    let nascoste = 0;
    let nascostePerTipologia = 0;
    
    // Get assigned companies (always hide)
    const cantiereId = document.getElementById('modal-cantiere-id').value;
    const allCantieri = <?php 
        $cantieri_with_assignments = [];
        foreach (getAllCantieri() as $c) {
            $aziende = getAziendeAssegnateCantiare($c['id']);
            $cantieri_with_assignments[$c['id']] = $aziende;
        }
        echo json_encode($cantieri_with_assignments);
    ?>;
    
    const aziendeAssegnate = allCantieri[cantiereId] || [];
    const assignedUserIds = aziendeAssegnate.map(a => a.ID.toString());
    
    aziendeOptions.forEach(function(option) {
        const isAttiva = option.getAttribute('data-attiva') === '1';
        const userId = option.getAttribute('data-user-id');
        const companyType = option.getAttribute('data-tipo') || 'N/A';
        const checkbox = option.querySelector('input[type="checkbox"]');
        
        // If already assigned, always hide
        if (assignedUserIds.includes(userId)) {
            option.style.display = 'none';
            if (checkbox) checkbox.checked = false;
            nascoste++;
            return;
        }
        
        // Apply enabled filter
        if (soloAttive && !isAttiva) {
            option.style.display = 'none';
            nascoste++;
            if (checkbox) checkbox.checked = false;
            return;
        }
        
        // Apply company type filter
        if (selectedTypes.length > 0 && !selectedTypes.includes(companyType)) {
            option.style.display = 'none';
            nascostePerTipologia++;
            if (checkbox) checkbox.checked = false;
            return;
        }
        
        // Show if passes all filters
        option.style.display = 'block';
        visibili++;
    });
    
    console.log('📊 Risultato filtri - Visibili:', visibili, 'Nascoste:', nascoste, 'Per tipologia:', nascostePerTipologia);
    
    // Update info display
    updateFilterInfo(visibili, nascoste, nascostePerTipologia, assignedUserIds.length, soloAttive, selectedTypes);
    
    // Update submit button
    updateSubmitButtonCounter();
}

// Update filter information display
function updateFilterInfo(visibili, nascoste, nascostePerTipologia, aziendeGiaAssegnate, soloAttive, selectedTypes) {
    const container = document.getElementById('aziende-selection-container');
    let infoDiv = container.querySelector('.filtro-info');
    
    if (!infoDiv) {
        infoDiv = document.createElement('div');
        infoDiv.className = 'filtro-info';
        infoDiv.style.cssText = 'background: #e7f3ff; padding: 8px; margin-bottom: 10px; border-radius: 4px; font-size: 11px; color: #0c5460; border-left: 3px solid #bee5eb;';
        container.insertBefore(infoDiv, container.firstChild);
    }
    
    let infoText = `🔍 <strong>Filtri attivi:</strong> `;
    
    if (aziendeGiaAssegnate > 0) {
        infoText += `${aziendeGiaAssegnate} già assegnate (nascoste), `;
    }
    
    infoText += `${visibili} disponibili`;
    
    if (soloAttive) {
        const nascostePerAbilitazione = nascoste - aziendeGiaAssegnate - nascostePerTipologia;
        if (nascostePerAbilitazione > 0) {
            infoText += `, ${nascostePerAbilitazione} non abilitate`;
        }
    }
    
    if (nascostePerTipologia > 0) {
        infoText += `, ${nascostePerTipologia} per tipologia`;
    }
    
    if (selectedTypes.length > 0 && selectedTypes.length < 5) {
        infoText += ` | Tipologie: ${selectedTypes.join(', ')}`;
    }
    
    infoDiv.innerHTML = infoText;
    infoDiv.style.display = 'block';
}

// Update the original toggleFiltroAttive to use unified filtering
function toggleFiltroAttive() {
    applyAllFilters();
}

// ================== NUOVE FUNZIONI: RICERCA ASSEGNAZIONI ==================

// Funzione principale per la ricerca delle assegnazioni (AGGIORNATA per tipologie)
function searchAssignments() {
    const searchInput = document.getElementById('search-assignments-input');
    const clearBtn = document.getElementById('clear-search-btn');
    const resultsInfo = document.getElementById('search-results-info');
    const aziendeOptions = document.querySelectorAll('.azienda-option');
    
    const searchTerm = searchInput.value.toLowerCase().trim();
    
    // Mostra/nascondi pulsante clear
    if (searchTerm.length > 0) {
        clearBtn.style.display = 'block';
    } else {
        clearBtn.style.display = 'none';
        resultsInfo.style.display = 'none';
    }
    
    let visibleCount = 0;
    let totalCount = 0;
    let matchingCount = 0;
    
    // Get all active filters
    const soloAttive = document.getElementById('filter-solo-attive').checked;
    const selectedTypes = [];
    const typeCheckboxes = document.querySelectorAll('[id^="filter-tipo-"]');
    typeCheckboxes.forEach(checkbox => {
        if (checkbox.checked) {
            const tipo = checkbox.id.replace('filter-tipo-', '');
            selectedTypes.push(tipo.charAt(0).toUpperCase() + tipo.slice(1));
        }
    });
    
    const cantiereId = document.getElementById('modal-cantiere-id').value;
    const allCantieri = <?php 
        $cantieri_with_assignments = [];
        foreach (getAllCantieri() as $c) {
            $aziende = getAziendeAssegnateCantiare($c['id']);
            $cantieri_with_assignments[$c['id']] = $aziende;
        }
        echo json_encode($cantieri_with_assignments);
    ?>;
    
    const aziendeAssegnate = allCantieri[cantiereId] || [];
    const assignedUserIds = aziendeAssegnate.map(a => a.ID.toString());
    
    aziendeOptions.forEach(function(option) {
        const userId = option.getAttribute('data-user-id');
        const isAttiva = option.getAttribute('data-attiva') === '1';
        const companyType = option.getAttribute('data-tipo') || 'N/A';
        const checkbox = option.querySelector('input[type="checkbox"]');
        
        totalCount++;
        
        // If already assigned, always hide
        if (assignedUserIds.includes(userId)) {
            option.style.display = 'none';
            if (checkbox) checkbox.checked = false;
            return;
        }
        
        // Apply enabled filter
        if (soloAttive && !isAttiva) {
            option.style.display = 'none';
            if (checkbox) checkbox.checked = false;
            return;
        }
        
        // Apply company type filter
        if (selectedTypes.length > 0 && !selectedTypes.includes(companyType)) {
            option.style.display = 'none';
            if (checkbox) checkbox.checked = false;
            return;
        }
        
        // If no search term, show all (that pass base filters)
        if (searchTerm.length === 0) {
            option.style.display = 'block';
            visibleCount++;
            return;
        }
        
        // Extract company data for search
        const labelElement = option.querySelector('strong');
        const emailElement = option.querySelector('div[style*="font-size: 11px"]');
        
        const companyName = labelElement ? labelElement.textContent.toLowerCase() : '';
        const emailText = emailElement ? emailElement.textContent.toLowerCase() : '';
        
        // Extract email, P.IVA, and company type from text
        const emailMatch = emailText.match(/📧\s*([^\s|]+)/);
        const pivaMatch = emailText.match(/🏷️\s*([^\s|]+)/);
        const tipoMatch = emailText.match(/📋\s*([^\s|]+)/);
        
        const email = emailMatch ? emailMatch[1] : '';
        const piva = pivaMatch ? pivaMatch[1] : '';
        const tipo = tipoMatch ? tipoMatch[1] : companyType.toLowerCase();
        
        // Check if search term matches any field
        const matchesCompanyName = companyName.includes(searchTerm);
        const matchesEmail = email.includes(searchTerm);
        const matchesPiva = piva.includes(searchTerm);
        const matchesCompanyType = tipo.includes(searchTerm);
        
        if (matchesCompanyName || matchesEmail || matchesPiva || matchesCompanyType) {
            option.style.display = 'block';
            visibleCount++;
            matchingCount++;
        } else {
            option.style.display = 'none';
            if (checkbox) checkbox.checked = false;
        }
    });
    
    // Show search results info
    if (searchTerm.length > 0) {
        resultsInfo.style.display = 'block';
        if (matchingCount === 0) {
            resultsInfo.innerHTML = `🔍 <strong>Nessun risultato</strong> per "${searchTerm}"`;
            resultsInfo.style.color = '#dc3545';
        } else {
            resultsInfo.innerHTML = `🔍 Trovate <strong>${matchingCount} aziende</strong> per "${searchTerm}"`;
            resultsInfo.style.color = '#28a745';
        }
    }
    
    // Update submit button
    updateSubmitButtonCounter();
    
    console.log('🔍 Ricerca eseguita:', {
        searchTerm: searchTerm,
        totalCount: totalCount,
        visibleCount: visibleCount,
        matchingCount: matchingCount,
        selectedTypes: selectedTypes
    });
}

// Pulisce la ricerca e ripristina la vista normale
function clearAssignmentSearch() {
    const searchInput = document.getElementById('search-assignments-input');
    const clearBtn = document.getElementById('clear-search-btn');
    const resultsInfo = document.getElementById('search-results-info');
    
    searchInput.value = '';
    clearBtn.style.display = 'none';
    resultsInfo.style.display = 'none';
    
    // Riapplica solo i filtri base (senza ricerca)
    applyAllFilters();
    
    // Focus sul campo di ricerca per comodità dell'utente
    searchInput.focus();
    
    console.log('🧹 Ricerca pulita');
}

// Aggiorna contatore pulsante submit
function updateSubmitButtonCounter() {
    const selectedCheckboxes = document.querySelectorAll('input[name="user_ids[]"]:checked');
    const submitButton = document.getElementById('submit-assignments-btn');
    
    if (selectedCheckboxes.length > 0) {
        submitButton.textContent = `🔗 Assegna ${selectedCheckboxes.length} Nuove Aziende`;
        submitButton.style.background = '#28a745';
    } else {
        submitButton.textContent = '🔗 Assegna Selezionate';
        submitButton.style.background = '#6c757d';
    }
}

// 🆕 NUOVA FUNZIONE: Chiudi modal assegnazioni
function closeAssignmentModal() {
    document.getElementById('assignment-modal').style.display = 'none';
    
    // Reset form
    const form = document.getElementById('assignment-form');
    if (form) {
        form.reset();
    }
    
    // Reset checkboxes
    const checkboxes = document.querySelectorAll('input[name="user_ids[]"]');
    checkboxes.forEach(cb => cb.checked = false);
    
    // Reset search functionality
    const searchInput = document.getElementById('search-assignments-input');
    const clearBtn = document.getElementById('clear-search-btn');
    const resultsInfo = document.getElementById('search-results-info');
    
    if (searchInput) searchInput.value = '';
    if (clearBtn) clearBtn.style.display = 'none';
    if (resultsInfo) resultsInfo.style.display = 'none';
    
    // Reset submit button
    updateSubmitButtonCounter();
    
    console.log('✕ Modal assegnazioni chiuso');
}

// FILTRO ASSEGNAZIONI
function filterAssignments() {
    const selectedCantiereId = document.getElementById('cantiere-filter').value;
    const assignmentGroups = document.querySelectorAll('.assignment-group');
    
    assignmentGroups.forEach(group => {
        const cantiereId = group.getAttribute('data-cantiere-id');
        
        if (!selectedCantiereId || cantiereId === selectedCantiereId) {
            group.style.display = 'block';
        } else {
            group.style.display = 'none';
        }
    });
}

// DETTAGLI CANTIERE
function viewCantiereDetails(cantiereId) {
    // Mostra loading
    showCantiereDetailsModal(cantiereId);
    
    // Chiama il vero endpoint AJAX
    loadCantiereDetailsData(cantiereId);
}

// 🚀 FUNZIONI: Gestione modal dettagli cantiere
function showCantiereDetailsModal(cantiereId) {
    document.getElementById('cantiere-details-modal').style.display = 'block';
    document.getElementById('cantiere-details-loading').style.display = 'block';
    document.getElementById('cantiere-details-content').style.display = 'none';
    
    // Reset header
    document.getElementById('cantiere-details-info').textContent = 'Caricamento...';
}

function closeCantiereDetailsModal() {
    document.getElementById('cantiere-details-modal').style.display = 'none';
}

// 🆕 NUOVA FUNZIONE: Mostra dettagli stato richiesta HSE
function showStatusDetails(richiestaId, aziendaNome) {
    // Crea o mostra un modal con i dettagli dello stato
    let modal = document.getElementById('status-details-modal');
    if (!modal) {
        modal = document.createElement('div');
        modal.id = 'status-details-modal';
        modal.style.cssText = 'display: none; position: fixed; top: 0; left: 0; width: 100%; height: 100%; background: rgba(0,0,0,0.5); z-index: 9999;';
        
        modal.innerHTML = `
            <div class="assignments-summary-style" style="position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%); width: 90%; max-width: 600px; max-height: 80%; overflow-y: auto; margin-bottom: 0;">
                <div class="summary-header" style="border-radius: 8px 8px 0 0;">
                    <div style="display: flex; justify-content: space-between; align-items: center;">
                        <h4 class="summary-title">📊 Dettaglio Stato Richiesta HSE</h4>
                        <button onclick="closeStatusDetailsModal()" style="background: transparent; color: white; border: none; font-size: 20px; cursor: pointer;">✕</button>
                    </div>
                    <p id="status-azienda-name" class="summary-description"></p>
                </div>
                <div id="status-details-content" class="summary-body">
                    <div style="text-align: center; padding: 20px;">
                        <div style="font-size: 16px;">🔄 Caricamento dettagli...</div>
                    </div>
                </div>
            </div>
        `;
        
        document.body.appendChild(modal);
        
        // Aggiungi event listener per chiudere cliccando fuori
        modal.addEventListener('click', function(e) {
            if (e.target === this) {
                closeStatusDetailsModal();
            }
        });
    }
    
    document.getElementById('status-azienda-name').textContent = '🏢 ' + aziendaNome;
    document.getElementById('status-details-modal').style.display = 'block';
    
    // Carica i dettagli (per ora usa dati mock, in futuro può essere AJAX)
    loadStatusDetails(richiestaId);
    
    console.log('📊 Apertura dettagli stato per richiesta:', richiestaId, 'azienda:', aziendaNome);
}

function closeStatusDetailsModal() {
    document.getElementById('status-details-modal').style.display = 'none';
}

function loadStatusDetails(richiestaId) {
    const contentDiv = document.getElementById('status-details-content');
    
    // Ottieni i dati reali dalla struttura JavaScript
    const richiestaData = window.richiesteData[richiestaId];
    
    if (!richiestaData) {
        contentDiv.innerHTML = `
            <div style="background: #f8d7da; padding: 15px; border-radius: 6px; text-align: center; color: #721c24;">
                ❌ Errore: Dati richiesta non trovati (ID: ${richiestaId})
            </div>
        `;
        return;
    }
    
    // Simula caricamento
    setTimeout(() => {
        // Calcola lo stato di completamento
        const dvr_completo = richiestaData.dvr_file && richiestaData.dvr_file.length > 0;
        const rct_completo = richiestaData.rct_file && richiestaData.rct_file.length > 0;
        const operai_inseriti = richiestaData.personale_inserito > 0;
        
        const elementi_completati = [dvr_completo, rct_completo, operai_inseriti].filter(Boolean).length;
        const elementi_totali = 3;
        
        contentDiv.innerHTML = `
            <div style="background: #f8f9fa; padding: 15px; border-radius: 6px; margin-bottom: 20px;">
                <h5 style="margin: 0 0 10px 0; color: #17a2b8;">📋 Stato Compilazione Parte A</h5>
                <div style="margin-bottom: 15px; padding: 10px; background: white; border-radius: 4px; border-left: 4px solid ${richiestaData.stato.color};">
                    <strong>Stato Attuale:</strong> <span style="color: ${richiestaData.stato.color};">${richiestaData.stato.label}</span><br>
                    <small>Elementi completati: ${elementi_completati}/${elementi_totali}</small>
                </div>
                <div style="display: grid; grid-template-columns: repeat(auto-fit, minmax(200px, 1fr)); gap: 15px; font-size: 13px;">
                    <div style="padding: 10px; background: white; border-radius: 4px; border-left: 4px solid ${dvr_completo ? '#28a745' : '#dc3545'};">
                        <strong>📄 DVR:</strong> <span style="color: ${dvr_completo ? '#28a745' : '#dc3545'};">${dvr_completo ? '✅ Caricato' : '❌ Mancante'}</span>
                        ${richiestaData.dvr_data_emissione ? '<br><small style="color: #666;">📅 Emissione: ' + richiestaData.dvr_data_emissione.split('-').reverse().join('/') + '</small>' : ''}
                    </div>
                    <div style="padding: 10px; background: white; border-radius: 4px; border-left: 4px solid ${rct_completo ? '#28a745' : '#dc3545'};">
                        <strong>🛡️ RCT:</strong> <span style="color: ${rct_completo ? '#28a745' : '#dc3545'};">${rct_completo ? '✅ Caricato' : '❌ Mancante'}</span>
                        ${richiestaData.rct_scadenza ? '<br><small style="color: #666;">⏰ Scadenza: ' + richiestaData.rct_scadenza + '</small>' : ''}
                    </div>
                    <div style="padding: 10px; background: white; border-radius: 4px; border-left: 4px solid ${operai_inseriti ? '#28a745' : '#dc3545'};">
                        <strong>👥 Operai nel Sistema:</strong> <span style="color: ${operai_inseriti ? '#28a745' : '#dc3545'};">${operai_inseriti ? '✅ ' + richiestaData.personale_inserito + ' inseriti' : '❌ Nessuno inserito'}</span>
                    </div>
                    <div style="padding: 10px; background: white; border-radius: 4px; border-left: 4px solid #17a2b8;">
                        <strong>🚛 Automezzi:</strong> <span style="color: #17a2b8;">${richiestaData.automezzi_count || 0} registrati</span>
                    </div>
                    <div style="padding: 10px; background: white; border-radius: 4px; border-left: 4px solid #6f42c1;">
                        <strong>🔧 Attrezzi:</strong> <span style="color: #6f42c1;">${richiestaData.attrezzi_count || 0} registrati</span>
                    </div>
                </div>
            </div>
            
            ${elementi_completati < elementi_totali ? `
            <div style="background: #fff3cd; padding: 15px; border-radius: 6px; border-left: 5px solid #ffc107; margin-bottom: 15px;">
                <h5 style="margin: 0 0 10px 0; color: #856404;">⚠️ Cosa Manca per Completare</h5>
                <ul style="margin: 0; padding-left: 20px; color: #856404;">
                    ${!dvr_completo ? '<li>Caricare il documento DVR</li>' : ''}
                    ${!rct_completo ? '<li>Caricare il documento RCT</li>' : ''}
                    ${!operai_inseriti ? '<li>Inserire nel sistema almeno un operaio</li>' : ''}
                </ul>
            </div>
            ` : `
            <div style="background: #d4edda; padding: 15px; border-radius: 6px; border-left: 5px solid #28a745; margin-bottom: 15px;">
                <h5 style="margin: 0 0 10px 0; color: #155724;">✅ Parte A Completata</h5>
                <p style="margin: 0; color: #155724;">Tutti gli elementi richiesti per la Parte A sono stati completati correttamente.</p>
            </div>
            `}
            
            ${richiestaData.personale.length > 0 ? `
            <div style="background: #e3f2fd; padding: 15px; border-radius: 6px; border-left: 5px solid #2196f3;">
                <h5 style="margin: 0 0 10px 0; color: #1976d2;">👥 Operai Registrati (${richiestaData.personale.length})</h5>
                <div style="display: grid; grid-template-columns: repeat(auto-fit, minmax(200px, 1fr)); gap: 10px; font-size: 12px;">
                    ${richiestaData.personale.map(operaio => {
                        const competenze = [];
                        let icons = '';
                        
                        // Formazioni Base
                        if (operaio.formazione_antincendio) { competenze.push('Antincendio'); icons += '🔥'; }
                        if (operaio.formazione_primo_soccorso) { competenze.push('Primo Soccorso'); icons += '🚑'; }
                        if (operaio.formazione_preposti) { competenze.push('Preposti'); icons += '👮'; }
                        
                        // Formazioni Specifiche e Nomine
                        if (operaio.formazione_generale_specifica) { competenze.push('Form. Gen. e Spec.'); icons += '🎓'; }
                        if (operaio.rspp) { competenze.push('RSPP'); icons += '👷'; }
                        if (operaio.rls) { competenze.push('RLS'); icons += '👷'; }
                        if (operaio.aspp) { competenze.push('ASPP'); icons += '👷'; }
                        if (operaio.formazione_ple) { competenze.push('PLE'); icons += '🏗️'; }
                        if (operaio.formazione_carrelli) { competenze.push('Carrelli'); icons += '🚜'; }
                        
                        // Formazioni Aggiuntive Legacy
                        if (operaio.formazione_lavori_quota) { competenze.push('Lavori in Quota'); icons += '🏗️'; }
                        if (operaio.formazione_dpi_terza) { competenze.push('DPI 3° Cat.'); icons += '🦺'; }
                        if (operaio.formazione_ambienti_confinati) { competenze.push('Amb. Confinati'); icons += '🕳️'; }
                        
                        // Check if RSPP or RLS are present (obbligatori)
                        const hasRSPP = operaio.rspp;
                        const hasRLS = operaio.rls;
                        const borderColor = (hasRSPP && hasRLS) ? '#28a745' : '#ffc107';
                        
                        return `
                        <div style="background: white; border: 2px solid ${borderColor}; border-radius: 4px; padding: 8px;">
                            <div style="font-weight: bold; color: #333; margin-bottom: 4px;">${operaio.nome} ${operaio.cognome}</div>
                            <div style="font-size: 10px; color: #666; margin-bottom: 4px;">
                                📅 Nato: ${operaio.data_nascita || 'N/A'}
                            </div>
                            ${(!hasRSPP || !hasRLS) ? `<div style="background: #fff3cd; color: #856404; font-size: 9px; padding: 3px 5px; border-radius: 3px; margin-bottom: 4px;">⚠️ Mancano: ${!hasRSPP ? 'RSPP' : ''} ${!hasRLS ? 'RLS' : ''}</div>` : ''}
                            <div style="font-size: 14px; margin: 4px 0;">${icons || '⚠️'}</div>
                            <div style="font-size: 9px; color: #666; line-height: 1.3;">
                                ${competenze.length > 0 ? competenze.join(', ') : 'Nessuna formazione'}
                            </div>
                        </div>
                        `;
                    }).join('')}
                </div>
            </div>
            ` : ''}
            
            <div style="margin-top: 15px; text-align: center;">
                <button onclick="closeStatusDetailsModal()" style="background: #6c757d; color: white; border: none; padding: 10px 20px; border-radius: 4px; cursor: pointer;">
                    Chiudi
                </button>
            </div>
        `;
    }, 300);
}

// 🆕 NUOVA FUNZIONE: Mostra operai assegnati a un cantiere specifico
function showCantiereWorkers(cantiereId, userId, cantiereName, aziendaNome) {
    // Crea o mostra un modal con gli operai assegnati
    let modal = document.getElementById('cantiere-workers-modal');
    if (!modal) {
        modal = document.createElement('div');
        modal.id = 'cantiere-workers-modal';
        modal.style.cssText = 'display: none; position: fixed; top: 0; left: 0; width: 100%; height: 100%; background: rgba(0,0,0,0.5); z-index: 9999;';
        
        modal.innerHTML = `
            <div class="assignments-summary-style" style="position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%); width: 90%; max-width: 700px; max-height: 80%; overflow-y: auto; margin-bottom: 0;">
                <div class="summary-header" style="border-radius: 8px 8px 0 0;">
                    <div style="display: flex; justify-content: space-between; align-items: center;">
                        <h4 class="summary-title">🏗️ Dettagli Cantiere Assegnato</h4>
                        <button onclick="closeCantiereWorkersModal()" style="background: transparent; color: white; border: none; font-size: 20px; cursor: pointer;">✕</button>
                    </div>
                    <p id="workers-cantiere-info" class="summary-description"></p>
                </div>
                <div id="workers-details-content" class="summary-body">
                    <div style="text-align: center; padding: 20px;">
                        <div style="font-size: 16px;">🔄 Caricamento operai...</div>
                    </div>
                </div>
            </div>
        `;
        
        document.body.appendChild(modal);
        
        // Aggiungi event listener per chiudere cliccando fuori
        modal.addEventListener('click', function(e) {
            if (e.target === this) {
                closeCantiereWorkersModal();
            }
        });
    }
    
    document.getElementById('workers-cantiere-info').innerHTML = `🏗️ <strong>${cantiereName}</strong> • 🏢 ${aziendaNome}`;
    document.getElementById('cantiere-workers-modal').style.display = 'block';
    
    // Carica gli operai assegnati
    loadCantiereWorkers(cantiereId, userId);
    
    console.log('👷 Apertura operai per cantiere:', cantiereName, 'azienda:', aziendaNome);
}

function closeCantiereWorkersModal() {
    document.getElementById('cantiere-workers-modal').style.display = 'none';
}

function loadCantiereWorkers(cantiereId, userId) {
    const contentDiv = document.getElementById('workers-details-content');
    
    // Trova i dati del cantiere specifico per questo utente
    const richiesteData = window.richiesteData;
    let cantiereData = null;
    let richiestaId = null;
    
    // Cerca il cantiere nei dati delle richieste
    for (const [reqId, richiesta] of Object.entries(richiesteData)) {
        if (richiesta.user_id == userId) {
            const cantiere = richiesta.cantieri.find(c => c.id == cantiereId);
            if (cantiere) {
                cantiereData = cantiere;
                richiestaId = reqId;
                break;
            }
        }
    }
    
    if (!cantiereData) {
        contentDiv.innerHTML = `
            <div style="background: #f8d7da; padding: 15px; border-radius: 6px; text-align: center; color: #721c24;">
                ❌ Errore: Dati cantiere non trovati (Cantiere ID: ${cantiereId}, User ID: ${userId})
            </div>
        `;
        return;
    }
    
    // Simula caricamento
    setTimeout(() => {
        const operaiTotali = cantiereData.operai.length;
        const automezziTotali = cantiereData.automezzi.length;
        const attrezziTotali = cantiereData.attrezzi.length;
        const hasPOS = cantiereData.pos_file && cantiereData.pos_file.length > 0;
        const hasMezziFile = cantiereData.mezzi_file && cantiereData.mezzi_file.length > 0;
        
        const operaiConAntincendio = cantiereData.operai.filter(o => o.competenze.includes('Antincendio')).length;
        const operaiConPrimoSoccorso = cantiereData.operai.filter(o => o.competenze.includes('Primo Soccorso')).length;
        const operaiConPreposti = cantiereData.operai.filter(o => o.competenze.includes('Preposti')).length;
        
        contentDiv.innerHTML = `
            <div style="background: #f8f9fa; padding: 15px; border-radius: 6px; margin-bottom: 20px;">
                <h5 style="margin: 0 0 10px 0; color: #2196f3;">📊 Riepilogo Risorse Cantiere</h5>
                <div style="display: grid; grid-template-columns: repeat(auto-fit, minmax(120px, 1fr)); gap: 10px; font-size: 12px;">
                    <div style="text-align: center; padding: 8px; background: #28a745; color: white; border-radius: 4px;">
                        <div style="font-size: 16px; font-weight: bold;">${operaiTotali}</div>
                        <div>👷 Operai</div>
                    </div>
                    <div style="text-align: center; padding: 8px; background: #ffc107; color: white; border-radius: 4px;">
                        <div style="font-size: 16px; font-weight: bold;">${automezziTotali}</div>
                        <div>🚛 Automezzi</div>
                    </div>
                    <div style="text-align: center; padding: 8px; background: #17a2b8; color: white; border-radius: 4px;">
                        <div style="font-size: 16px; font-weight: bold;">${attrezziTotali}</div>
                        <div>🔧 Attrezzi</div>
                    </div>
                    <div style="text-align: center; padding: 8px; background: ${hasPOS ? '#28a745' : '#dc3545'}; color: white; border-radius: 4px; cursor: ${hasPOS ? 'pointer' : 'default'};" onclick="${hasPOS ? `window.open('${cantiereData.pos_file}', '_blank')` : ''}">
                        <div style="font-size: 16px; font-weight: bold;">${hasPOS ? '✅' : '❌'}</div>
                        <div>📋 POS</div>
                        ${hasPOS && cantiereData.pos_data_emissione ? `<div style="font-size: 10px; margin-top: 4px; opacity: 0.9;">📅 ${new Date(cantiereData.pos_data_emissione).toLocaleDateString('it-IT')}</div>` : ''}
                    </div>
                </div>
            </div>
            
            ${operaiTotali > 0 ? `
            <div style="margin-bottom: 20px;">
                <h5 style="color: #2196f3; margin-bottom: 15px;">👷 Operai Assegnati (${operaiTotali})</h5>
                <div style="background: #e3f2fd; padding: 10px; border-radius: 6px; margin-bottom: 15px;">
                    <div style="display: grid; grid-template-columns: repeat(auto-fit, minmax(100px, 1fr)); gap: 8px; font-size: 11px;">
                        <div style="text-align: center; padding: 6px; background: #ff5722; color: white; border-radius: 4px;">
                            <strong>${operaiConAntincendio}</strong> 🔥 Antincendio
                        </div>
                        <div style="text-align: center; padding: 6px; background: #4caf50; color: white; border-radius: 4px;">
                            <strong>${operaiConPrimoSoccorso}</strong> 🚑 P. Soccorso
                        </div>
                        <div style="text-align: center; padding: 6px; background: #673ab7; color: white; border-radius: 4px;">
                            <strong>${operaiConPreposti}</strong> 👮 Preposti
                        </div>
                    </div>
                </div>
                <div style="display: grid; grid-template-columns: repeat(auto-fit, minmax(250px, 1fr)); gap: 15px;">
                    ${cantiereData.operai.map(operaio => {
                        // Calcola età
                        const oggi = new Date();
                        const nascita = new Date(operaio.data_nascita);
                        const eta = Math.floor((oggi - nascita) / (365.25 * 24 * 60 * 60 * 1000));
                        
                        // Determina il colore del bordo in base alle competenze
                        let borderColor = '#dc3545'; // rosso per nessuna competenza
                        if (operaio.competenze.length >= 3) {
                            borderColor = '#28a745'; // verde per molte competenze
                        } else if (operaio.competenze.length >= 1) {
                            borderColor = '#ffc107'; // giallo per alcune competenze
                        }
                        
                        // 📚 Prepara lista formazioni con date (nuovi campi implementati)
                        const formazioniExtra = [];
                        if (operaio.formazione_generale_specifica) formazioniExtra.push('🎓 Form. Gen. e Spec.');
                        if (operaio.rspp) formazioniExtra.push('<strong>👷 RSPP</strong>');
                        if (operaio.rls) formazioniExtra.push('<strong>👷 RLS</strong>');
                        if (operaio.aspp) formazioniExtra.push('👷 ASPP');
                        if (operaio.formazione_ple) formazioniExtra.push('🏗️ PLE');
                        if (operaio.formazione_carrelli) formazioniExtra.push('🚜 Carrelli');
                        
                        return `
                        <div class="summary-card" style="border-left: 4px solid ${borderColor};">
                            <div style="display: flex; justify-content: space-between; align-items: flex-start; margin-bottom: 8px;">
                                <div>
                                    <div class="summary-card-title" style="font-size: 14px; padding-right: 0;">${operaio.nome} ${operaio.cognome}</div>
                                    <div style="font-size: 11px; color: #666;">Età: ${eta} anni</div>
                                    <div style="font-size: 10px; color: #888;">Assegnato: ${new Date(operaio.data_assegnazione).toLocaleDateString('it-IT')}</div>
                                </div>
                                <div style="font-size: 16px;">${operaio.icons || '⚠️'}</div>
                            </div>
                            <div class="summary-card-info" style="font-size: 10px; margin-bottom: 5px;">
                                <strong>Formazioni Base:</strong> ${operaio.competenze.length > 0 ? operaio.competenze.join(', ') : 'Nessuna'}
                            </div>
                            ${formazioniExtra.length > 0 ? `
                            <div class="summary-card-info" style="font-size: 10px; background: #e3f2fd; padding: 5px; border-radius: 3px;">
                                <strong>Formazioni Specifiche:</strong> ${formazioniExtra.join(' • ')}
                            </div>
                            ` : ''}
                        </div>
                        `;
                    }).join('')}
                </div>
            </div>
            ` : `
            <div style="background: #fff3cd; padding: 15px; border-radius: 6px; margin-bottom: 20px; text-align: center; color: #856404;">
                <div style="font-size: 18px; margin-bottom: 10px;">👷</div>
                <div>Nessun operaio assegnato a questo cantiere</div>
            </div>
            `}
            
            ${automezziTotali > 0 ? `
            <div style="margin-bottom: 20px;">
                <h5 style="color: #ffc107; margin-bottom: 15px;">🚛 Mezzi Meccanici Assegnati (${automezziTotali})</h5>
                <div style="display: grid; grid-template-columns: repeat(auto-fit, minmax(250px, 1fr)); gap: 10px;">
                    ${cantiereData.automezzi.map(automezzo => {
                        // Determina icona tipologia
                        const iconeTipologia = {
                            'AUTO': '🚗',
                            'AUTOCARRO': '🚚',
                            'AUTOCARRO CON GRU': '🏗️',
                            'PLE': '⬆️',
                            'MEZZI MOVIMENTI TERRA': '🚜'
                        };
                        const icona = iconeTipologia[automezzo.tipologia] || '🚗';
                        const tipologia = automezzo.tipologia || 'AUTO';
                        
                        // Verifica se richiede verifiche periodiche
                        const richiedeVerifiche = ['AUTOCARRO CON GRU', 'PLE', 'MEZZI MOVIMENTI TERRA'].includes(tipologia);
                        
                        return `
                        <div style="background: white; border: 1px solid #ddd; border-radius: 6px; padding: 12px; border-left: 4px solid #ffc107;">
                            <div style="display: flex; justify-content: space-between; align-items: flex-start; margin-bottom: 5px;">
                                <div style="font-weight: bold; color: #333;">${automezzo.descrizione}</div>
                                <div style="font-size: 18px;">${icona}</div>
                            </div>
                            <div style="font-size: 11px; color: #666; margin-bottom: 3px;">
                                <strong>Tipologia:</strong> ${tipologia}
                            </div>
                            <div style="font-size: 12px; color: #666; margin-bottom: 5px;">
                                <strong>Targa:</strong> <span style="font-family: monospace; font-weight: bold;">${automezzo.targa}</span>
                            </div>
                            ${automezzo.scadenza_revisione ? `
                            <div style="font-size: 10px; color: #666;">
                                🔧 <strong>Revisione:</strong> ${new Date(automezzo.scadenza_revisione).toLocaleDateString('it-IT')}
                            </div>
                            ` : ''}
                            ${automezzo.scadenza_assicurazione ? `
                            <div style="font-size: 10px; color: #666;">
                                🛡️ <strong>Assicurazione:</strong> ${new Date(automezzo.scadenza_assicurazione).toLocaleDateString('it-IT')}
                            </div>
                            ` : ''}
                            ${richiedeVerifiche && automezzo.scadenza_verifiche_periodiche ? `
                            <div style="font-size: 10px; color: #666; background: #fff3cd; padding: 3px; border-radius: 2px; margin-top: 3px;">
                                ⚠️ <strong>Verifiche:</strong> ${new Date(automezzo.scadenza_verifiche_periodiche).toLocaleDateString('it-IT')}
                            </div>
                            ` : ''}
                            <div style="font-size: 9px; color: #888; margin-top: 5px; border-top: 1px solid #eee; padding-top: 3px;">
                                Assegnato: ${new Date(automezzo.data_assegnazione).toLocaleDateString('it-IT')}
                            </div>
                        </div>
                        `;
                    }).join('')}
                </div>
            </div>
            ` : ''}
            
            ${attrezziTotali > 0 ? `
            <div style="margin-bottom: 20px;">
                <h5 style="color: #17a2b8; margin-bottom: 15px;">🔧 Attrezzi Assegnati (${attrezziTotali})</h5>
                <div style="display: grid; grid-template-columns: repeat(auto-fit, minmax(200px, 1fr)); gap: 10px;">
                    ${cantiereData.attrezzi.map(attrezzo => `
                        <div style="background: white; border: 1px solid #ddd; border-radius: 6px; padding: 12px; border-left: 4px solid #17a2b8;">
                            <div style="font-weight: bold; color: #333; margin-bottom: 5px;">${attrezzo.descrizione}</div>
                            <div style="font-size: 12px; color: #666; margin-bottom: 5px;">
                                <strong>Revisione:</strong> ${attrezzo.data_revisione ? new Date(attrezzo.data_revisione).toLocaleDateString('it-IT') : 'Non specificata'}
                            </div>
                            <div style="font-size: 10px; color: #888;">
                                Assegnato: ${new Date(attrezzo.data_assegnazione).toLocaleDateString('it-IT')}
                            </div>
                        </div>
                    `).join('')}
                </div>
            </div>
            ` : ''}
            
            <div style="margin-top: 20px; text-align: center;">
                <button onclick="closeCantiereWorkersModal()" style="background: #6c757d; color: white; border: none; padding: 10px 20px; border-radius: 4px; cursor: pointer; margin-right: 10px;">
                    Chiudi
                </button>
                ${(operaiTotali > 0 || automezziTotali > 0 || attrezziTotali > 0) ? `
                <button onclick="alert('Funzionalità in sviluppo: gestione dettagliata risorse cantiere')" style="background: #28a745; color: white; border: none; padding: 10px 20px; border-radius: 4px; cursor: pointer;">
                    📝 Gestisci Risorse
                </button>
                ` : ''}
            </div>
        `;
    }, 300);
}

function loadCantiereDetailsData(cantiereId) {
    // Reset stato
    document.getElementById('cantiere-details-loading').style.display = 'block';
    document.getElementById('cantiere-details-content').style.display = 'none';
    document.getElementById('cantiere-details-info').textContent = 'Caricamento dettagli cantiere...';
    
    // Chiamata AJAX reale al file PHP
    fetchCantiereDetailsFromServer(cantiereId);
}

function fetchCantiereDetailsFromServer(cantiereId) {
    // Chiama il vero endpoint AJAX
    const ajaxUrl = '/cogei/ajax_fornitori/get_cantiere_details.php';
    
    // Prepara i dati da inviare
    const formData = new FormData();
    formData.append('cantiere_id', cantiereId);
    
    console.log('🔄 Chiamata AJAX per cantiere ID:', cantiereId);
    
    fetch(ajaxUrl, {
        method: 'POST',
        body: formData,
        headers: {
            'X-Requested-With': 'XMLHttpRequest'
        }
    })
    .then(response => {
        console.log('📡 Risposta AJAX ricevuta:', response.status, response.statusText);
        
        if (!response.ok) {
            throw new Error(`HTTP error! status: ${response.status}`);
        }
        
        return response.json();
    })
    .then(data => {
        console.log('✅ Dati ricevuti:', data);
        
        if (data.success) {
            displayCantiereDetailsContent(data);
        } else {
            throw new Error(data.error || 'Errore sconosciuto dal server');
        }
    })
    .catch(error => {
        console.error('❌ Errore AJAX:', error);
        displayCantiereDetailsError(error.message);
    });
}

function displayCantiereDetailsContent(data) {
    // Store data globally for PDF export
    window.currentCantiereData = data;
    
    // Aggiorna header con dati reali
    const headerInfo = document.getElementById('cantiere-details-info');
    const cantiere = data.cantiere;
    const stats = data.statistiche_globali;
    
    headerInfo.innerHTML = `
        <strong>${cantiere.nome}</strong> (#${cantiere.id})<br>
        <span style="font-size: 14px;">
            ${cantiere.descrizione || 'Nessuna descrizione'} • 
            Stato: <strong>${cantiere.stato.toUpperCase()}</strong> • 
            ${stats.totale_aziende} aziende • ${stats.totale_operai} operai
        </span>
    `;
    
    // Genera contenuto dettagliato
    generateRealCantiereDetailsContent(data);
    
    // Nascondi loading e mostra content
    document.getElementById('cantiere-details-loading').style.display = 'none';
    document.getElementById('cantiere-details-content').style.display = 'block';
}

function displayCantiereDetailsError(errorMessage) {
    const contentDiv = document.getElementById('cantiere-details-content');
    
    contentDiv.innerHTML = `
        <div style="background: #f8d7da; color: #721c24; padding: 20px; border-radius: 6px; text-align: center; border-left: 5px solid #dc3545;">
            <div style="font-size: 18px; margin-bottom: 10px;">❌ Errore nel caricamento</div>
            <div style="font-size: 14px; margin-bottom: 15px;">${errorMessage}</div>
            <button onclick="loadCantiereDetailsData(${document.getElementById('modal-cantiere-id')?.value || 'null'})" 
                    style="background: #dc3545; color: white; border: none; padding: 8px 16px; border-radius: 4px; cursor: pointer;">
                🔄 Riprova
            </button>
            <button onclick="generateFallbackCantiereDetails(${document.getElementById('modal-cantiere-id')?.value || 'null'})" 
                    style="background: #6c757d; color: white; border: none; padding: 8px 16px; border-radius: 4px; cursor: pointer; margin-left: 10px;">
                📋 Mostra Demo
            </button>
        </div>
        <div style="margin-top: 20px; padding: 15px; background: #fff3cd; color: #856404; border-radius: 6px; font-size: 12px;">
            <strong>💡 Informazioni tecniche:</strong><br>
            • Endpoint chiamato: <code>/cogei/ajax_fornitori/get_cantiere_details.php</code><br>
            • Verifica che il file esista e sia accessibile<br>
            • Controlla i log del server per maggiori dettagli<br>
            • Il file deve essere in grado di caricare WordPress per funzionare
        </div>
    `;
    
    // Nascondi loading e mostra content
    document.getElementById('cantiere-details-loading').style.display = 'none';
    document.getElementById('cantiere-details-content').style.display = 'block';
}

function generateRealCantiereDetailsContent(data) {
    const contentDiv = document.getElementById('cantiere-details-content');
    const cantiere = data.cantiere;
    const stats = data.statistiche_globali;
    const aziende = data.aziende;
    
    let contentHTML = `
        <div style="background: linear-gradient(135deg, #f8f9fa 0%, #e9ecef 100%); padding: 25px; border-radius: 10px; margin-bottom: 30px; box-shadow: 0 2px 10px rgba(0,0,0,0.08);">
            <h3 style="margin: 0 0 20px 0; color: #0066a2; font-size: 22px; font-weight: 700; border-bottom: 3px solid #17a2b8; padding-bottom: 12px;">📊 Riepilogo Cantiere #${cantiere.id}</h3>
            <div style="display: grid; grid-template-columns: repeat(auto-fit, minmax(200px, 1fr)); gap: 20px; font-size: 15px; line-height: 1.6;">
                <div style="padding: 8px 0;"><strong style="color: #495057; font-size: 14px;">🏗️ Nome:</strong><br><span style="color: #212529; font-size: 16px; font-weight: 600;">${cantiere.nome}</span></div>
                <div style="padding: 8px 0;"><strong style="color: #495057; font-size: 14px;">📅 Inizio:</strong><br><span style="color: #212529; font-size: 16px;">${cantiere.data_inizio ? new Date(cantiere.data_inizio).toLocaleDateString('it-IT') : 'Non definita'}</span></div>
                <div style="padding: 8px 0;"><strong style="color: #495057; font-size: 14px;">🏁 Fine:</strong><br><span style="color: #212529; font-size: 16px;">${cantiere.data_fine ? new Date(cantiere.data_fine).toLocaleDateString('it-IT') : 'Non definita'}</span></div>
                <div style="padding: 8px 0;"><strong style="color: #495057; font-size: 14px;">📅 Creato:</strong><br><span style="color: #212529; font-size: 16px;">${new Date(cantiere.data_creazione).toLocaleDateString('it-IT')}</span></div>
                <div style="padding: 8px 0;"><strong style="color: #495057; font-size: 14px;">🏢 Aziende:</strong><br><span style="color: #007bff; font-size: 18px; font-weight: 700;">${stats.totale_aziende}</span></div>
                <div style="padding: 8px 0;"><strong style="color: #495057; font-size: 14px;">👷 Operai:</strong><br><span style="color: #007bff; font-size: 18px; font-weight: 700;">${stats.totale_operai}</span></div>
                <div style="padding: 8px 0;"><strong style="color: #495057; font-size: 14px;">🚛 Mezzi:</strong><br><span style="color: #007bff; font-size: 18px; font-weight: 700;">${stats.totale_mezzi || 0}</span></div>
                <div style="padding: 8px 0;"><strong style="color: #495057; font-size: 14px;">🔧 Attrezzature:</strong><br><span style="color: #007bff; font-size: 18px; font-weight: 700;">${stats.totale_attrezzature || 0}</span></div>
                <div style="padding: 8px 0;"><strong style="color: #495057; font-size: 14px;">✅ Formati:</strong><br><span style="color: #28a745; font-size: 18px; font-weight: 700;">${stats.operai_con_formazioni}</span></div>
                <div style="padding: 8px 0;"><strong style="color: #495057; font-size: 14px;">🔄 Aggiornato:</strong><br><span style="color: #212529; font-size: 14px;">${data.timestamp}</span></div>
            </div>
        </div>
    `;
    
    // Sezione conformità con dati reali
    const isConforme = stats.conforme;
    const conformitaPerc = stats.conformita_percentuale;
    
    contentHTML += `
        <div style="background: ${isConforme ? '#d4edda' : '#fff3cd'}; padding: 25px; border-radius: 10px; margin-bottom: 30px; border-left: 6px solid ${isConforme ? '#28a745' : '#ffc107'}; box-shadow: 0 2px 10px rgba(0,0,0,0.08);">
            <h3 style="margin: 0 0 20px 0; color: ${isConforme ? '#155724' : '#856404'}; font-size: 20px; font-weight: 700;">
                ${isConforme ? '✅ CANTIERE CONFORME' : '⚠️ ATTENZIONE: VERIFICA CONFORMITÀ'}
            </h3>
            <div style="margin-bottom: 15px; font-size: 16px; color: ${isConforme ? '#155724' : '#856404'}; font-weight: 600;">
                Operai con formazione: ${conformitaPerc}% (${stats.operai_con_formazioni}/${stats.totale_operai})
            </div>
            <div style="display: grid; grid-template-columns: repeat(auto-fit, minmax(180px, 1fr)); gap: 15px; margin-top: 20px;">
                <div style="text-align: center; padding: 18px; background: ${stats.percentuali.antincendio >= 30 ? '#28a745' : '#dc3545'}; color: white; border-radius: 8px; box-shadow: 0 2px 8px rgba(0,0,0,0.15);">
                    <div style="font-size: 28px; font-weight: 700; margin-bottom: 8px;">${stats.percentuali.antincendio}%</div>
                    <div style="font-size: 15px; font-weight: 600; margin-bottom: 5px;">🔥 Antincendio</div>
                    <div style="font-size: 13px; opacity: 0.9;">${stats.competenze_conteggi.antincendio} su ${stats.totale_operai} operai</div>
                </div>
                <div style="text-align: center; padding: 18px; background: ${stats.percentuali.primo_soccorso >= 30 ? '#28a745' : '#dc3545'}; color: white; border-radius: 8px; box-shadow: 0 2px 8px rgba(0,0,0,0.15);">
                    <div style="font-size: 28px; font-weight: 700; margin-bottom: 8px;">${stats.percentuali.primo_soccorso}%</div>
                    <div style="font-size: 15px; font-weight: 600; margin-bottom: 5px;">🚑 Primo Soccorso</div>
                    <div style="font-size: 13px; opacity: 0.9;">${stats.competenze_conteggi.primo_soccorso} su ${stats.totale_operai} operai</div>
                </div>
                <div style="text-align: center; padding: 18px; background: ${stats.percentuali.preposti >= 30 ? '#28a745' : '#dc3545'}; color: white; border-radius: 8px; box-shadow: 0 2px 8px rgba(0,0,0,0.15);">
                    <div style="font-size: 28px; font-weight: 700; margin-bottom: 8px;">${stats.percentuali.preposti}%</div>
                    <div style="font-size: 15px; font-weight: 600; margin-bottom: 5px;">👮 Preposti</div>
                    <div style="font-size: 13px; opacity: 0.9;">${stats.competenze_conteggi.preposti} su ${stats.totale_operai} operai</div>
                </div>
            </div>
            <div style="margin-top: 20px; padding: 12px; background: rgba(255,255,255,0.6); border-radius: 6px; font-size: 14px; color: ${isConforme ? '#155724' : '#856404'};">
                💡 <strong>Soglia minima richiesta:</strong> 30% per ogni competenza
            </div>
        </div>
    `;
    
    // Lista aziende con operai reali
    if (aziende && aziende.length > 0) {
        contentHTML += `<h2 style="color: #0066a2; margin: 30px 0 20px 0; font-size: 24px; font-weight: 700; border-bottom: 3px solid #17a2b8; padding-bottom: 10px;">🏢 Aziende e Risorse Assegnate (${aziende.length})</h2>`;
        
        aziende.forEach(aziendaData => {
            const azienda = aziendaData.azienda;
            const operai = aziendaData.operai;
            const statistiche = aziendaData.statistiche;
            
            contentHTML += `
                <div style="background: white; border: 2px solid #dee2e6; border-radius: 10px; margin-bottom: 25px; overflow: hidden; box-shadow: 0 4px 15px rgba(0,0,0,0.1);">
                    <div style="background: linear-gradient(135deg, #2196f3, #1976d2); color: white; padding: 20px;">
                        <div style="display: flex; justify-content: space-between; align-items: center; flex-wrap: wrap; gap: 15px;">
                            <div style="flex: 1; min-width: 250px;">
                                <h4 style="margin: 0 0 8px 0; font-size: 20px; font-weight: 700;">${azienda.nome}</h4>
                                <div style="font-size: 14px; opacity: 0.95; line-height: 1.4;">
                                    📧 ${azienda.email}<br>
                                    🏷️ Tipologia: ${azienda.tipo}
                                </div>
                            </div>
                            <div style="text-align: right; font-size: 14px; line-height: 1.6;">
                                <div style="margin-bottom: 4px;"><strong>👷 Operai:</strong> ${azienda.operai_totali}</div>
                                <div style="margin-bottom: 4px;"><strong>🚛 Mezzi:</strong> ${azienda.automezzi_totali || 0} • <strong>🔧 Attrezzi:</strong> ${azienda.attrezzi_totali || 0}</div>
                                <div style="margin-bottom: 8px;"><strong>📅 Assegnato:</strong> ${new Date(azienda.data_assegnazione).toLocaleDateString('it-IT')}</div>
                                <div style="background: ${azienda.conformita_percentuale >= 70 ? '#28a745' : (azienda.conformita_percentuale >= 40 ? '#ffc107' : '#dc3545')}; color: white; padding: 6px 12px; border-radius: 20px; margin-top: 6px; display: inline-block; font-size: 16px; font-weight: 700; box-shadow: 0 2px 6px rgba(0,0,0,0.2);">
                                    Conformità: ${azienda.conformita_percentuale}%
                                </div>
                            </div>
                        </div>
                    </div>
                    
                    <div style="padding: 25px;">
            `;
            
            if (operai && operai.length > 0) {
                contentHTML += `
                    <h5 style="color: #0066a2; margin: 0 0 20px 0; font-size: 18px; font-weight: 700; border-bottom: 2px solid #17a2b8; padding-bottom: 8px;">👷 OPERAI ASSEGNATI (${operai.length})</h5>
                    <div style="display: grid; grid-template-columns: repeat(auto-fit, minmax(280px, 1fr)); gap: 15px;">
                `;
                
                operai.forEach(operaio => {
                    const hasFormazioni = operaio.ha_formazioni;
                    const competenzeIcons = [];
                    
                    if (operaio.formazioni.antincendio) competenzeIcons.push('🔥');
                    if (operaio.formazioni.primo_soccorso) competenzeIcons.push('🚑');
                    if (operaio.formazioni.preposti) competenzeIcons.push('👮');
                    if (operaio.formazioni.generale_specifica) competenzeIcons.push('🎓');
                    if (operaio.ruoli.rspp) competenzeIcons.push('👷‍♂️');
                    if (operaio.ruoli.rls) competenzeIcons.push('🛡️');
                    if (operaio.formazioni.ple) competenzeIcons.push('🏗️');
                    if (operaio.formazioni.carrelli) competenzeIcons.push('🚜');
                    
                    const totaleDocs = operaio.documenti ? operaio.documenti.length : 0;
                    
                    contentHTML += `
                        <div style="background: ${hasFormazioni ? '#e8f5e9' : '#fff8e1'}; border: 2px solid ${hasFormazioni ? '#66bb6a' : '#ffb300'}; border-radius: 8px; padding: 16px; box-shadow: 0 2px 8px rgba(0,0,0,0.1);">
                            <div style="display: flex; justify-content: space-between; align-items: flex-start; margin-bottom: 10px;">
                                <div style="flex: 1;">
                                    <div style="font-weight: 700; font-size: 16px; color: #212529; margin-bottom: 4px;">${operaio.nome_completo}</div>
                                    <div style="font-size: 13px; color: #495057; margin-bottom: 2px;">👤 Età: <strong>${operaio.eta} anni</strong></div>
                                    <div style="font-size: 12px; color: #6c757d;">📅 Assegnato il: ${new Date(operaio.data_assegnazione).toLocaleDateString('it-IT')}</div>
                                </div>
                                <div style="font-size: 22px; line-height: 1.2;">
                                    ${competenzeIcons.length > 0 ? competenzeIcons.join(' ') : '⚠️'}
                                </div>
                            </div>
                            <div style="font-size: 13px; color: #495057; margin-bottom: 8px; padding: 8px; background: rgba(255,255,255,0.7); border-radius: 4px; line-height: 1.5;">
                                ${hasFormazioni ? 
                                    '<strong>✓ Competenze:</strong> ' + operaio.competenze.map(c => 
                                        c === 'antincendio' ? 'Antincendio' : 
                                        c === 'primo_soccorso' ? 'Primo Soccorso' : 
                                        c === 'preposti' ? 'Preposti' : c
                                    ).join(', ') : 
                                    '<strong style="color: #f57c00;">⚠ Nessuna formazione registrata</strong>'
                                }
                            </div>
                            ${totaleDocs > 0 ? `
                                <details style="margin-top: 10px;">
                                    <summary style="cursor: pointer; color: #007bff; font-weight: 700; font-size: 14px; padding: 8px; background: rgba(0,123,255,0.1); border-radius: 4px; list-style: none; user-select: none;">
                                        📎 ${totaleDocs} documento${totaleDocs !== 1 ? 'i' : ''} disponibile${totaleDocs !== 1 ? 'i' : ''}
                                    </summary>
                                    <div style="margin-top: 10px; padding: 10px; background: white; border-radius: 6px; max-height: 200px; overflow-y: auto; border: 1px solid #dee2e6;">
                                        ${operaio.documenti.map(doc => {
                                            const scaduto = doc.expires_at && new Date(doc.expires_at) < new Date();
                                            const inScadenza = doc.expires_at && !scaduto && 
                                                Math.ceil((new Date(doc.expires_at) - new Date()) / (1000 * 60 * 60 * 24)) <= 30;
                                            
                                            return `
                                                <div style="margin-bottom: 8px; padding: 8px; background: ${scaduto ? '#ffebee' : inScadenza ? '#fff3e0' : '#f8f9fa'}; border-radius: 4px; border-left: 3px solid ${scaduto ? '#d32f2f' : inScadenza ? '#f57c00' : '#4caf50'};">
                                                    <a href="${doc.url}" target="_blank" style="color: #1976d2; text-decoration: none; font-size: 13px; font-weight: 600; display: block; margin-bottom: 4px;">
                                                        📄 ${doc.name}
                                                    </a>
                                                    ${doc.expires_at ? `
                                                        <div style="font-size: 12px; color: ${scaduto ? '#b71c1c' : inScadenza ? '#e65100' : '#2e7d32'}; font-weight: ${scaduto || inScadenza ? '700' : '500'};">
                                                            ${scaduto ? '⚠️ SCADUTO' : inScadenza ? '⏰ In scadenza' : '✓ Valido'}: ${new Date(doc.expires_at).toLocaleDateString('it-IT')}
                                                        </div>
                                                    ` : ''}
                                                    ${doc.emission_date ? `
                                                        <div style="font-size: 11px; color: #616161; margin-top: 3px;">
                                                            📅 Emesso: ${new Date(doc.emission_date).toLocaleDateString('it-IT')}
                                                        </div>
                                                    ` : ''}
                                                </div>
                                            `;
                                        }).join('')}
                                    </div>
                                </details>
                            ` : ''}
                        </div>
                    `;
                });
                
                contentHTML += `</div>`;
            } else {
                contentHTML += `
                    <div style="text-align: center; padding: 20px; color: #666; font-style: italic;">
                        Nessun operaio assegnato a questo cantiere
                    </div>
                `;
            }
            
            // 🚛 SEZIONE MEZZI
            const mezzi = aziendaData.mezzi;
            if (mezzi && mezzi.length > 0) {
                contentHTML += `
                    <div style="margin-top: 30px; padding: 20px; background: linear-gradient(135deg, #fff9e6 0%, #fffbf0 100%); border-radius: 8px; border-left: 5px solid #ffc107; box-shadow: 0 2px 8px rgba(0,0,0,0.08);">
                        <h5 style="margin: 0 0 20px 0; color: #f57c00; font-size: 18px; font-weight: 700; border-bottom: 2px solid #ffc107; padding-bottom: 8px;">🚛 MEZZI ASSEGNATI (${mezzi.length})</h5>
                        <div style="display: grid; grid-template-columns: repeat(auto-fit, minmax(300px, 1fr)); gap: 15px;">
                `;
                
                mezzi.forEach(mezzo => {
                    const tipologiaLabels = {
                        'AUTO': '🚗 Auto',
                        'AUTOCARRO': '🚚 Autocarro',
                        'AUTOCARRO_GRU': '🏗️ Autocarro con Gru',
                        'PLE': '⬆️ PLE',
                        'MEZZI_TERRA': '🚜 Mezzi Movimenti Terra'
                    };
                    
                    const tipologiaLabel = tipologiaLabels[mezzo.tipologia] || '🚗 ' + mezzo.tipologia;
                    const needsVerifiche = ['AUTOCARRO_GRU', 'PLE', 'MEZZI_TERRA'].includes(mezzo.tipologia);
                    
                    // Check scadenze
                    const oggi = new Date();
                    let scadenzeWarning = [];
                    
                    if (mezzo.scadenza_revisione) {
                        const scadenzaDate = new Date(mezzo.scadenza_revisione);
                        const diffDays = Math.ceil((scadenzaDate - oggi) / (1000 * 60 * 60 * 24));
                        if (diffDays < 0) scadenzeWarning.push('⚠️ Revisione scaduta');
                        else if (diffDays <= 30) scadenzeWarning.push('⏰ Revisione in scadenza');
                    }
                    
                    if (mezzo.scadenza_assicurazione) {
                        const scadenzaDate = new Date(mezzo.scadenza_assicurazione);
                        const diffDays = Math.ceil((scadenzaDate - oggi) / (1000 * 60 * 60 * 24));
                        if (diffDays < 0) scadenzeWarning.push('⚠️ Assicurazione scaduta');
                        else if (diffDays <= 30) scadenzeWarning.push('⏰ Assicurazione in scadenza');
                    }
                    
                    if (needsVerifiche && mezzo.scadenza_verifiche_periodiche) {
                        const scadenzaDate = new Date(mezzo.scadenza_verifiche_periodiche);
                        const diffDays = Math.ceil((scadenzaDate - oggi) / (1000 * 60 * 60 * 24));
                        if (diffDays < 0) scadenzeWarning.push('⚠️ Verifiche scadute');
                        else if (diffDays <= 30) scadenzeWarning.push('⏰ Verifiche in scadenza');
                    }
                    
                    const hasWarnings = scadenzeWarning.length > 0;
                    const bgColor = hasWarnings ? '#ffebee' : 'white';
                    const borderColor = hasWarnings ? '#d32f2f' : '#90a4ae';
                    
                    contentHTML += `
                        <div style="background: ${bgColor}; border: 2px solid ${borderColor}; border-radius: 8px; padding: 16px; box-shadow: 0 2px 8px rgba(0,0,0,0.1);">
                            <div style="font-weight: 700; font-size: 16px; color: #212529; margin-bottom: 8px;">
                                ${tipologiaLabel}
                            </div>
                            <div style="font-size: 14px; color: #495057; margin-bottom: 8px;">
                                ${mezzo.descrizione}
                            </div>
                            <div style="font-size: 15px; color: #212529; font-family: 'Courier New', monospace; background: rgba(0,0,0,0.05); padding: 6px 10px; border-radius: 4px; margin-bottom: 10px; font-weight: 600;">
                                🏷️ Targa: ${mezzo.targa}
                            </div>
                            
                            ${hasWarnings ? `
                                <div style="background: #ffcdd2; border: 2px solid #d32f2f; border-radius: 6px; padding: 10px; margin-bottom: 10px;">
                                    <div style="font-size: 13px; color: #b71c1c; font-weight: 700; line-height: 1.6;">
                                        ${scadenzeWarning.join('<br>')}
                                    </div>
                                </div>
                            ` : ''}
                            
                            <div style="font-size: 13px; color: #495057; margin-top: 10px; line-height: 1.8; background: rgba(255,255,255,0.7); padding: 10px; border-radius: 4px;">
                                ${mezzo.scadenza_revisione ? `<div><strong>📅 Revisione:</strong> ${new Date(mezzo.scadenza_revisione).toLocaleDateString('it-IT')}</div>` : ''}
                                ${mezzo.scadenza_assicurazione ? `<div><strong>🛡️ Assicurazione:</strong> ${new Date(mezzo.scadenza_assicurazione).toLocaleDateString('it-IT')}</div>` : ''}
                                ${needsVerifiche && mezzo.scadenza_verifiche_periodiche ? `<div><strong>🔍 Verifiche Periodiche:</strong> ${new Date(mezzo.scadenza_verifiche_periodiche).toLocaleDateString('it-IT')}</div>` : ''}
                            </div>
                            
                            ${mezzo.documenti && mezzo.documenti.length > 0 ? `
                                <div style="margin-top: 12px; padding-top: 12px; border-top: 2px solid #dee2e6;">
                                    <div style="font-size: 14px; font-weight: 700; color: #495057; margin-bottom: 8px;">📎 Documenti (${mezzo.documenti.length})</div>
                                    <div style="font-size: 13px; line-height: 1.8;">
                                        ${mezzo.documenti.map(doc => `
                                            <div style="margin-bottom: 6px; padding: 6px; background: rgba(255,255,255,0.8); border-radius: 4px;">
                                                📄 <a href="${doc.url}" target="_blank" style="color: #1976d2; text-decoration: none; font-weight: 600;">${doc.name}</a>
                                                ${doc.expires_at ? `<br><span style="font-size: 12px; color: #616161;">Scadenza: ${new Date(doc.expires_at).toLocaleDateString('it-IT')}</span>` : ''}
                                            </div>
                                        `).join('')}
                                    </div>
                                </div>
                            ` : ''}
                        </div>
                    `;
                });
                
                contentHTML += `</div></div>`;
            }
            
            // 🔧 SEZIONE ATTREZZATURE
            const attrezzature = aziendaData.attrezzature;
            if (attrezzature && attrezzature.length > 0) {
                contentHTML += `
                    <div style="margin-top: 30px; padding: 20px; background: linear-gradient(135deg, #e8f4f8 0%, #f0f8fa 100%); border-radius: 8px; border-left: 5px solid #17a2b8; box-shadow: 0 2px 8px rgba(0,0,0,0.08);">
                        <h5 style="margin: 0 0 20px 0; color: #00838f; font-size: 18px; font-weight: 700; border-bottom: 2px solid #17a2b8; padding-bottom: 8px;">🔧 ATTREZZATURE ASSEGNATE (${attrezzature.length})</h5>
                        <div style="display: grid; grid-template-columns: repeat(auto-fit, minmax(260px, 1fr)); gap: 15px;">
                `;
                
                attrezzature.forEach(attrezzo => {
                    // Check scadenza revisione
                    let revisioneWarning = '';
                    let bgColor = 'white';
                    let borderColor = '#90a4ae';
                    
                    if (attrezzo.data_revisione) {
                        const oggi = new Date();
                        const revisioneDate = new Date(attrezzo.data_revisione);
                        const diffDays = Math.ceil((revisioneDate - oggi) / (1000 * 60 * 60 * 24));
                        
                        if (diffDays < 0) {
                            revisioneWarning = `<div style="background: #ffcdd2; color: #b71c1c; padding: 8px; border-radius: 4px; font-size: 13px; margin-top: 8px; font-weight: 700;">⚠️ Revisione scaduta da ${Math.abs(diffDays)} giorni</div>`;
                            bgColor = '#ffebee';
                            borderColor = '#d32f2f';
                        } else if (diffDays <= 30) {
                            revisioneWarning = `<div style="background: #fff3e0; color: #e65100; padding: 8px; border-radius: 4px; font-size: 13px; margin-top: 8px; font-weight: 700;">⏰ Revisione tra ${diffDays} giorni</div>`;
                            bgColor = '#fffbf0';
                            borderColor = '#f57c00';
                        }
                    }
                    
                    contentHTML += `
                        <div style="background: ${bgColor}; border: 2px solid ${borderColor}; border-radius: 8px; padding: 16px; box-shadow: 0 2px 8px rgba(0,0,0,0.1);">
                            <div style="font-weight: 700; font-size: 16px; color: #212529; margin-bottom: 8px;">
                                🔧 ${attrezzo.descrizione}
                            </div>
                            ${attrezzo.data_revisione ? `
                                <div style="font-size: 14px; color: #495057; background: rgba(255,255,255,0.7); padding: 8px; border-radius: 4px; margin-bottom: 8px;">
                                    <strong>📅 Prossima revisione:</strong> ${new Date(attrezzo.data_revisione).toLocaleDateString('it-IT')}
                                </div>
                            ` : ''}
                            ${revisioneWarning}
                            <div style="font-size: 13px; color: #616161; margin-top: 10px; padding: 6px; background: rgba(255,255,255,0.5); border-radius: 4px;">
                                📅 Assegnato: ${new Date(attrezzo.data_assegnazione).toLocaleDateString('it-IT')}
                            </div>
                        </div>
                    `;
                });
                
                contentHTML += `</div></div>`;
            }
            
            // Note azienda se presenti
            if (azienda.note) {
                contentHTML += `
                    <div style="margin-top: 12px; padding: 8px; background: #e7f3ff; border-radius: 4px; border-left: 3px solid #2196f3;">
                        <div style="font-size: 11px; font-weight: bold; color: #1565c0;">💬 Note:</div>
                        <div style="font-size: 11px; color: #495057; margin-top: 2px;">${azienda.note}</div>
                    </div>
                `;
            }
            
            contentHTML += `</div></div>`;
        });
    } else {
        contentHTML += `
            <div style="background: #f8f9fa; padding: 20px; border-radius: 6px; text-align: center; color: #666;">
                <p style="margin: 0; font-size: 16px;">🏢 Nessuna azienda assegnata</p>
                <p style="margin: 5px 0 0 0; font-size: 14px;">Usa la sezione "Assegnazioni" per assegnare aziende al cantiere</p>
            </div>
        `;
    }
    
    // Footer con azioni
    contentHTML += `
        <div style="background: #f8f9fa; padding: 15px; border-radius: 6px; margin-top: 20px; text-align: center;">
            <div style="color: #28a745; font-size: 12px; margin-bottom: 10px;">
                ✅ Dati reali caricati dal database in tempo reale
            </div>
            <button onclick="closeCantiereDetailsModal()" style="background: #6c757d; color: white; border: none; padding: 8px 16px; border-radius: 4px; cursor: pointer; margin-right: 10px;">Chiudi</button>
            <button onclick="exportCantiereDetails(${cantiere.id})" style="background: #28a745; color: white; border: none; padding: 8px 16px; border-radius: 4px; cursor: pointer;">📊 Esporta Report</button>
        </div>
    `;
    
    contentDiv.innerHTML = contentHTML;
}

// 🚀 FUNZIONE FALLBACK: Dati demo se AJAX fallisce
function generateFallbackCantiereDetails(cantiereId) {
    console.log('📋 Generazione dati demo per cantiere:', cantiereId);
    
    // Trova il cantiere dai dati PHP già disponibili
    const cantieri = <?php echo json_encode(getAllCantieri()); ?>;
    const cantiere = cantieri.find(c => c.id == cantiereId);
    
    if (!cantiere) {
        displayCantiereDetailsError('Cantiere non trovato nei dati locali');
        return;
    }
    
    // Genera dati demo basati sul cantiere reale
    const simulatedData = {
        success: true,
        cantiere: {
            id: cantiere.id,
            nome: cantiere.nome,
            descrizione: cantiere.descrizione || 'Descrizione demo',
            stato: cantiere.stato,
            data_inizio: cantiere.data_inizio,
            data_fine: cantiere.data_fine,
            data_creazione: cantiere.data_creazione,
            aziende_assegnate: parseInt(cantiere.aziende_assegnate)
        },
        statistiche_globali: {
            totale_aziende: parseInt(cantiere.aziende_assegnate),
            totale_operai: Math.floor(Math.random() * 20) + 5,
            operai_con_formazioni: Math.floor(Math.random() * 15) + 3,
            percentuali: {
                antincendio: Math.floor(Math.random() * 60) + 20,
                primo_soccorso: Math.floor(Math.random() * 60) + 20,
                preposti: Math.floor(Math.random() * 60) + 20
            },
            competenze_conteggi: {
                antincendio: Math.floor(Math.random() * 10) + 2,
                primo_soccorso: Math.floor(Math.random() * 10) + 2,
                preposti: Math.floor(Math.random() * 10) + 2
            },
            conforme: Math.random() > 0.5,
            conformita_percentuale: Math.floor(Math.random() * 60) + 30
        },
        aziende: [
            {
                azienda: {
                    id: 1,
                    nome: "Edilizia Demo S.r.l.",
                    email: "demo@ediliziademo.it",
                    tipo: "Lavoro",
                    data_assegnazione: "2024-01-15 10:30:00",
                    conformita_percentuale: 75.0,
                    operai_totali: 4,
                    operai_con_formazioni: 3,
                    note: "Dati demo generati automaticamente"
                },
                operai: [
                    {
                        id: 1,
                        nome: "Mario",
                        cognome: "Rossi",
                        nome_completo: "Mario Rossi",
                        eta: 39,
                        data_assegnazione: "2024-01-15 10:30:00",
                        competenze: ["antincendio", "primo_soccorso"],
                        ha_formazioni: true,
                        formazioni: {
                            antincendio: true,
                            primo_soccorso: true,
                            preposti: false
                        }
                    },
                    {
                        id: 2,
                        nome: "Giuseppe",
                        cognome: "Bianchi",
                        nome_completo: "Giuseppe Bianchi",
                        eta: 46,
                        data_assegnazione: "2024-01-15 10:30:00",
                        competenze: ["antincendio", "preposti"],
                        ha_formazioni: true,
                        formazioni: {
                            antincendio: true,
                            primo_soccorso: false,
                            preposti: true
                        }
                    }
                ]
            }
        ],
        timestamp: new Date().toLocaleString('it-IT'),
        timezone: 'Europe/Rome'
    };
    
    // Aggiungi flag demo
    simulatedData._demo = true;
    
    displayCantiereDetailsContent(simulatedData);
}

// 🚀 FUNZIONE PER EXPORT REPORT CANTIERE
// ================== PDF EXPORT FUNCTIONALITY ==================

// Global variable to store cantiere data for export
window.currentCantiereData = null;

function exportCantiereDetails(cantiereId) {
    console.log('📊 Avvio esportazione PDF per cantiere:', cantiereId);
    
    // Check if jsPDF and html2canvas are loaded
    if (typeof window.jspdf === 'undefined' || typeof html2canvas === 'undefined') {
        console.error('❌ Librerie PDF non caricate');
        alert('⚠️ Errore: Le librerie necessarie per l\'esportazione PDF non sono state caricate.\n\nRiprova tra qualche secondo.');
        return;
    }
    
    // Check if we have data
    if (!window.currentCantiereData || window.currentCantiereData.cantiere.id != cantiereId) {
        console.error('❌ Dati cantiere non disponibili');
        alert('⚠️ Errore: Dati del cantiere non disponibili.\n\nChiudi e riapri il modal per ricaricare i dati.');
        return;
    }
    
    // Show loading indicator
    const originalButton = event.target;
    const originalText = originalButton.innerHTML;
    originalButton.innerHTML = '⏳ Generazione PDF...';
    originalButton.disabled = true;
    
    // Generate PDF
    generateCantierePDF(window.currentCantiereData)
        .then(() => {
            console.log('✅ PDF generato con successo');
            originalButton.innerHTML = originalText;
            originalButton.disabled = false;
        })
        .catch(error => {
            console.error('❌ Errore generazione PDF:', error);
            alert('⚠️ Errore durante la generazione del PDF.\n\nDettagli: ' + error.message);
            originalButton.innerHTML = originalText;
            originalButton.disabled = false;
        });
}

async function generateCantierePDF(data) {
    const { jsPDF } = window.jspdf;
    const cantiere = data.cantiere;
    const stats = data.statistiche_globali;
    const aziende = data.aziende;
    
    // Create PDF document (A4 format)
    const pdf = new jsPDF({
        orientation: 'portrait',
        unit: 'mm',
        format: 'a4'
    });
    
    const pageWidth = pdf.internal.pageSize.getWidth();
    const pageHeight = pdf.internal.pageSize.getHeight();
    const margin = 15;
    const contentWidth = pageWidth - (2 * margin);
    let currentY = margin;
    
    console.log('📄 Creazione PDF - Dimensioni pagina:', pageWidth, 'x', pageHeight);
    
    // === HEADER WITH LOGO ===
    try {
        const logoUrl = 'https://cogei.provasiti.it/cogei/wp-content/uploads/2023/01/logo_blu.png';
        console.log('🖼️ Caricamento logo da:', logoUrl);
        
        // Load logo with proper dimensions
        const logoResult = await loadImageAsBase64WithDimensions(logoUrl);
        
        // Calculate proper aspect ratio - max width 50mm
        const maxLogoWidth = 50;
        const aspectRatio = logoResult.height / logoResult.width;
        const logoWidth = maxLogoWidth;
        const logoHeight = logoWidth * aspectRatio;
        const logoX = (pageWidth - logoWidth) / 2;
        
        pdf.addImage(logoResult.dataURL, 'PNG', logoX, currentY, logoWidth, logoHeight);
        currentY += logoHeight + 10;
    } catch (error) {
        console.warn('⚠️ Impossibile caricare il logo:', error);
        // Continue without logo
        currentY += 5;
    }
    
    // === TITLE ===
    pdf.setFontSize(22);
    pdf.setFont('helvetica', 'bold');
    pdf.setTextColor(0, 102, 162); // #0066a2
    pdf.text('Report Cantiere', pageWidth / 2, currentY, { align: 'center' });
    currentY += 8;
    
    // === METADATA ===
    pdf.setFontSize(11);
    pdf.setFont('helvetica', 'bold');
    pdf.setTextColor(33, 37, 41); // Darker text for better readability
    pdf.text(cantiere.nome, pageWidth / 2, currentY, { align: 'center' });
    currentY += 6;
    
    pdf.setFontSize(9);
    pdf.setFont('helvetica', 'normal');
    pdf.setTextColor(108, 117, 125); // #6c757d - gray
    
    const metadata = [
        `ID: #${cantiere.id}`,
        `Data generazione: ${new Date().toLocaleDateString('it-IT')} ${new Date().toLocaleTimeString('it-IT', { hour: '2-digit', minute: '2-digit' })}`
    ];
    
    metadata.forEach(line => {
        pdf.text(line, pageWidth / 2, currentY, { align: 'center' });
        currentY += 4;
    });
    
    currentY += 6;
    
    // Add separator line with gradient effect
    pdf.setDrawColor(23, 162, 184); // #17a2b8 - info color
    pdf.setLineWidth(0.8);
    pdf.line(margin, currentY, pageWidth - margin, currentY);
    currentY += 10;
    
    // === INFORMAZIONI GENERALI ===
    pdf.setFillColor(248, 249, 250); // Light gray background
    pdf.rect(margin, currentY - 3, contentWidth, 8, 'F');
    
    pdf.setFontSize(12);
    pdf.setFont('helvetica', 'bold');
    pdf.setTextColor(0, 102, 162);
    pdf.text('INFORMAZIONI GENERALI', margin + 2, currentY + 2);
    currentY += 9;
    
    pdf.setFontSize(9);
    pdf.setFont('helvetica', 'normal');
    pdf.setTextColor(33, 37, 41);
    
    const generalInfo = [
        ['Nome Cantiere:', cantiere.nome],
        ['Descrizione:', cantiere.descrizione || 'Nessuna descrizione'],
        ['Stato:', cantiere.stato.toUpperCase()],
        ['Data Inizio:', cantiere.data_inizio ? new Date(cantiere.data_inizio).toLocaleDateString('it-IT') : 'Non definita'],
        ['Data Fine:', cantiere.data_fine ? new Date(cantiere.data_fine).toLocaleDateString('it-IT') : 'Non definita'],
        ['Data Creazione:', new Date(cantiere.data_creazione).toLocaleDateString('it-IT')]
    ];
    
    generalInfo.forEach(([label, value]) => {
        pdf.setFont('helvetica', 'bold');
        pdf.setTextColor(73, 80, 87); // Darker gray for labels
        pdf.text(label, margin + 2, currentY);
        pdf.setFont('helvetica', 'normal');
        pdf.setTextColor(33, 37, 41); // Dark for values
        
        // Handle long text with wrapping
        const labelWidth = pdf.getTextWidth(label) + 3;
        const maxWidth = contentWidth - labelWidth - 2;
        const lines = pdf.splitTextToSize(value, maxWidth);
        pdf.text(lines, margin + labelWidth + 2, currentY);
        currentY += 5 * lines.length;
        
        if (currentY > pageHeight - 30) {
            pdf.addPage();
            currentY = margin;
        }
    });
    
    currentY += 6;
    
    // === STATISTICHE ===
    pdf.setFillColor(248, 249, 250);
    pdf.rect(margin, currentY - 3, contentWidth, 8, 'F');
    
    pdf.setFontSize(12);
    pdf.setFont('helvetica', 'bold');
    pdf.setTextColor(0, 102, 162);
    pdf.text('STATISTICHE', margin + 2, currentY + 2);
    currentY += 9;
    
    pdf.setFontSize(9);
    pdf.setFont('helvetica', 'normal');
    
    const statsInfo = [
        ['Aziende Assegnate:', `${stats.totale_aziende}`],
        ['Operai Totali:', `${stats.totale_operai}`],
        ['Operai con Formazione:', `${stats.operai_con_formazioni} (${stats.conformita_percentuale}%)`],
        ['Mezzi:', `${stats.totale_mezzi || 0}`],
        ['Attrezzature:', `${stats.totale_attrezzature || 0}`]
    ];
    
    statsInfo.forEach(([label, value]) => {
        pdf.setFont('helvetica', 'bold');
        pdf.setTextColor(73, 80, 87);
        pdf.text(label, margin + 2, currentY);
        pdf.setFont('helvetica', 'normal');
        pdf.setTextColor(0, 123, 255); // Blue for numbers
        const labelWidth = pdf.getTextWidth(label) + 3;
        pdf.text(value, margin + labelWidth + 2, currentY);
        currentY += 5;
    });
    
    currentY += 6;
    
    // === CONFORMITÀ ===
    const isConforme = stats.conforme;
    pdf.setFillColor(isConforme ? 212 : 255, isConforme ? 237 : 243, isConforme ? 218 : 205);
    pdf.rect(margin, currentY - 3, contentWidth, 8, 'F');
    
    pdf.setFontSize(12);
    pdf.setFont('helvetica', 'bold');
    pdf.setTextColor(isConforme ? 21 : 133, isConforme ? 87 : 100, isConforme ? 36 : 4);
    pdf.text(isConforme ? 'CANTIERE CONFORME' : 'ATTENZIONE: VERIFICA CONFORMITA', margin + 2, currentY + 2);
    currentY += 9;
    
    pdf.setFontSize(9);
    pdf.setFont('helvetica', 'normal');
    
    const conformitaInfo = [
        ['Antincendio:', `${stats.percentuali.antincendio}% (${stats.competenze_conteggi.antincendio}/${stats.totale_operai})`, stats.percentuali.antincendio >= 30],
        ['Primo Soccorso:', `${stats.percentuali.primo_soccorso}% (${stats.competenze_conteggi.primo_soccorso}/${stats.totale_operai})`, stats.percentuali.primo_soccorso >= 30],
        ['Preposti:', `${stats.percentuali.preposti}% (${stats.competenze_conteggi.preposti}/${stats.totale_operai})`, stats.percentuali.preposti >= 30]
    ];
    
    conformitaInfo.forEach(([label, value, ok]) => {
        pdf.setFont('helvetica', 'bold');
        pdf.setTextColor(73, 80, 87);
        pdf.text(label, margin + 2, currentY);
        pdf.setFont('helvetica', 'normal');
        pdf.setTextColor(33, 37, 41);
        const labelWidth = pdf.getTextWidth(label) + 3;
        pdf.text(value, margin + labelWidth + 2, currentY);
        
        // Add status badge
        const valueWidth = pdf.getTextWidth(value);
        pdf.setFont('helvetica', 'bold');
        pdf.setFontSize(8);
        pdf.setTextColor(ok ? 40 : 220, ok ? 167 : 53, ok ? 69 : 69);
        pdf.text(ok ? '[OK]' : '[NON CONFORME]', margin + labelWidth + valueWidth + 5, currentY);
        pdf.setFontSize(9);
        
        currentY += 5;
    });
    
    currentY += 6;
    
    // === AZIENDE ASSEGNATE ===
    if (aziende && aziende.length > 0) {
        pdf.setFillColor(248, 249, 250);
        pdf.rect(margin, currentY - 3, contentWidth, 8, 'F');
        
        pdf.setFontSize(12);
        pdf.setFont('helvetica', 'bold');
        pdf.setTextColor(0, 102, 162);
        pdf.text(`AZIENDE E RISORSE ASSEGNATE (${aziende.length})`, margin + 2, currentY + 2);
        currentY += 12;
        
        aziende.forEach((aziendaData, index) => {
            const azienda = aziendaData.azienda;
            const operai = aziendaData.operai;
            const mezzi = aziendaData.mezzi;
            const attrezzature = aziendaData.attrezzature;
            
            // Check if we need a new page for company header
            if (currentY > pageHeight - 40) {
                pdf.addPage();
                currentY = margin;
            }
            
            // Company header with gradient-style
            pdf.setFillColor(33, 150, 243);
            pdf.rect(margin, currentY, contentWidth, 22, 'F');
            
            pdf.setFontSize(11);
            pdf.setFont('helvetica', 'bold');
            pdf.setTextColor(255, 255, 255);
            pdf.text(`${index + 1}. ${azienda.nome}`, margin + 3, currentY + 5);
            
            pdf.setFontSize(8);
            pdf.setFont('helvetica', 'normal');
            pdf.text(`Email: ${azienda.email}  |  Tipo: ${azienda.tipo}`, margin + 3, currentY + 11);
            
            // Conformity badge
            const conformityColor = azienda.conformita_percentuale >= 70 ? [40, 167, 69] : 
                                   azienda.conformita_percentuale >= 40 ? [255, 193, 7] : [220, 53, 69];
            pdf.setFillColor(...conformityColor);
            pdf.roundedRect(margin + 3, currentY + 14, 35, 5, 1, 1, 'F');
            pdf.setFontSize(8);
            pdf.setFont('helvetica', 'bold');
            pdf.setTextColor(255, 255, 255);
            pdf.text(`Conformita: ${azienda.conformita_percentuale}%`, margin + 5, currentY + 17.5);
            
            currentY += 25;
            
            // OPERAI section
            if (operai && operai.length > 0) {
                if (currentY > pageHeight - 30) {
                    pdf.addPage();
                    currentY = margin;
                }
                
                pdf.setFontSize(10);
                pdf.setFont('helvetica', 'bold');
                pdf.setTextColor(0, 102, 162);
                pdf.text(`OPERAI ASSEGNATI (${operai.length})`, margin + 2, currentY);
                
                // Underline
                pdf.setDrawColor(23, 162, 184);
                pdf.setLineWidth(0.5);
                pdf.line(margin + 2, currentY + 1, margin + 2 + pdf.getTextWidth(`OPERAI ASSEGNATI (${operai.length})`), currentY + 1);
                
                currentY += 7;
                
                operai.forEach((operaio, idx) => {
                    if (currentY > pageHeight - 35) {
                        pdf.addPage();
                        currentY = margin;
                    }
                    
                    pdf.setFontSize(10);
                    pdf.setFont('helvetica', 'bold');
                    pdf.setTextColor(0, 0, 0);
                    pdf.text(`${idx + 1}. ${operaio.nome_completo}`, margin + 5, currentY);
                    currentY += 5;
                    
                    pdf.setFontSize(8);
                    pdf.setFont('helvetica', 'normal');
                    pdf.setTextColor(60, 60, 60);
                    
                    const operaioDetails = [
                        `   Eta: ${operaio.eta} anni`,
                        `   Assegnato: ${new Date(operaio.data_assegnazione).toLocaleDateString('it-IT')}`
                    ];
                    
                    if (operaio.ha_formazioni && operaio.competenze.length > 0) {
                        const competenzeText = operaio.competenze.map(c => {
                            if (c === 'antincendio') return 'Antincendio';
                            if (c === 'primo_soccorso') return 'Primo Soccorso';
                            if (c === 'preposti') return 'Preposti';
                            return c;
                        }).join(', ');
                        operaioDetails.push(`   Competenze: ${competenzeText}`);
                    } else {
                        operaioDetails.push(`   Competenze: Nessuna formazione registrata`);
                    }
                    
                    // Add roles if present
                    const ruoli = [];
                    if (operaio.ruoli.rspp) ruoli.push('RSPP');
                    if (operaio.ruoli.rls) ruoli.push('RLS');
                    if (ruoli.length > 0) {
                        operaioDetails.push(`   Ruoli: ${ruoli.join(', ')}`);
                    }
                    
                    // Add additional formations
                    const altreFormazioni = [];
                    if (operaio.formazioni.generale_specifica) altreFormazioni.push('Formazione Generale/Specifica');
                    if (operaio.formazioni.ple) altreFormazioni.push('PLE');
                    if (operaio.formazioni.carrelli) altreFormazioni.push('Carrelli');
                    if (altreFormazioni.length > 0) {
                        operaioDetails.push(`   Altre formazioni: ${altreFormazioni.join(', ')}`);
                    }
                    
                    // Add ALL documents with expiry dates
                    if (operaio.documenti && operaio.documenti.length > 0) {
                        operaioDetails.push(`   Documenti: ${operaio.documenti.length} disponibili`);
                        
                        // Add ALL documents with expiry information
                        operaio.documenti.forEach(doc => {
                            let docInfo = `     - ${doc.name}`;
                            
                            if (doc.expires_at) {
                                const scaduto = new Date(doc.expires_at) < new Date();
                                const inScadenza = !scaduto && 
                                    Math.ceil((new Date(doc.expires_at) - new Date()) / (1000 * 60 * 60 * 24)) <= 30;
                                
                                let status = '';
                                if (scaduto) status = ' [SCADUTO]';
                                else if (inScadenza) status = ' [In scadenza]';
                                else status = ' [Valido]';
                                
                                docInfo += `: Scadenza ${new Date(doc.expires_at).toLocaleDateString('it-IT')}${status}`;
                            }
                            
                            if (doc.emission_date) {
                                docInfo += ` - Emesso: ${new Date(doc.emission_date).toLocaleDateString('it-IT')}`;
                            }
                            
                            operaioDetails.push(docInfo);
                        });
                    }
                    
                    operaioDetails.forEach(detail => {
                        if (currentY > pageHeight - 10) {
                            pdf.addPage();
                            currentY = margin;
                        }
                        pdf.text(detail, margin + 5, currentY);
                        currentY += 4;
                    });
                    
                    currentY += 2;
                });
                
                currentY += 3;
            }
            
            // MEZZI section
            if (mezzi && mezzi.length > 0) {
                if (currentY > pageHeight - 30) {
                    pdf.addPage();
                    currentY = margin;
                }
                
                pdf.setFontSize(10);
                pdf.setFont('helvetica', 'bold');
                pdf.setTextColor(245, 124, 0);
                pdf.text(`MEZZI ASSEGNATI (${mezzi.length})`, margin + 2, currentY);
                
                // Underline
                pdf.setDrawColor(255, 193, 7);
                pdf.setLineWidth(0.5);
                pdf.line(margin + 2, currentY + 1, margin + 2 + pdf.getTextWidth(`MEZZI ASSEGNATI (${mezzi.length})`), currentY + 1);
                
                currentY += 7;
                
                mezzi.forEach((mezzo, idx) => {
                    if (currentY > pageHeight - 30) {
                        pdf.addPage();
                        currentY = margin;
                    }
                    
                    pdf.setFontSize(10);
                    pdf.setFont('helvetica', 'bold');
                    pdf.setTextColor(0, 0, 0);
                    
                    const tipologiaLabels = {
                        'AUTO': 'Auto',
                        'AUTOCARRO': 'Autocarro',
                        'AUTOCARRO_GRU': 'Autocarro con Gru',
                        'PLE': 'PLE',
                        'MEZZI_TERRA': 'Mezzi Movimenti Terra'
                    };
                    const tipologia = tipologiaLabels[mezzo.tipologia] || mezzo.tipologia;
                    
                    pdf.text(`${idx + 1}. ${tipologia} - ${mezzo.descrizione}`, margin + 5, currentY);
                    currentY += 5;
                    
                    pdf.setFontSize(8);
                    pdf.setFont('helvetica', 'normal');
                    pdf.setTextColor(60, 60, 60);
                    
                    const mezzoDetails = [
                        `   Targa: ${mezzo.targa}`
                    ];
                    
                    // Check for expiring dates
                    const oggi = new Date();
                    const warnings = [];
                    
                    if (mezzo.scadenza_revisione) {
                        const scadenzaDate = new Date(mezzo.scadenza_revisione);
                        const diffDays = Math.ceil((scadenzaDate - oggi) / (1000 * 60 * 60 * 24));
                        let status = '';
                        if (diffDays < 0) status = ' (SCADUTA!)';
                        else if (diffDays <= 30) status = ' (In scadenza)';
                        mezzoDetails.push(`   Revisione: ${scadenzaDate.toLocaleDateString('it-IT')}${status}`);
                    }
                    
                    if (mezzo.scadenza_assicurazione) {
                        const scadenzaDate = new Date(mezzo.scadenza_assicurazione);
                        const diffDays = Math.ceil((scadenzaDate - oggi) / (1000 * 60 * 60 * 24));
                        let status = '';
                        if (diffDays < 0) status = ' (SCADUTA!)';
                        else if (diffDays <= 30) status = ' (In scadenza)';
                        mezzoDetails.push(`   Assicurazione: ${scadenzaDate.toLocaleDateString('it-IT')}${status}`);
                    }
                    
                    if (mezzo.scadenza_verifiche_periodiche) {
                        const scadenzaDate = new Date(mezzo.scadenza_verifiche_periodiche);
                        const diffDays = Math.ceil((scadenzaDate - oggi) / (1000 * 60 * 60 * 24));
                        let status = '';
                        if (diffDays < 0) status = ' (SCADUTE!)';
                        else if (diffDays <= 30) status = ' (In scadenza)';
                        mezzoDetails.push(`   Verifiche Periodiche: ${scadenzaDate.toLocaleDateString('it-IT')}${status}`);
                    }
                    
                    if (mezzo.documenti && mezzo.documenti.length > 0) {
                        mezzoDetails.push(`   Documenti: ${mezzo.documenti.length} disponibili`);
                    }
                    
                    mezzoDetails.forEach(detail => {
                        if (currentY > pageHeight - 10) {
                            pdf.addPage();
                            currentY = margin;
                        }
                        pdf.text(detail, margin + 5, currentY);
                        currentY += 4;
                    });
                    
                    currentY += 2;
                });
                
                currentY += 3;
            }
            
            // ATTREZZATURE section
            if (attrezzature && attrezzature.length > 0) {
                if (currentY > pageHeight - 30) {
                    pdf.addPage();
                    currentY = margin;
                }
                
                pdf.setFontSize(10);
                pdf.setFont('helvetica', 'bold');
                pdf.setTextColor(0, 131, 143);
                pdf.text(`ATTREZZATURE ASSEGNATE (${attrezzature.length})`, margin + 2, currentY);
                
                // Underline
                pdf.setDrawColor(23, 162, 184);
                pdf.setLineWidth(0.5);
                pdf.line(margin + 2, currentY + 1, margin + 2 + pdf.getTextWidth(`ATTREZZATURE ASSEGNATE (${attrezzature.length})`), currentY + 1);
                
                currentY += 7;
                
                attrezzature.forEach((attrezzo, idx) => {
                    if (currentY > pageHeight - 25) {
                        pdf.addPage();
                        currentY = margin;
                    }
                    
                    pdf.setFontSize(10);
                    pdf.setFont('helvetica', 'bold');
                    pdf.setTextColor(0, 0, 0);
                    pdf.text(`${idx + 1}. ${attrezzo.descrizione}`, margin + 5, currentY);
                    currentY += 5;
                    
                    pdf.setFontSize(8);
                    pdf.setFont('helvetica', 'normal');
                    pdf.setTextColor(60, 60, 60);
                    
                    const attrezzoDetails = [
                        `   Assegnato: ${new Date(attrezzo.data_assegnazione).toLocaleDateString('it-IT')}`
                    ];
                    
                    if (attrezzo.data_revisione) {
                        const revisioneDate = new Date(attrezzo.data_revisione);
                        const oggi = new Date();
                        const diffDays = Math.ceil((revisioneDate - oggi) / (1000 * 60 * 60 * 24));
                        let status = '';
                        if (diffDays < 0) status = ` (SCADUTA da ${Math.abs(diffDays)} giorni!)`;
                        else if (diffDays <= 30) status = ` (Tra ${diffDays} giorni)`;
                        attrezzoDetails.push(`   Prossima revisione: ${revisioneDate.toLocaleDateString('it-IT')}${status}`);
                    }
                    
                    attrezzoDetails.forEach(detail => {
                        if (currentY > pageHeight - 10) {
                            pdf.addPage();
                            currentY = margin;
                        }
                        pdf.text(detail, margin + 5, currentY);
                        currentY += 4;
                    });
                    
                    currentY += 2;
                });
                
                currentY += 3;
            }
            
            // Add notes if present
            if (azienda.note) {
                if (currentY > pageHeight - 20) {
                    pdf.addPage();
                    currentY = margin;
                }
                
                pdf.setFontSize(9);
                pdf.setFont('helvetica', 'bold');
                pdf.setTextColor(21, 101, 192);
                pdf.text(`Note:`, margin + 2, currentY);
                currentY += 4;
                
                pdf.setFontSize(8);
                pdf.setFont('helvetica', 'normal');
                pdf.setTextColor(60, 60, 60);
                const noteLines = pdf.splitTextToSize(azienda.note, contentWidth - 10);
                noteLines.forEach(line => {
                    if (currentY > pageHeight - 10) {
                        pdf.addPage();
                        currentY = margin;
                    }
                    pdf.text(line, margin + 5, currentY);
                    currentY += 4;
                });
            }
            
            currentY += 5;
            
            // Add separator between companies
            if (index < aziende.length - 1) {
                if (currentY > pageHeight - 15) {
                    pdf.addPage();
                    currentY = margin;
                }
                pdf.setDrawColor(200, 200, 200);
                pdf.setLineWidth(0.5);
                pdf.line(margin, currentY, pageWidth - margin, currentY);
                currentY += 8;
            }
        });
    }
    
    // === FOOTER ===
    const totalPages = pdf.internal.getNumberOfPages();
    for (let i = 1; i <= totalPages; i++) {
        pdf.setPage(i);
        pdf.setFontSize(8);
        pdf.setFont('helvetica', 'normal');
        pdf.setTextColor(150, 150, 150);
        pdf.text(
            `Report generato da Cogei HSE - Pagina ${i} di ${totalPages}`,
            pageWidth / 2,
            pageHeight - 10,
            { align: 'center' }
        );
    }
    
    // === SAVE PDF ===
    const fileName = `report_cantiere_${cantiere.nome.replace(/[^a-z0-9]/gi, '_')}_${new Date().toISOString().split('T')[0]}.pdf`;
    console.log('💾 Salvataggio PDF:', fileName);
    pdf.save(fileName);
}

// Helper function to load image as base64 with dimensions
function loadImageAsBase64WithDimensions(url) {
    return new Promise((resolve, reject) => {
        const img = new Image();
        img.crossOrigin = 'Anonymous';
        
        img.onload = function() {
            const canvas = document.createElement('canvas');
            canvas.width = img.width;
            canvas.height = img.height;
            const ctx = canvas.getContext('2d');
            ctx.drawImage(img, 0, 0);
            
            try {
                const dataURL = canvas.toDataURL('image/png');
                resolve({
                    dataURL: dataURL,
                    width: img.width,
                    height: img.height
                });
            } catch (e) {
                console.warn('Errore conversione immagine:', e);
                reject(e);
            }
        };
        
        img.onerror = function(e) {
            console.warn('Errore caricamento immagine:', e);
            reject(new Error('Impossibile caricare l\'immagine'));
        };
        
        // Try to load the image
        img.src = url;
        
        // Timeout after 5 seconds
        setTimeout(() => {
            if (!img.complete) {
                reject(new Error('Timeout caricamento immagine'));
            }
        }, 5000);
    });
}

// Helper function to load image as base64 (legacy)
function loadImageAsBase64(url) {
    return loadImageAsBase64WithDimensions(url).then(result => result.dataURL);
}

// ================== TEST CONNESSIONE AJAX ==================
function testAjaxConnection() {
    console.log('🔧 Test connessione AJAX endpoint...');
    
    const ajaxUrl = '/cogei/ajax_fornitori/get_cantiere_details.php';
    
    fetch(ajaxUrl, {
        method: 'POST',
        body: new FormData(),
        headers: {
            'X-Requested-With': 'XMLHttpRequest'
        }
    })
    .then(response => {
        console.log('📡 Risposta test:', response.status, response.statusText);
        if (response.status === 400) {
            console.log('✅ Endpoint trovato! (Errore 400 = parametri mancanti, ma il file esiste)');
        } else if (response.status === 404) {
            console.log('❌ Endpoint NON trovato! Verifica il percorso del file.');
        } else {
            console.log('⚠️ Risposta inaspettata dal server');
        }
        return response.text();
    })
    .then(data => {
        console.log('📄 Contenuto risposta:', data.substring(0, 200) + '...');
    })
    .catch(error => {
        console.error('❌ Errore test connessione:', error);
    });
}

// ================== FUNZIONI ORIGINALI PER TAB RICHIESTE ==================

function togglePersonaleDetails(richiestaId) {
    var detailsRow = document.getElementById('personale-details-' + richiestaId);
    if (detailsRow) {
        if (detailsRow.style.display === 'none') {
            detailsRow.style.display = '';
        } else {
            detailsRow.style.display = 'none';
        }
    }
}
function exportTableToCSV() {
    var exportBtn = document.querySelector('button[onclick="exportTableToCSV()"]');
    var originalText = exportBtn.innerHTML;
    exportBtn.innerHTML = '⏳ Generando CSV...';
    exportBtn.disabled = true;
    
    setTimeout(function() {
        try {
            generateClientSideCSV();
        } catch (e) {
            console.error('Errore generazione CSV:', e);
            alert('Errore durante la generazione del CSV. Riprova più tardi.');
        }
        
        exportBtn.innerHTML = originalText;
        exportBtn.disabled = false;
    }, 1000);
}

function generateClientSideCSV() {
    var headers = [
        'ID Richiesta', 'Ragione Sociale', 'Email', 'P.IVA', 'DVR', 'RCT', 
        'Personale', 'Stato Richiesta HSE', 
        'Accesso al Cantiere', 'Cantieri Assegnati', 'Assegnazioni Operai'
    ];
    
    var csvContent = "\uFEFF";
    csvContent += headers.map(h => '"' + h + '"').join(',') + '\n';
    
    var rows = document.querySelectorAll('.cantiere-row');
    var exportedRows = 0;
    
    rows.forEach(function(row) {
        var isVisible = window.getComputedStyle(row).display !== 'none';
        if (!isVisible) return;
        
        var cells = row.querySelectorAll('td');
        if (cells.length < 14) return;
        
        var rowData = [];
        
        for (var i = 0; i < 13; i++) {
            var cellText = cells[i].textContent.trim();
            if (i >= 4 && i <= 7) { // File columns
                cellText = cells[i].querySelector('a') ? 'Caricato' : 'Non caricato';
            }
            rowData.push('"' + cellText.replace(/"/g, '""') + '"');
        }
        
        // Cantieri assegnati (colonna 13)
        var cantieriText = cells[12].textContent.trim().replace(/\s+/g, ' ');
        rowData.push('"' + cantieriText.replace(/"/g, '""') + '"');
        
        // 🚀 NUOVO: Assegnazioni operai (colonna 14)
        var operaiText = cells[13].textContent.trim().replace(/\s+/g, ' ');
        rowData.push('"' + operaiText.replace(/"/g, '""') + '"');
        
        csvContent += rowData.join(',') + '\n';
        exportedRows++;
    });
    
    var blob = new Blob([csvContent], { type: 'text/csv;charset=utf-8;' });
    var link = document.createElement('a');
    
    if (link.download !== undefined) {
        var url = URL.createObjectURL(blob);
        link.setAttribute('href', url);
        link.setAttribute('download', 'richieste_cantiere_' + new Date().toISOString().slice(0,19).replace(/:/g, '-') + '.csv');
        link.style.visibility = 'hidden';
        document.body.appendChild(link);
        link.click();
        document.body.removeChild(link);
        
        setTimeout(function() {
            var totalRows = document.querySelectorAll('.cantiere-row').length;
            var message = "✅ File CSV scaricato con successo!\n\n";
            message += "📊 " + exportedRows + " richieste esportate";
            if (exportedRows < totalRows) {
                message += "\n🔍 " + (totalRows - exportedRows) + " righe nascoste dai filtri";
            }
            alert(message);
        }, 500);
    } else {
        alert('❌ Il tuo browser non supporta il download automatico dei file');
    }
}

function performSearch() {
    var searchInput = document.getElementById("searchInput");
    var searchTerm = searchInput ? searchInput.value : "";
    
    if (!searchTerm || searchTerm.trim() === "" || searchTerm === "Scrivi per cercare...") {
        updateFilters();
        return;
    }
    
    var rows = document.querySelectorAll(".cantiere-row");
    var visibleAfterSearch = 0;
    
    rows.forEach(function(row) {
        var rowText = row.textContent.toLowerCase();
        var matchesSearch = rowText.includes(searchTerm.toLowerCase());
        
        if (matchesSearch && shouldRowBeVisible(row)) {
            row.style.display = "";
            var richiestaId = row.querySelector('button[onclick*="togglePersonaleDetails"]');
            if (richiestaId) {
                var idMatch = richiestaId.getAttribute('onclick').match(/\d+/);
                if (idMatch) {
                    var detailsRow = document.getElementById('personale-details-' + idMatch[0]);
                    if (detailsRow) detailsRow.style.display = 'none';
                }
            }
            visibleAfterSearch++;
        } else {
            row.style.display = "none";
            var richiestaId = row.querySelector('button[onclick*="togglePersonaleDetails"]');
            if (richiestaId) {
                var idMatch = richiestaId.getAttribute('onclick').match(/\d+/);
                if (idMatch) {
                    var detailsRow = document.getElementById('personale-details-' + idMatch[0]);
                    if (detailsRow) detailsRow.style.display = 'none';
                }
            }
        }
    });
    
    updateActiveFiltersDisplay(visibleAfterSearch);
}

function shouldRowBeVisible(row) {
    var selectedHseStatuses = [];
    var hseCheckboxes = document.querySelectorAll("input[id^=hse_]:checked");
    hseCheckboxes.forEach(function(checkbox) {
        selectedHseStatuses.push(checkbox.id.replace("hse_", ""));
    });
    
    var abilitatoFilter = document.getElementById("filter_abilitato");
    var disabilitatoFilter = document.getElementById("filter_disabilitato");
    var showAbilitato = abilitatoFilter && abilitatoFilter.checked;
    var showDisabilitato = disabilitatoFilter && disabilitatoFilter.checked;
    
    if (selectedHseStatuses.length === 0 && !showAbilitato && !showDisabilitato) {
        return true;
    }
    
    if (selectedHseStatuses.length > 0) {
        var rowHseStatus = row.getAttribute("data-hse-status");
        if (selectedHseStatuses.indexOf(rowHseStatus) === -1) {
            return false;
        }
    }
    
    if (showAbilitato || showDisabilitato) {
        var rowAccesso = row.getAttribute("data-accesso");
        if (showAbilitato && showDisabilitato) {
            // Entrambi selezionati = mostra tutti
        } else if (showAbilitato && rowAccesso !== "abilitato") {
            return false;
        } else if (showDisabilitato && rowAccesso !== "disabilitato") {
            return false;
        }
    }
    
    return true;
}

function updateFilters() {
    var rows = document.querySelectorAll(".cantiere-row");
    var visibleCount = 0;
    
    rows.forEach(function(row) {
        if (shouldRowBeVisible(row)) {
            row.style.display = "";
            visibleCount++;
        } else {
            row.style.display = "none";
            var richiestaId = row.querySelector('button[onclick*="togglePersonaleDetails"]');
            if (richiestaId) {
                var idMatch = richiestaId.getAttribute('onclick').match(/\d+/);
                if (idMatch) {
                    var detailsRow = document.getElementById('personale-details-' + idMatch[0]);
                    if (detailsRow) detailsRow.style.display = 'none';
                }
            }
        }
    });
    
    var searchInput = document.getElementById("searchInput");
    var searchTerm = searchInput ? searchInput.value : "";
    
    if (searchTerm && searchTerm.trim() !== "" && searchTerm !== "Scrivi per cercare...") {
        performSearch();
    } else {
        updateActiveFiltersDisplay(visibleCount);
    }
}

function clearAllFilters() {
    var allCheckboxes = document.querySelectorAll("input[type=checkbox]");
    allCheckboxes.forEach(function(checkbox) {
        checkbox.checked = false;
    });
    
    var searchInput = document.getElementById("searchInput");
    if (searchInput) {
        searchInput.value = "";
    }
    
    var rows = document.querySelectorAll(".cantiere-row");
    rows.forEach(function(row) {
        row.style.display = "";
    });
    
    var detailsRows = document.querySelectorAll('[id^="personale-details-"]');
    detailsRows.forEach(function(row) {
        row.style.display = 'none';
    });
    
    var activeFiltersDiv = document.getElementById("active-filters");
    if (activeFiltersDiv) {
        activeFiltersDiv.style.display = "none";
    }
}

function updateActiveFiltersDisplay(visibleCount) {
    var selectedHseStatuses = [];
    var hseCheckboxes = document.querySelectorAll("input[id^=hse_]:checked");
    hseCheckboxes.forEach(function(checkbox) {
        selectedHseStatuses.push(checkbox.id.replace("hse_", ""));
    });
    
    var abilitatoFilter = document.getElementById("filter_abilitato");
    var disabilitatoFilter = document.getElementById("filter_disabilitato");
    var showAbilitato = abilitatoFilter && abilitatoFilter.checked;
    var showDisabilitato = disabilitatoFilter && disabilitatoFilter.checked;
    
    var activeFiltersDiv = document.getElementById("active-filters");
    var filterList = document.getElementById("filter-list");
    var filters = [];
    
    if (selectedHseStatuses.length > 0) {
        filters.push("Stati HSE: " + selectedHseStatuses.join(", "));
    }
    
    if (showAbilitato && showDisabilitato) {
        filters.push("Accesso Cantiere: Tutti");
    } else if (showAbilitato) {
        filters.push("Accesso Cantiere: Solo Abilitati");
    } else if (showDisabilitato) {
        filters.push("Accesso Cantiere: Solo Disabilitati");
    }
    
    var searchInput = document.getElementById("searchInput");
    var searchTerm = searchInput ? searchInput.value : "";
    
    if (searchTerm && searchTerm.trim() !== "" && searchTerm !== "Scrivi per cercare...") {
        filters.push('Ricerca: "' + searchTerm + '"');
    }
    
    if (filters.length > 0) {
        activeFiltersDiv.style.display = "block";
        filterList.textContent = filters.join(" | ") + " (" + visibleCount + " risultati)";
    } else {
        activeFiltersDiv.style.display = "none";
    }
}

// AUTO-HIDE MESSAGGI FEEDBACK CON COUNTDOWN
function hideFeedbackMessage() {
    var feedbackMessage = document.getElementById('feedback-message');
    var countdownElement = document.getElementById('countdown-seconds');
    
    if (feedbackMessage) {
        var secondsLeft = 10;
        
        var countdownInterval = setInterval(function() {
            secondsLeft--;
            if (countdownElement) {
                countdownElement.textContent = secondsLeft;
            }
            
            if (secondsLeft <= 0) {
                clearInterval(countdownInterval);
                
                feedbackMessage.style.transition = 'opacity 0.5s ease';
                feedbackMessage.style.opacity = '0';
                
                setTimeout(function() {
                    feedbackMessage.style.display = 'none';
                    
                    var currentUrl = new URL(window.location);
                    var urlChanged = false;
                    
                    var paramsToRemove = ['msg', 'action_type', 'target_user_id', 'user_email', 'user_name', 'cantiere_nome', 'cantiere_id', 'aziende_count', 'azienda_nome', 'aziende_rimosse', 'operai_rimossi', 'pos_rimossi'];
                    paramsToRemove.forEach(function(param) {
                        if (currentUrl.searchParams.has(param)) {
                            currentUrl.searchParams.delete(param);
                            urlChanged = true;
                        }
                    });
                    
                    if (urlChanged) {
                        window.history.replaceState({}, document.title, currentUrl.toString());
                    }
                }, 500);
            }
        }, 1000);
    }
}

// HELPER PER DEBUGGING
function debugCantieriSystem() {
    console.log('=== DEBUG SISTEMA CANTIERI ===');
    console.log('Tab attivo:', document.querySelector('.tab-button.active')?.id);
    console.log('Righe richieste:', document.querySelectorAll('.cantiere-row').length);
    console.log('Cantieri nel sistema:', document.querySelectorAll('.assignment-group').length);
    console.log('Aziende nell\'albo:', document.querySelectorAll('input[name="user_ids[]"]').length);
    console.log('Modal assignment visible:', document.getElementById('assignment-modal').style.display);
    console.log('Modal dettagli visible:', document.getElementById('cantiere-details-modal').style.display);
    
    // 🚀 NUOVO: Debug filtro aziende + assegnazioni operai
    var filtroCheckbox = document.getElementById('filter-solo-attive');
    var aziendeAttive = document.querySelectorAll('.azienda-option[data-attiva="1"]').length;
    var aziendeInattive = document.querySelectorAll('.azienda-option[data-attiva="0"]').length;
    
    console.log('🔍 Filtro aziende:');
    console.log('  - Checkbox attivo:', filtroCheckbox?.checked);
    console.log('  - Aziende attive:', aziendeAttive);
    console.log('  - Aziende inattive:', aziendeInattive);
    console.log('  - Totale:', aziendeAttive + aziendeInattive);
    
    // Debug assegnazioni operai
    var assegnazioniOperai = document.querySelectorAll('[style*="background: #fff3cd"]');
    console.log('👷 Assegnazioni operai visualizzate:', assegnazioniOperai.length);
    
    // 📡 Debug AJAX endpoint
    console.log('📡 Endpoint AJAX:');
    console.log('  - URL: /cogei/ajax_fornitori/get_cantiere_details.php');
    console.log('  - Testa connessione con: testAjaxConnection()');
    
    // 🆕 NUOVO: Debug modal cantieri
    console.log('🆕 Modal gestione cantieri:');
    console.log('  - Edit modal:', document.getElementById('edit-cantiere-modal').style.display);
    console.log('  - Delete modal:', document.getElementById('delete-cantiere-modal').style.display);
}

// ================== INIZIALIZZAZIONE ESTESA ==================

document.addEventListener("DOMContentLoaded", function() {
    // Inizializza stato tab
    showTab('richieste');
    
    // Inizializza filtri richieste
    var rows = document.querySelectorAll(".cantiere-row");
    rows.forEach(function(row) {
        row.style.display = "";
    });
    
    var activeFiltersDiv = document.getElementById("active-filters");
    if (activeFiltersDiv) {
        activeFiltersDiv.style.display = "none";
    }
    
    var searchInput = document.getElementById("searchInput");
    if (searchInput) {
        searchInput.value = "";
    }
    
    var detailsRows = document.querySelectorAll('[id^="personale-details-"]');
    detailsRows.forEach(function(row) {
        row.style.display = 'none';
    });
    
    // Auto-hide messaggi feedback
    hideFeedbackMessage();
    
    // Event listener per tab buttons
    var tabButtons = document.querySelectorAll('.tab-button');
    tabButtons.forEach(function(button) {
        button.addEventListener('click', function() {
            var tabName = this.id.replace('tab-', '');
            showTab(tabName);
        });
    });
    
    // 🚀 NUOVO: Event listener per checkbox aziende nel modal
    document.addEventListener('change', function(e) {
        if (e.target.name === 'user_ids[]') {
            updateSubmitButtonCounter();
        }
    });
    
    // 🆕 NUOVI: Event listeners per modal cantieri
    
    // Escape key per chiudere tutti i modal
    document.addEventListener('keydown', function(e) {
        if (e.key === 'Escape') {
            // Chiudi il modal visibile
            if (document.getElementById('assignment-modal').style.display === 'block') {
                closeAssignmentModal();
            } else if (document.getElementById('cantiere-details-modal').style.display === 'block') {
                closeCantiereDetailsModal();
            } else if (document.getElementById('edit-cantiere-modal').style.display === 'block') {
                closeEditCantiereModal();
            } else if (document.getElementById('delete-cantiere-modal').style.display === 'block') {
                closeDeleteCantiereModal();
            } else if (document.getElementById('status-details-modal') && document.getElementById('status-details-modal').style.display === 'block') {
                closeStatusDetailsModal();
            } else if (document.getElementById('cantiere-workers-modal') && document.getElementById('cantiere-workers-modal').style.display === 'block') {
                closeCantiereWorkersModal();
            }
        }
    });
    
    // Validazione form modifica cantiere
    var editForm = document.getElementById('edit-cantiere-form');
    if (editForm) {
        editForm.addEventListener('submit', function(e) {
            var nome = document.getElementById('edit-nome-cantiere').value.trim();
            var dataInizio = document.getElementById('edit-data-inizio').value;
            var dataFine = document.getElementById('edit-data-fine').value;
            
            if (!nome) {
                e.preventDefault();
                alert('⚠️ Il nome del cantiere è obbligatorio');
                return;
            }
            
            if (dataInizio && dataFine && new Date(dataFine) <= new Date(dataInizio)) {
                e.preventDefault();
                alert('⚠️ La data di fine deve essere successiva alla data di inizio');
                return;
            }
            
            if (!confirm('Confermi le modifiche al cantiere?')) {
                e.preventDefault();
            }
        });
    }
    
    // Validazione form cancellazione cantiere
    var deleteForm = document.getElementById('delete-cantiere-form');
    if (deleteForm) {
        deleteForm.addEventListener('submit', function(e) {
            var conferma = document.querySelector('input[name="conferma_cancellazione"]').value;
            
            if (conferma !== 'CANCELLA') {
                e.preventDefault();
                alert('⚠️ Per confermare la cancellazione, devi scrivere esattamente: CANCELLA');
                return;
            }
            
            var cantiereNome = document.getElementById('delete-cantiere-nome').textContent;
            if (!confirm(`⚠️ ULTIMA CONFERMA\n\nStai per cancellare definitivamente il cantiere "${cantiereNome}" e tutti i dati associati.\n\nQuesta azione è IRREVERSIBILE.\n\nProcedere?`)) {
                e.preventDefault();
            }
        });
    }
    
    // Migliora UX form cantieri
    var nomeCantiereInput = document.querySelector('input[name="nome_cantiere"]');
    if (nomeCantiereInput) {
        nomeCantiereInput.addEventListener('input', function() {
            if (this.value.length > 50) {
                this.style.borderColor = '#ffc107';
            } else if (this.value.length > 0) {
                this.style.borderColor = '#28a745';
            } else {
                this.style.borderColor = '#ddd';
            }
        });
    }
    
    // Validazione date cantieri
    var dataInizioInput = document.querySelector('input[name="data_inizio"]');
    var dataFineInput = document.querySelector('input[name="data_fine"]');
    
    if (dataInizioInput && dataFineInput) {
        function validateDates() {
            var dataInizio = new Date(dataInizioInput.value);
            var dataFine = new Date(dataFineInput.value);
            
            if (dataInizioInput.value && dataFineInput.value) {
                if (dataFine <= dataInizio) {
                    dataFineInput.style.borderColor = '#dc3545';
                    dataFineInput.title = 'La data di fine deve essere successiva alla data di inizio';
                } else {
                    dataFineInput.style.borderColor = '#28a745';
                    dataFineInput.title = '';
                }
            }
        }
        
        dataInizioInput.addEventListener('change', validateDates);
        dataFineInput.addEventListener('change', validateDates);
    }
    
    // Tooltip per stati cantieri
    var statusSpans = document.querySelectorAll('[title]');
    statusSpans.forEach(function(span) {
        span.addEventListener('mouseenter', function() {
            this.style.transform = 'scale(1.05)';
            this.style.transition = 'transform 0.2s ease';
        });
        
        span.addEventListener('mouseleave', function() {
            this.style.transform = 'scale(1)';
        });
    });
    
    // 🆕 NUOVO: Validazione in tempo reale campo conferma cancellazione
    var confermaCancellazioneInput = document.querySelector('input[name="conferma_cancellazione"]');
    if (confermaCancellazioneInput) {
        confermaCancellazioneInput.addEventListener('input', function() {
            var deleteButton = document.querySelector('#delete-cantiere-form button[type="submit"]');
            
            if (this.value === 'CANCELLA') {
                this.style.borderColor = '#28a745';
                this.style.backgroundColor = '#d4edda';
                deleteButton.style.backgroundColor = '#dc3545';
                deleteButton.disabled = false;
            } else {
                this.style.borderColor = '#dc3545';
                this.style.backgroundColor = '#f8d7da';
                deleteButton.style.backgroundColor = '#6c757d';
                deleteButton.disabled = true;
            }
        });
    }
    
    console.log('🏗️ Sistema Backend Cantieri caricato con tutte le funzionalità');
    console.log('🔍 Filtro aziende abilitate: READY');
    console.log('👷 Visualizzazione assegnazioni operai: READY');
    console.log('🔍 Modal dettagli cantiere: READY');
    console.log('✏️ Modal modifica cantiere: READY');
    console.log('🗑️ Modal cancellazione cantiere: READY');
    console.log('🔗 Gestione assegnazioni migliorata: READY');
    console.log('📡 Endpoint AJAX configurato: /cogei/ajax_fornitori/get_cantiere_details.php');
    
    // Test automatico connessione AJAX (opzionale)
    // testAjaxConnection();
    
    // 🚀 NUOVO: Event listener per modal dettagli cantiere
    const cantiereDetailsModal = document.getElementById('cantiere-details-modal');
    if (cantiereDetailsModal) {
        cantiereDetailsModal.addEventListener('click', function(e) {
            if (e.target === this) {
                closeCantiereDetailsModal();
            }
        });
    }
    
    // 🆕 NUOVO: Event listener per modal assegnazioni
    const assignmentModal = document.getElementById('assignment-modal');
    if (assignmentModal) {
        assignmentModal.addEventListener('click', function(e) {
            if (e.target === this) {
                closeAssignmentModal();
            }
        });
    }
});

// Aggiungi debug alla console per sviluppo
if (typeof console !== 'undefined') {
    console.log('🏗️ Sistema Gestione Cantieri Backend caricato correttamente');
    console.log('📡 Endpoint AJAX: /cogei/ajax_fornitori/get_cantiere_details.php');
    console.log('💡 Usa debugCantieriSystem() per informazioni di debug');
    console.log('🔧 Usa toggleFiltroAttive() per testare il filtro aziende');
    console.log('🔧 Usa testAjaxConnection() per testare l\'endpoint');
    console.log('👷 Assegnazioni operai per cantiere: IMPLEMENTATE');
    console.log('📊 Dettagli cantiere via AJAX: IMPLEMENTATI');
    console.log('✏️ Modifica cantieri: IMPLEMENTATA');
    console.log('🗑️ Cancellazione cantieri: IMPLEMENTATA');
    console.log('🔗 Gestione assegnazioni migliorata: IMPLEMENTATA');
    console.log('📄 Sistema richieste documenti: IMPLEMENTATO');
}

// ================== FUNZIONI RICHIESTE DOCUMENTI ==================

function openDocumentRequestModal(userId, aziendaName) {
    const modal = document.getElementById('document-request-modal');
    const userIdInput = document.getElementById('document-user-id');
    const aziendaNameSpan = document.getElementById('document-azienda-name');
    const notesTextarea = document.getElementById('document-richiesta-note');
    
    userIdInput.value = userId;
    aziendaNameSpan.textContent = aziendaName;
    notesTextarea.value = '';
    notesTextarea.focus();
    
    modal.style.display = 'block';
}

function closeDocumentRequestModal() {
    const modal = document.getElementById('document-request-modal');
    modal.style.display = 'none';
}

function submitDocumentRequest() {
    const form = document.getElementById('document-request-form');
    const notes = document.getElementById('document-richiesta-note').value.trim();
    
    if (!notes) {
        alert('⚠️ Inserisci una nota per la richiesta documenti');
        document.getElementById('document-richiesta-note').focus();
        return;
    }
    
    if (notes.length < 10) {
        alert('⚠️ La richiesta deve contenere almeno 10 caratteri');
        document.getElementById('document-richiesta-note').focus();
        return;
    }
    
    if (confirm('Confermi l\'invio della richiesta documenti all\'azienda?')) {
        form.submit();
    }
}

function cancelDocumentRequest(userId, aziendaName) {
    if (confirm(`Confermi la cancellazione della richiesta documenti per ${aziendaName}?\n\nQuesta azione rimuoverà definitivamente la nota richiesta.`)) {
        // Crea un form temporaneo per l'invio
        const form = document.createElement('form');
        form.method = 'POST';
        form.style.display = 'none';
        
        const actionInput = document.createElement('input');
        actionInput.type = 'hidden';
        actionInput.name = 'document_action';
        actionInput.value = 'cancel_request';
        
        const userIdInput = document.createElement('input');
        userIdInput.type = 'hidden';
        userIdInput.name = 'user_id';
        userIdInput.value = userId;
        
        form.appendChild(actionInput);
        form.appendChild(userIdInput);
        document.body.appendChild(form);
        form.submit();
    }
}
</script>
<style>
/* ================== STILI CSS ESTESI ================== */

.tab-button {
    transition: all 0.3s ease;
    font-weight: bold;
    font-size: 14px;
}

.tab-button:hover {
    background: #004d7a !important;
    transform: translateY(-2px);
    box-shadow: 0 4px 8px rgba(0, 102, 162, 0.3);
}

.tab-button.active {
    background: #0066a2 !important;
    box-shadow: 0 2px 8px rgba(0, 102, 162, 0.4);
}

.tab-content {
    animation: fadeIn 0.4s ease-in-out;
}

@keyframes fadeIn {
    from { opacity: 0; transform: translateY(10px); }
    to { opacity: 1; transform: translateY(0); }
}

/* ==================================================================
   CLASSE RIUTILIZZABILE: STILE ASSIGNMENTS-SUMMARY
   Questa classe è stata estratta dalla sezione #assignments-summary
   per garantire coerenza visiva tra:
   - #assignments-summary (sezione assegnazioni cantieri)
   - #cantiere-workers-modal (popup dettagli operai)
   - #status-details-modal (popup dettagli stato richiesta)
   - Schede operai in "Dettaglio Personale"
   ================================================================== */

/* Container principale con stile assignments-summary */
.assignments-summary-style {
    background: white;
    border: 2px solid #dee2e6;
    border-radius: 10px;
    margin-bottom: 25px;
    overflow: hidden;
    box-shadow: 0 4px 15px rgba(0,0,0,0.1);
    transition: all 0.3s ease;
}

.assignments-summary-style:hover {
    box-shadow: 0 6px 20px rgba(0,0,0,0.15);
    transform: translateY(-3px);
}

/* Header con gradiente blu */
.assignments-summary-style .summary-header {
    background: linear-gradient(135deg, #2196f3, #1976d2);
    color: white;
    padding: 20px;
}

/* Titolo header */
.assignments-summary-style .summary-title {
    margin: 0;
    font-size: 20px;
    font-weight: 700;
}

/* Badge informazioni */
.assignments-summary-style .summary-badge {
    background: rgba(255,255,255,0.25);
    padding: 6px 14px;
    border-radius: 20px;
    font-size: 13px;
    font-weight: 600;
    box-shadow: 0 2px 6px rgba(0,0,0,0.15);
}

/* Descrizione nel header */
.assignments-summary-style .summary-description {
    margin: 10px 0 0 0;
    font-size: 15px;
    opacity: 0.95;
    line-height: 1.5;
}

/* Contenuto body con padding */
.assignments-summary-style .summary-body {
    padding: 25px;
}

/* Grid per card */
.assignments-summary-style .summary-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(320px, 1fr));
    gap: 18px;
}

/* Card singola - MIGLIORATA per leggibilità */
.assignments-summary-style .summary-card {
    background: linear-gradient(135deg, #f8f9fa 0%, #ffffff 100%);
    border: 2px solid #e9ecef;
    border-radius: 10px;
    padding: 22px;
    position: relative;
    box-shadow: 0 2px 8px rgba(0,0,0,0.08);
    transition: all 0.3s ease;
    line-height: 1.8;
}

.assignments-summary-style .summary-card:hover {
    transform: translateY(-2px);
    box-shadow: 0 4px 12px rgba(0,0,0,0.12);
    border-color: #2196f3;
}

/* Titolo card - Font più grande e spacing migliorato */
.assignments-summary-style .summary-card-title {
    margin: 0 0 14px 0;
    color: #0066a2;
    padding-right: 30px;
    font-size: 19px;
    font-weight: 700;
    line-height: 1.4;
    letter-spacing: 0.3px;
}

/* Info testo in card - Font più leggibile */
.assignments-summary-style .summary-card-info {
    font-size: 15px;
    color: #495057;
    line-height: 1.8;
    margin-bottom: 8px;
}

.assignments-summary-style .summary-card-info div {
    margin-bottom: 8px;
    color: #212529;
    font-size: 15px;
}

.assignments-summary-style .summary-card-info strong {
    font-weight: 600;
    color: #333;
}

/* Box operai assegnati */
.assignments-summary-style .summary-workers-box {
    margin-top: 12px;
    padding: 12px;
    background: linear-gradient(135deg, #e8f5e9 0%, #f1f8f4 100%);
    border-radius: 6px;
    border-left: 4px solid #66bb6a;
    box-shadow: 0 2px 6px rgba(102,187,106,0.15);
}

.assignments-summary-style .summary-workers-title {
    font-weight: 700;
    color: #2e7d32;
    font-size: 13px;
    margin-bottom: 8px;
}

.assignments-summary-style .summary-worker-item {
    font-size: 12px;
    color: #212529;
    margin-bottom: 5px;
    padding: 4px 0;
}

/* Box note */
.assignments-summary-style .summary-notes-box {
    margin-top: 10px;
    padding: 10px;
    background: rgba(0,123,255,0.08);
    border-radius: 6px;
    font-size: 12px;
    color: #004085;
    border-left: 3px solid #007bff;
}

/* STILI ORIGINALI CANTIERI - Mantenuti per retrocompatibilità */
.assignment-group {
    transition: all 0.3s ease;
    box-shadow: 0 4px 15px rgba(0,0,0,0.1);
}

.assignment-group:hover {
    box-shadow: 0 6px 20px rgba(0,0,0,0.15);
    transform: translateY(-3px);
}

/* STILI AZIENDE IN ASSEGNAZIONI */
#content-assegnazioni .assignment-group > div:last-child > div > div {
    /* Card aziende */
    transition: all 0.3s ease;
}

#content-assegnazioni .assignment-group > div:last-child > div > div:hover {
    transform: translateY(-2px);
    box-shadow: 0 4px 12px rgba(0,0,0,0.12) !important;
    border-color: #2196f3 !important;
}

/* Migliora select filtro cantiere */
#cantiere-filter:hover {
    border-color: #2196f3;
    box-shadow: 0 0 0 3px rgba(33,150,243,0.1);
}

#cantiere-filter:focus {
    outline: none;
    border-color: #1976d2;
    box-shadow: 0 0 0 4px rgba(33,150,243,0.2);
}

/* Pulsanti di assegnazione migliorati */
#content-assegnazioni button[onclick*="showAssignmentModal"] {
    transition: all 0.3s ease;
}

#content-assegnazioni button[onclick*="showAssignmentModal"]:hover {
    transform: scale(1.05);
    box-shadow: 0 4px 12px rgba(33,150,243,0.4) !important;
}

#content-assegnazioni button[onclick*="showAssignmentModal"]:active {
    transform: scale(0.98);
}

/* Pulsanti di rimozione assegnazione */
#content-assegnazioni button[type="submit"][style*="dc3545"] {
    transition: all 0.2s ease;
}

#content-assegnazioni button[type="submit"][style*="dc3545"]:hover {
    background: #bd2130 !important;
    transform: scale(1.15);
    box-shadow: 0 3px 10px rgba(220,53,69,0.4) !important;
}

/* Sezioni operai assegnati */
#content-assegnazioni div[style*="linear-gradient(135deg, #e8f5e9"] {
    transition: all 0.2s ease;
}

#content-assegnazioni div[style*="linear-gradient(135deg, #e8f5e9"]:hover {
    box-shadow: 0 3px 10px rgba(102,187,106,0.2) !important;
}

/* Note aziende */
#content-assegnazioni div[style*="rgba(0,123,255,0.08)"] {
    transition: all 0.2s ease;
}

#content-assegnazioni div[style*="rgba(0,123,255,0.08)"]:hover {
    background: rgba(0,123,255,0.12) !important;
}

/* STILI MODAL */
#assignment-modal, #cantiere-details-modal, #edit-cantiere-modal, #delete-cantiere-modal {
    animation: modalFadeIn 0.3s ease-out;
}

#assignment-modal > div, #cantiere-details-modal > div, #edit-cantiere-modal > div, #delete-cantiere-modal > div {
    animation: modalSlideIn 0.3s ease-out;
}

@keyframes modalFadeIn {
    from { opacity: 0; }
    to { opacity: 1; }
}

@keyframes modalSlideIn {
    from { opacity: 0; transform: translate(-50%, -60%) scale(0.9); }
    to { opacity: 1; transform: translate(-50%, -50%) scale(1); }
}

/* 🚀 NUOVI STILI: Aziende nel modal con filtro */
.azienda-option {
    transition: all 0.3s ease;
    position: relative;
    padding-left: 30px !important;
}

/* ================== STILI RICERCA ASSEGNAZIONI ================== */

/* Campo di ricerca */
#search-assignments-input {
    transition: all 0.3s ease;
    box-shadow: 0 2px 4px rgba(40, 167, 69, 0.1);
}

#search-assignments-input:focus {
    border-color: #28a745 !important;
    box-shadow: 0 0 0 3px rgba(40, 167, 69, 0.2);
    transform: translateY(-1px);
}

#search-assignments-input:hover {
    border-color: #20c997;
    box-shadow: 0 3px 8px rgba(40, 167, 69, 0.15);
}

/* Pulsante clear search */
#clear-search-btn {
    transition: all 0.2s ease;
    opacity: 0.8;
}

#clear-search-btn:hover {
    background: #c82333 !important;
    opacity: 1;
    transform: translateY(-50%) scale(1.1);
    box-shadow: 0 2px 6px rgba(220, 53, 69, 0.3);
}

#clear-search-btn:active {
    transform: translateY(-50%) scale(0.9);
}

/* Informazioni risultati ricerca */
#search-results-info {
    transition: all 0.3s ease;
    font-weight: 500;
    padding: 8px 12px;
    border-radius: 4px;
    background: rgba(255, 255, 255, 0.8);
    border-left: 3px solid currentColor;
}

/* Animazione per aziende filtrate dalla ricerca */
.azienda-option[style*="display: none"] {
    animation: searchHideItem 0.2s ease-in-out forwards;
}

.azienda-option[style*="display: block"] {
    animation: searchShowItem 0.3s ease-out forwards;
}

@keyframes searchHideItem {
    from { 
        opacity: 1; 
        transform: translateX(0) scale(1); 
        max-height: 100px; 
    }
    to { 
        opacity: 0; 
        transform: translateX(-10px) scale(0.95); 
        max-height: 0; 
    }
}

@keyframes searchShowItem {
    from { 
        opacity: 0; 
        transform: translateX(-10px) scale(0.95); 
        max-height: 0; 
    }
    to { 
        opacity: 1; 
        transform: translateX(0) scale(1); 
        max-height: 100px; 
    }
}

/* Evidenziazione termini di ricerca (futuro miglioramento) */
.search-highlight {
    background: linear-gradient(135deg, #fff3cd, #ffeaa7);
    padding: 1px 3px;
    border-radius: 2px;
    font-weight: bold;
}

/* ================== FINE STILI RICERCA ==================

.azienda-option:hover {
    transform: translateX(3px);
    box-shadow: 0 2px 8px rgba(0,0,0,0.1);
}

.azienda-option[data-attiva="1"] {
    /* Stili per aziende abilitate */
    border-left: 4px solid #28a745 !important;
}

.azienda-option[data-attiva="0"] {
    /* Stili per aziende non abilitate */
    border-left: 4px solid #6c757d !important;
}

.azienda-option[data-attiva="1"]:hover {
    background: linear-gradient(135deg, #d4f6d4 0%, #e8f5e8 100%) !important;
    border-color: #20c997 !important;
}

.azienda-option[data-attiva="0"]:hover {
    background: linear-gradient(135deg, #f1f3f4 0%, #e9ecef 100%) !important;
}

/* Indicatori visivi per stati aziende */
.azienda-option[data-attiva="1"]::before {
    content: "✓";
    position: absolute;
    top: 5px;
    left: 5px;
    background: #28a745;
    color: white;
    width: 16px;
    height: 16px;
    border-radius: 50%;
    font-size: 10px;
    display: flex;
    align-items: center;
    justify-content: center;
    font-weight: bold;
}

.azienda-option[data-attiva="0"]::before {
    content: "✕";
    position: absolute;
    top: 5px;
    left: 5px;
    background: #6c757d;
    color: white;
    width: 16px;
    height: 16px;
    border-radius: 50%;
    font-size: 10px;
    display: flex;
    align-items: center;
    justify-content: center;
    font-weight: bold;
}

/* Checkbox selezionato in aziende abilitate */
.azienda-option[data-attiva="1"] input[type="checkbox"]:checked + div strong {
    color: #155724 !important;
    text-shadow: 0 1px 2px rgba(21, 87, 36, 0.2);
}

/* Animazione per il filtro */
.azienda-option[style*="display: none"] {
    animation: slideOut 0.3s ease-in forwards;
}

@keyframes slideOut {
    from { opacity: 1; transform: translateX(0); max-height: 100px; }
    to { opacity: 0; transform: translateX(-20px); max-height: 0; }
}

/* Info filtro */
.filtro-info {
    animation: slideInDown 0.4s ease-out;
}

@keyframes slideInDown {
    from { opacity: 0; transform: translateY(-10px); }
    to { opacity: 1; transform: translateY(0); }
}

/* 🚀 NUOVI STILI: Assegnazioni operai nei tab assegnazioni */
.assignment-group [style*="background: #e3f2fd"] {
    transition: all 0.2s ease;
}

.assignment-group [style*="background: #e3f2fd"]:hover {
    background: linear-gradient(135deg, #bbdefb 0%, #e3f2fd 100%) !important;
    transform: translateY(-1px);
    box-shadow: 0 2px 6px rgba(33, 150, 243, 0.2);
}

/* Stili per gli operai nelle card aziende */
.assignment-group [style*="background: #f8f9fa"] [style*="background: #e3f2fd"] {
    border-left: 3px solid #2196f3;
    border-radius: 4px;
    padding: 8px;
    margin-top: 10px;
}

/* Icone formazioni negli operai */
.assignment-group [style*="color: #28a745"] {
    font-weight: bold;
    text-shadow: 0 1px 2px rgba(40, 167, 69, 0.2);
}

.assignment-group [style*="color: #dc3545"] {
    font-weight: bold;
    text-shadow: 0 1px 2px rgba(220, 53, 69, 0.2);
}

/* 🆕 NUOVI STILI: Modal cantieri */

/* Modal modifica cantiere */
#edit-cantiere-modal .modal-header {
    background: linear-gradient(135deg, #fd7e14, #e8590c);
}

#edit-cantiere-modal input:focus, #edit-cantiere-modal select:focus, #edit-cantiere-modal textarea:focus {
    border-color: #fd7e14 !important;
    box-shadow: 0 0 0 2px rgba(253, 126, 20, 0.25);
}

/* Modal cancellazione cantiere */
#delete-cantiere-modal .modal-header {
    background: linear-gradient(135deg, #dc3545, #c82333);
}

#delete-cantiere-modal input[name="conferma_cancellazione"] {
    font-family: 'Courier New', monospace;
    font-weight: bold;
    text-align: center;
    transition: all 0.3s ease;
}

#delete-cantiere-modal input[name="conferma_cancellazione"]:focus {
    transform: scale(1.02);
    box-shadow: 0 0 0 3px rgba(220, 53, 69, 0.25);
}

#delete-cantiere-modal button[type="submit"]:disabled {
    background: #6c757d !important;
    cursor: not-allowed;
    opacity: 0.6;
}

/* 🆕 NUOVI STILI: Sezione aziende già assegnate */
#already-assigned-section {
    animation: slideInLeft 0.5s ease-out;
}

@keyframes slideInLeft {
    from { opacity: 0; transform: translateX(-20px); }
    to { opacity: 1; transform: translateX(0); }
}

#already-assigned-list > div {
    transition: all 0.3s ease;
}

#already-assigned-list > div:hover {
    transform: translateY(-2px);
    box-shadow: 0 4px 8px rgba(40, 167, 69, 0.2);
}

#already-assigned-list button {
    transition: all 0.2s ease;
}

#already-assigned-list button:hover {
    transform: scale(1.1);
    box-shadow: 0 2px 6px rgba(220, 53, 69, 0.3);
}

/* STILI FORM CANTIERI */
input[name="nome_cantiere"]:focus, #edit-nome-cantiere:focus {
    box-shadow: 0 0 0 3px rgba(40, 167, 69, 0.3);
    border-color: #28a745 !important;
}

input[type="date"]:focus {
    box-shadow: 0 0 0 3px rgba(0, 102, 162, 0.3);
    border-color: #0066a2 !important;
}

/* STILI AZIENDE ASSIGNMENT */
input[name="user_ids[]"]:checked + div strong {
    color: #0066a2;
    font-weight: 900;
}

label:has(input[name="user_ids[]"]:checked) {
    background: linear-gradient(135deg, #e3f2fd, #bbdefb) !important;
    border-color: #2196f3 !important;
    border-width: 2px !important;
    box-shadow: 0 2px 8px rgba(33, 150, 243, 0.3);
}

/* 🚀 NUOVI STILI: Tabella richieste con assegnazioni operai */
.cantiere-row td:nth-child(14) {
    /* Colonna assegnazioni operai */
    max-width: 200px;
    overflow: hidden;
}

.cantiere-row td:nth-child(14) [style*="background: #fff3cd"] {
    margin-bottom: 4px;
    padding: 4px 6px;
    border-radius: 4px;
    border-left: 3px solid #ffc107;
    font-size: 10px;
    line-height: 1.2;
    cursor: help;
    transition: all 0.2s ease;
}

.cantiere-row td:nth-child(14) [style*="background: #fff3cd"]:hover {
    background: linear-gradient(135deg, #fff3cd 0%, #ffeaa7 100%) !important;
    transform: translateX(2px);
    box-shadow: 0 1px 4px rgba(255, 193, 7, 0.3);
}

/* 🚀 NUOVI STILI: Highlight per operai con più cantieri */
.cantiere-row td:nth-child(14) [style*="background: #fff3cd"] strong {
    color: #856404;
    font-weight: bold;
}

/* Operaio assegnato a più cantieri */
.cantiere-row td:nth-child(14) [style*="background: #fff3cd"]:has(span:nth-of-type(3)) {
    border-left-color: #fd7e14 !important;
    background: linear-gradient(135deg, #fff3cd 0%, #ffe8cc 100%) !important;
}

/* STILI CANTIERI CARDS */
.cantiere-card {
    transition: all 0.3s ease;
}

.cantiere-card:hover {
    transform: translateY(-4px);
    box-shadow: 0 8px 25px rgba(0, 102, 162, 0.15);
}

/* 🚀 NUOVI STILI: Sezione dettagli personale migliorata */
[id^="personale-details-"] [style*="border-left: 3px solid #28a745"] {
    animation: slideInLeft 0.4s ease-out;
}

/* Evidenziazione cantieri assegnati nelle righe dettaglio */
[id^="personale-details-"] [style*="background: #d4edda"] {
    transition: all 0.2s ease;
}

[id^="personale-details-"] [style*="background: #d4edda"]:hover {
    background: linear-gradient(135deg, #c3e6cb 0%, #d4edda 100%) !important;
    transform: translateX(3px);
}

/* STILI STATI */
.stato-attivo {
    background: linear-gradient(135deg, #28a745, #20c997);
}

.stato-sospeso {
    background: linear-gradient(135deg, #ffc107, #fd7e14);
}

.stato-completato {
    background: linear-gradient(135deg, #6c757d, #495057);
}

/* ANIMAZIONI FEEDBACK */
@keyframes slideInRight {
    from { opacity: 0; transform: translateX(100%); }
    to { opacity: 1; transform: translateX(0); }
}

@keyframes slideOutRight {
    from { opacity: 1; transform: translateX(0); }
    to { opacity: 0; transform: translateX(100%); }
}

@keyframes pulse {
    0%, 100% { transform: scale(1); }
    50% { transform: scale(1.05); }
}

.pulse-animation {
    animation: pulse 2s infinite;
}

/* 🚀 NUOVI STILI: Modal dettagli cantiere */
#cantiere-details-modal {
    z-index: 10000;
}

#cantiere-details-modal > div {
    box-shadow: 0 10px 30px rgba(0, 0, 0, 0.3);
}

#cantiere-details-header {
    background: linear-gradient(135deg, #17a2b8, #138496);
}

#cantiere-details-body {
    max-height: calc(90vh - 100px);
    overflow-y: auto;
}

/* Stili per il contenuto del modal dettagli */
.cantiere-details-azienda-card {
    transition: all 0.3s ease;
    border-left: 4px solid #2196f3;
}

.cantiere-details-azienda-card:hover {
    transform: translateY(-2px);
    box-shadow: 0 4px 12px rgba(33, 150, 243, 0.2);
}

.cantiere-details-operaio-card {
    transition: all 0.2s ease;
}

.cantiere-details-operaio-card:hover {
    transform: translateX(2px);
    box-shadow: 0 2px 6px rgba(0, 0, 0, 0.1);
}

/* Animazioni per le competenze */
.cantiere-details-competenza {
    display: inline-block;
    font-size: 14px;
    margin: 0 1px;
    animation: competenzaBounce 0.6s ease-out;
}

@keyframes competenzaBounce {
    0%, 20%, 50%, 80%, 100% { transform: translateY(0); }
    40% { transform: translateY(-4px); }
    60% { transform: translateY(-2px); }
}

/* Stili per statistiche conformità */
.conformita-card {
    transition: all 0.3s ease;
}

.conformita-card:hover {
    transform: scale(1.05);
}

.conformita-conforme {
    animation: conformitaPulse 2s infinite;
}

@keyframes conformitaPulse {
    0%, 100% { box-shadow: 0 0 0 rgba(40, 167, 69, 0.4); }
    50% { box-shadow: 0 0 20px rgba(40, 167, 69, 0.6); }
}

.conformita-non-conforme {
    animation: nonConformitaPulse 2s infinite;
}

@keyframes nonConformitaPulse {
    0%, 100% { box-shadow: 0 0 0 rgba(220, 53, 69, 0.4); }
    50% { box-shadow: 0 0 20px rgba(220, 53, 69, 0.6); }
}

/* Loading animation nel modal */
#cantiere-details-loading {
    animation: loadingPulse 1.5s ease-in-out infinite;
}

@keyframes loadingPulse {
    0%, 100% { opacity: 1; }
    50% { opacity: 0.5; }
}

/* RICERCA E FILTRI */
.cantiere-form input:focus,
.cantiere-form select:focus,
.cantiere-form textarea:focus {
    outline: none;
    border-color: #0066a2 !important;
    box-shadow: 0 0 0 2px rgba(0, 102, 162, 0.2);
}

.cantiere-form button:hover {
    background: #004d7a !important;
    transform: translateY(-1px);
}

.cantiere-form .cantiere-row {
    transition: all 0.3s ease;
}

.cantiere-form .cantiere-row:hover {
    box-shadow: 0 2px 8px rgba(0, 102, 162, 0.1);
}

/* STILI SUBMIT BUTTON DINAMICO */
#submit-assignments-btn {
    transition: all 0.3s ease;
    position: relative;
    overflow: hidden;
}

#submit-assignments-btn:hover {
    transform: scale(1.05);
    box-shadow: 0 4px 12px rgba(40, 167, 69, 0.4);
}

#submit-assignments-btn:active {
    transform: scale(0.98);
}

/* RESPONSIVE DESIGN */
@media (max-width: 1200px) {
    .cantiere-row {
        font-size: 12px;
    }
    
    .cantiere-row th,
    .cantiere-row td {
        padding: 6px 4px !important;
    }
    
    /* Collassa alcune colonne su schermi piccoli */
    .cantiere-row td:nth-child(5),
    .cantiere-row td:nth-child(6),
    .cantiere-row td:nth-child(7),
    .cantiere-row td:nth-child(8),
    .cantiere-row th:nth-child(5),
    .cantiere-row th:nth-child(6),
    .cantiere-row th:nth-child(7),
    .cantiere-row th:nth-child(8) {
        display: none;
    }
}

@media (max-width: 992px) {
    .cantiere-row td:nth-child(10),
    .cantiere-row th:nth-child(10) {
        display: none;
    }
}

@media (max-width: 768px) {
    .tab-button {
        padding: 8px 12px !important;
        font-size: 12px;
    }
    
    #assignment-modal > div,
    #edit-cantiere-modal > div,
    #delete-cantiere-modal > div {
        width: 95% !important;
        margin: 20px;
        transform: none !important;
        position: relative !important;
        top: auto !important;
        left: auto !important;
    }
    
    #cantiere-details-modal > div {
        width: 98% !important;
        margin: 10px;
        transform: none !important;
        position: relative !important;
        top: auto !important;
        left: auto !important;
        max-height: 95vh;
    }
    
    .assignment-group {
        margin-bottom: 15px;
    }
    
    .assignment-group [style*="grid-template-columns"] {
        grid-template-columns: 1fr !important;
    }
    
    .azienda-option {
        padding: 8px !important;
    }
    
    .azienda-option [style*="display: flex"] {
        flex-direction: column !important;
        align-items: flex-start !important;
    }
    
    /* Tabella responsive per colonna assegnazioni operai */
    .cantiere-row td:nth-child(14) {
        font-size: 9px !important;
        max-width: 150px;
    }
    
    .cantiere-row td:nth-child(14) [style*="background: #fff3cd"] {
        padding: 2px 4px !important;
        margin-bottom: 2px !important;
    }
}

@media (max-width: 480px) {
    #cantiere-details-modal > div {
        width: 100% !important;
        height: 100% !important;
        max-height: 100vh !important;
        border-radius: 0 !important;
    }
    
    #cantiere-details-header {
        border-radius: 0 !important;
    }
    
    #cantiere-details-body {
        max-height: calc(100vh - 80px);
    }
}

/* DARK MODE SUPPORT */
@media (prefers-color-scheme: dark) {
    .assignment-group {
        background: #2d3748;
        border-color: #4a5568;
        color: #e2e8f0;
    }
    
    .assignment-group [style*="background: #f8f9fa"] {
        background: #4a5568 !important;
        color: #e2e8f0;
    }
    
    .azienda-option {
        background: #2d3748 !important;
        color: #e2e8f0;
        border-color: #4a5568 !important;
    }
}

/* PRINT STYLES */
@media print {
    .tab-button,
    button,
    #assignment-modal,
    #cantiere-details-modal,
    #edit-cantiere-modal,
    #delete-cantiere-modal {
        display: none !important;
    }
    
    .tab-content {
        display: block !important;
    }
    
    .assignment-group {
        break-inside: avoid;
        margin-bottom: 20px;
    }
    
    /* Stampa friendly per assegnazioni operai */
    .cantiere-row td:nth-child(14) {
        font-size: 8px !important;
    }
}

/* ACCESSIBILITY */
@media (prefers-reduced-motion: reduce) {
    * {
        animation-duration: 0.01ms !important;
        animation-iteration-count: 1 !important;
        transition-duration: 0.01ms !important;
    }
}

/* HIGH CONTRAST */
@media (prefers-contrast: high) {
    .tab-button {
        border: 2px solid currentColor;
    }
    
    .assignment-group {
        border: 2px solid #000;
    }
    
    button {
        border: 2px solid currentColor;
    }
    
    .azienda-option {
        border: 2px solid currentColor !important;
    }
    
    /* Alto contrasto per assegnazioni operai */
    .cantiere-row td:nth-child(14) [style*="background: #fff3cd"] {
        border: 1px solid #000 !important;
        color: #000 !important;
    }
}

/* 🎯 STILI FINALI: Performance e smooth scrolling */
html {
    scroll-behavior: smooth;
}

.tab-content {
    will-change: transform;
}

.assignment-group {
    will-change: transform;
}

.azienda-option {
    will-change: transform;
}

/* Preload delle animazioni critiche */
@keyframes preloadFadeIn {
    from { opacity: 0; }
    to { opacity: 1; }
}

@keyframes preloadSlideIn {
    from { transform: translateX(-10px); opacity: 0; }
    to { transform: translateX(0); opacity: 1; }
}

/* GPU acceleration per elementi animati */
.tab-button,
.assignment-group,
.azienda-option {
    transform: translateZ(0);
    backface-visibility: hidden;
    perspective: 1000px;
}

/* 🆕 STILI SPECIFICI PER NUOVE FUNZIONALITÀ */

/* Pulsanti cantiere con colori specifici */
button[onclick*="showEditCantiereModal"] {
    background: linear-gradient(135deg, #fd7e14, #e8590c) !important;
    border: none;
    color: white;
    transition: all 0.3s ease;
}

button[onclick*="showEditCantiereModal"]:hover {
    background: linear-gradient(135deg, #e8590c, #d73e09) !important;
    transform: translateY(-1px);
    box-shadow: 0 4px 8px rgba(253, 126, 20, 0.3);
}

button[onclick*="showDeleteCantiereModal"] {
    background: linear-gradient(135deg, #dc3545, #c82333) !important;
    border: none;
    color: white;
    transition: all 0.3s ease;
}

button[onclick*="showDeleteCantiereModal"]:hover {
    background: linear-gradient(135deg, #c82333, #bd2130) !important;
    transform: translateY(-1px);
    box-shadow: 0 4px 8px rgba(220, 53, 69, 0.3);
}

/* Stili per form validation */
.validation-success {
    border-color: #28a745 !important;
    background-color: rgba(40, 167, 69, 0.1);
}

.validation-error {
    border-color: #dc3545 !important;
    background-color: rgba(220, 53, 69, 0.1);
}

.validation-warning {
    border-color: #ffc107 !important;
    background-color: rgba(255, 193, 7, 0.1);
}

/* Focus trap per modal */
.modal-focus-trap {
    position: relative;
}

.modal-focus-trap::before,
.modal-focus-trap::after {
    content: '';
    position: absolute;
    width: 1px;
    height: 1px;
    opacity: 0;
    pointer-events: none;
}

/* Animazioni per conferme */
@keyframes shake {
    0%, 100% { transform: translateX(0); }
    10%, 30%, 50%, 70%, 90% { transform: translateX(-2px); }
    20%, 40%, 60%, 80% { transform: translateX(2px); }
}

.shake-animation {
    animation: shake 0.6s ease-in-out;
}

/* Stili per notifiche toast (future implementazioni) */
.toast-notification {
    position: fixed;
    top: 20px;
    right: 20px;
    z-index: 11000;
    max-width: 350px;
    padding: 15px;
    border-radius: 8px;
    color: white;
    font-weight: bold;
    animation: slideInFromRight 0.5s ease-out;
}

@keyframes slideInFromRight {
    from { transform: translateX(100%); opacity: 0; }
    to { transform: translateX(0); opacity: 1; }
}

.toast-success {
    background: linear-gradient(135deg, #28a745, #20c997);
}

.toast-error {
    background: linear-gradient(135deg, #dc3545, #c82333);
}

.toast-warning {
    background: linear-gradient(135deg, #ffc107, #fd7e14);
}

.toast-info {
    background: linear-gradient(135deg, #17a2b8, #138496);
}

/* ================== FINE STILI ================== */
</style>

<?php
/**
 * ================== FINE SISTEMA GESTIONE CANTIERI ==================
 * 
 * 🎉 SISTEMA COMPLETO CON TUTTE LE FUNZIONALITÀ:
 * 
 * ✅ NUOVE FUNZIONALITÀ IMPLEMENTATE:
 * - ✏️ Modifica cantieri (nome, date, stato, descrizione)
 * - 🗑️ Cancellazione cantieri (con conferma di sicurezza)
 * - 🔗 Gestione assegnazioni migliorata (visualizza già assegnate)
 * - ❌ Rimozione assegnazioni singole (con conferma)
 * - 🎯 Filtro aziende abilitate nel modal assegnazioni
 * - 📊 Visualizzazione operai assegnati per cantiere
 * - 💾 Validazione form in tempo reale
 * - 🔒 Protezioni e conferme per operazioni critiche
 * 
 * ✅ FUNZIONALITÀ ESISTENTI MANTENUTE:
 * - 📋 Visualizzazione richieste cantiere
 * - 🏗️ Creazione cantieri
 * - 🔗 Assegnazione aziende ai cantieri
 * - 👁️ Dettagli cantieri via AJAX
 * - 📊 Export CSV completo
 * - 🔍 Ricerca e filtri avanzati
 * - 👷 Gestione assegnazioni operai
 * - 📱 Design responsive
 * 
 * 🚀 MIGLIORAMENTI UX:
 * - Animazioni fluide per tutti i modal
 * - Validazioni in tempo reale
 * - Feedback visivi per le azioni
 * - Protezioni contro cancellazioni accidentali
 * - Modal ottimizzati per mobile
 * - Stili CSS avanzati con animazioni
 * 
 * 📡 ENDPOINT AJAX: /cogei/ajax_fornitori/get_cantiere_details.php
 * 🔧 DEBUG: Usa debugCantieriSystem() per informazioni di sistema
 * 
 * ==========================================
 * Per utilizzare il sistema:
 * 1. Copia tutti gli 8 file uno dopo l'altro
 * 2. Incolla nel file PHP del backoffice WordPress
 * 3. Testa le nuove funzionalità:
 *    - Vai al tab "Gestione Cantieri"
 *    - Prova a modificare/cancellare un cantiere
 *    - Testa le assegnazioni migliorate
 * ==========================================
 */

// 🚛 NUOVA FUNZIONE: Mostra dettagli mezzo meccanico
echo '<script>';
echo 'function showMezzoDetails(mezzoId, mezzoDesc) {';
echo '    const mezzoData = window.mezziData[mezzoId];';
echo '    if (!mezzoData) {';
echo '        alert("Dati mezzo non trovati");';
echo '        return;';
echo '    }';
echo '    ';
echo '    let modal = document.getElementById("mezzo-details-modal");';
echo '    if (!modal) {';
echo '        modal = document.createElement("div");';
echo '        modal.id = "mezzo-details-modal";';
echo '        modal.style.cssText = "display: none; position: fixed; top: 0; left: 0; width: 100%; height: 100%; background: rgba(0,0,0,0.5); z-index: 10001;";';
echo '        ';
echo '        modal.innerHTML = `';
echo '            <div class="assignments-summary-style" style="position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%); width: 90%; max-width: 700px; max-height: 80%; overflow-y: auto; margin-bottom: 0;">';
echo '                <div class="summary-header" style="background: linear-gradient(135deg, #ffc107, #f9a825); border-radius: 10px 10px 0 0;">';
echo '                    <div style="display: flex; justify-content: space-between; align-items: center;">';
echo '                        <h4 class="summary-title" style="color: #000;">🚛 Dettagli Mezzo Meccanico</h4>';
echo '                        <button onclick="closeMezzoDetailsModal()" style="background: transparent; color: #000; border: none; font-size: 20px; cursor: pointer;">✕</button>';
echo '                    </div>';
echo '                    <p id="mezzo-name" class="summary-description" style="color: #000;"></p>';
echo '                </div>';
echo '                <div id="mezzo-details-content" class="summary-body"></div>';
echo '            </div>';
echo '        `;';
echo '        ';
echo '        document.body.appendChild(modal);';
echo '        modal.addEventListener("click", function(e) {';
echo '            if (e.target === this) closeMezzoDetailsModal();';
echo '        });';
echo '    }';
echo '    ';
echo '    document.getElementById("mezzo-name").textContent = mezzoDesc;';
echo '    ';
echo '    const tipologiaLabels = {';
echo '        "AUTO": "🚗 Auto",';
echo '        "AUTOCARRO": "🚚 Autocarro",';
echo '        "AUTOCARRO_GRU": "🏗️ Autocarro con Gru",';
echo '        "PLE": "⬆️ PLE",';
echo '        "MEZZI_TERRA": "🚜 Mezzi Movimenti Terra"';
echo '    };';
echo '    ';
echo '    const needsVerifiche = ["AUTOCARRO_GRU", "PLE", "MEZZI_TERRA"].includes(mezzoData.tipologia);';
echo '    ';
echo '    let content = `';
echo '        <div class="summary-card" style="margin-bottom: 20px;">';
echo '            <h5 class="summary-card-title" style="color: #856404; font-size: 18px;">📋 Informazioni Generali</h5>';
echo '            <div style="display: grid; grid-template-columns: 1fr 1fr; gap: 20px;">';
echo '                <div class="summary-card-info">';
echo '                    <strong style="color: #666; font-size: 14px;">Tipologia:</strong><br>';
echo '                    <span style="font-size: 16px; font-weight: 600; color: #333;">${tipologiaLabels[mezzoData.tipologia] || mezzoData.tipologia}</span>';
echo '                </div>';
echo '                <div class="summary-card-info">';
echo '                    <strong style="color: #666; font-size: 14px;">🏷️ Targa:</strong><br>';
echo '                    <span style="font-family: monospace; font-size: 17px; font-weight: bold; color: #333;">${mezzoData.targa}</span>';
echo '                </div>';
echo '            </div>';
echo '        </div>';
echo '        ';
echo '        <div class="summary-card" style="margin-bottom: 20px;">';
echo '            <h5 class="summary-card-title" style="color: #17a2b8; font-size: 18px;">📄 Documenti e Scadenze</h5>';
echo '            <div style="display: grid; gap: 14px;">';
echo '                ';
echo '                <div class="summary-card-info" style="padding: 12px; background: ${mezzoData.file_targa ? "#d4edda" : "#f8d7da"}; border-radius: 6px; border-left: 4px solid ${mezzoData.file_targa ? "#28a745" : "#dc3545"};">';
echo '                    <strong style="font-size: 15px;">📎 File Targa:</strong><br>';
echo '                    ${mezzoData.file_targa ? `<a href="${mezzoData.file_targa}" target="_blank" style="color: #155724; font-size: 15px; font-weight: 600;">Visualizza documento</a>` : "<span style=\"color: #721c24; font-size: 15px;\">Non caricato</span>"}';
echo '                </div>';
echo '                ';
echo '                <div class="summary-card-info" style="padding: 12px; background: ${mezzoData.scadenza_revisione ? "#fff3cd" : "#f8d7da"}; border-radius: 6px; border-left: 4px solid ${mezzoData.scadenza_revisione ? "#ffc107" : "#dc3545"};">';
echo '                    <strong style="font-size: 15px;">🔧 Scadenza Revisione:</strong><br>';
echo '                    <span style="font-size: 15px; font-weight: 600;">${mezzoData.scadenza_revisione ? new Date(mezzoData.scadenza_revisione).toLocaleDateString("it-IT") : "<span style=\"color: #721c24;\">Non impostata</span>"}</span>';
echo '                </div>';
echo '                ';
echo '                <div class="summary-card-info" style="padding: 12px; background: ${mezzoData.scadenza_assicurazione ? "#fff3cd" : "#f8d7da"}; border-radius: 6px; border-left: 4px solid ${mezzoData.scadenza_assicurazione ? "#ffc107" : "#dc3545"};">';
echo '                    <strong style="font-size: 15px;">🛡️ Scadenza Assicurazione:</strong><br>';
echo '                    <span style="font-size: 15px; font-weight: 600;">${mezzoData.scadenza_assicurazione ? new Date(mezzoData.scadenza_assicurazione).toLocaleDateString("it-IT") : "<span style=\"color: #721c24;\">Non impostata</span>"}</span>';
echo '                </div>';
echo '                ';
echo '                <div class="summary-card-info" style="padding: 12px; background: ${mezzoData.file_assicurazione ? "#d4edda" : "#f8d7da"}; border-radius: 6px; border-left: 4px solid ${mezzoData.file_assicurazione ? "#28a745" : "#dc3545"};">';
echo '                    <strong style="font-size: 15px;">📋 File Assicurazione:</strong><br>';
echo '                    ${mezzoData.file_assicurazione ? `<a href="${mezzoData.file_assicurazione}" target="_blank" style="color: #155724; font-size: 15px; font-weight: 600;">Visualizza documento</a>` : "<span style=\"color: #721c24; font-size: 15px;\">Non caricato</span>"}';
echo '                </div>';
echo '            </div>';
echo '        </div>';
echo '    `;';
echo '    ';
echo '    if (needsVerifiche) {';
echo '        content += `';
echo '            <div class="summary-card" style="background: linear-gradient(135deg, #fff3cd 0%, #ffeaa7 100%); border: 2px solid #ffc107; margin-bottom: 20px;">';
echo '                <h5 class="summary-card-title" style="color: #856404; font-size: 18px;">⚠️ Verifiche Periodiche Obbligatorie</h5>';
echo '                <div style="display: grid; gap: 14px;">';
echo '                    <div class="summary-card-info" style="padding: 12px; background: ${mezzoData.scadenza_verifiche_periodiche ? "#fff" : "#f8d7da"}; border-radius: 6px; border-left: 4px solid ${mezzoData.scadenza_verifiche_periodiche ? "#28a745" : "#dc3545"};">';
echo '                        <strong style="font-size: 15px;">📅 Scadenza Verifiche Periodiche:</strong><br>';
echo '                        <span style="font-size: 15px; font-weight: 600;">${mezzoData.scadenza_verifiche_periodiche ? new Date(mezzoData.scadenza_verifiche_periodiche).toLocaleDateString("it-IT") : "<span style=\"color: #721c24;\">Non impostata</span>"}</span>';
echo '                    </div>';
echo '                    <div class="summary-card-info" style="padding: 12px; background: ${mezzoData.file_verifiche_periodiche ? "#d4edda" : "#f8d7da"}; border-radius: 6px; border-left: 4px solid ${mezzoData.file_verifiche_periodiche ? "#28a745" : "#dc3545"};">';
echo '                        <strong style="font-size: 15px;">📄 File Verifiche Periodiche:</strong><br>';
echo '                        ${mezzoData.file_verifiche_periodiche ? `<a href="${mezzoData.file_verifiche_periodiche}" target="_blank" style="color: #155724; font-size: 15px; font-weight: 600;">Visualizza documento</a>` : "<span style=\"color: #721c24; font-size: 15px;\">Non caricato</span>"}';
echo '                    </div>';
echo '                </div>';
echo '            </div>';
echo '        `;';
echo '    }';
echo '    ';
echo '    document.getElementById("mezzo-details-content").innerHTML = content;';
echo '    modal.style.display = "block";';
echo '}';
echo '';
echo 'function closeMezzoDetailsModal() {';
echo '    document.getElementById("mezzo-details-modal").style.display = "none";';
echo '}';
echo '</script>';
?>
